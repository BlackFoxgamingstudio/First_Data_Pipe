<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pdf2xml SYSTEM "pdf2xml.dtd">

<pdf2xml producer="poppler" version="0.48.0">
<page number="1" position="absolute" top="0" left="0" height="1262" width="892">
<image top="0" left="0" width="894" height="1265" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-1_1.jpg"/>
</page>
<page number="2" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="3" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="0" size="41" family="Times" color="#000000"/>
<text top="64" left="54" width="721" height="39" font="0"><b>Learning	C++	by	Creating	Games	with</b></text>
<text top="116" left="54" width="82" height="39" font="0"><b>UE4</b></text>
</page>
<page number="4" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="1" size="19" family="Times" color="#0000ee"/>
<text top="64" left="54" width="325" height="39" font="0"><b>Table	of	Contents</b></text>
<text top="152" left="54" width="383" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#16">Learning	C++	by	Creating	Games	with	UE4</a></text>
<text top="189" left="54" width="62" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#18">Credits</a></text>
<text top="226" left="54" width="152" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#21">About	the	Author</a></text>
<text top="263" left="54" width="182" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#23">About	the	Reviewers</a></text>
<text top="299" left="54" width="175" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#25">www.PacktPub.com</a></text>
<text top="336" left="79" width="417" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#27">Support	files,	eBooks,	discount	offers,	and	more</a></text>
<text top="373" left="105" width="138" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#28">Why	subscribe?</a></text>
<text top="410" left="105" width="324" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#29">Free	access	for	Packt	account	holders</a></text>
<text top="446" left="54" width="65" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#30">Preface</a></text>
<text top="483" left="79" width="279" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#32">What	is	a	game	engine	anyway?</a></text>
<text top="520" left="79" width="264" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#33">What	will	using	UE4	cost	me?</a></text>
<text top="556" left="79" width="566" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#35">Why	don’t	I	just	program	my	own	engine	and	save	the	5	percent?</a></text>
<text top="593" left="79" width="450" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#37">A	game’s	overview	–	the	Play-Reward-Growth	loop</a></text>
<text top="630" left="105" width="115" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#40">Monetization</a></text>
<text top="667" left="105" width="86" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#41">Why	C++</a></text>
<text top="703" left="79" width="194" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#42">What	this	book	covers</a></text>
<text top="740" left="79" width="246" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#44">What	you	need	for	this	book</a></text>
<text top="777" left="79" width="177" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#46">Who	this	book	is	for</a></text>
<text top="814" left="79" width="109" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#48">Conventions</a></text>
<text top="850" left="79" width="144" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#50">Reader	feedback</a></text>
<text top="887" left="79" width="154" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#52">Customer	support</a></text>
<text top="924" left="105" width="274" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#54">Downloading	the	example	code</a></text>
<text top="961" left="105" width="374" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#55">Downloading	the	color	images	of	this	book</a></text>
<text top="997" left="105" width="53" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#56">Errata</a></text>
<text top="1034" left="105" width="55" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#57">Piracy</a></text>
<text top="1071" left="105" width="86" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#58">Questions</a></text>
<text top="1107" left="54" width="173" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#59">1.	Coding	with	C++</a></text>
<text top="1144" left="79" width="188" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#61">Setting	up	our	project</a></text>
<text top="1181" left="105" width="361" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#62">Using	Microsoft	Visual	C++	on	Windows</a></text>
</page>
<page number="5" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="105" width="204" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#66">Using	XCode	on	a	Mac</a></text>
<text top="94" left="79" width="282" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#71">Creating	your	first	C++	program</a></text>
<text top="131" left="105" width="101" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#76">Semicolons</a></text>
<text top="168" left="105" width="136" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#77">Handling	errors</a></text>
<text top="204" left="105" width="82" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#79">Warnings</a></text>
<text top="241" left="79" width="283" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#80">What	is	building	and	compiling?</a></text>
<text top="278" left="105" width="79" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#82">Scripting</a></text>
<text top="315" left="130" width="180" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#82">Exercise	–	ASCII	art</a></text>
<text top="351" left="79" width="84" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#83">Summary</a></text>
<text top="388" left="54" width="218" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">2.	Variables	and	Memory</a></text>
<text top="425" left="79" width="80" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#87">Variables</a></text>
<text top="461" left="105" width="360" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#88">Declaring	variables	–	touching	the	silicon</a></text>
<text top="498" left="130" width="463" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#88">Reading	and	writing	to	your	reserved	spot	in	memory</a></text>
<text top="535" left="105" width="209" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#90">Numbers	are	everything</a></text>
<text top="572" left="105" width="157" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#92">More	on	variables</a></text>
<text top="608" left="105" width="112" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#94">Math	in	C++</a></text>
<text top="645" left="130" width="83" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#95">Exercises</a></text>
<text top="682" left="105" width="241" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#96">Generalized	variable	syntax</a></text>
<text top="719" left="105" width="131" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#97">Primitive	types</a></text>
<text top="755" left="105" width="108" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#98">Object	types</a></text>
<text top="792" left="130" width="151" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#99">Exercise	–	Player</a></text>
<text top="829" left="154" width="73" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#99">Solution</a></text>
<text top="865" left="105" width="71" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#101">Pointers</a></text>
<text top="902" left="105" width="194" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#102">What	can	pointers	do?</a></text>
<text top="939" left="105" width="194" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#103">Address	of	operator	&amp;</a></text>
<text top="976" left="130" width="152" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#104">The	Null	pointers</a></text>
<text top="1012" left="105" width="26" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#105">cin</a></text>
<text top="1049" left="105" width="62" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#106">printf()</a></text>
<text top="1086" left="130" width="74" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#107">Exercise</a></text>
<text top="1123" left="130" width="73" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#107">Solution</a></text>
<text top="1159" left="79" width="84" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#108">Summary</a></text>
</page>
<page number="6" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="191" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#110">3.	If,	Else,	and	Switch</a></text>
<text top="94" left="79" width="90" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#112">Branching</a></text>
<text top="131" left="79" width="323" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#113">Controlling	the	flow	of	your	program</a></text>
<text top="168" left="105" width="141" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#115">The	==	operator</a></text>
<text top="204" left="105" width="179" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#116">Coding	if	statements</a></text>
<text top="241" left="105" width="199" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#118">Coding	else	statements</a></text>
<text top="278" left="105" width="684" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#119">Testing	for	inequalities	using	other	comparison	operators	(&gt;,	&gt;=,	&lt;,	&lt;=,	and	!=)</a></text>
<text top="315" left="79" width="201" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#120">Using	logical	operators</a></text>
<text top="351" left="105" width="176" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#122">The	Not	(!)	operator</a></text>
<text top="388" left="130" width="83" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#122">Exercises</a></text>
<text top="425" left="130" width="73" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#122">Solution</a></text>
<text top="461" left="105" width="207" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#124">The	And	(&amp;&amp;)	operator</a></text>
<text top="498" left="105" width="167" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#125">The	Or	(||)	operator</a></text>
<text top="535" left="79" width="327" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#126">Our	first	example	with	Unreal	Engine</a></text>
<text top="572" left="105" width="74" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#133">Exercise</a></text>
<text top="608" left="105" width="73" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#134">Solution</a></text>
<text top="645" left="105" width="338" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#135">Branching	code	in	more	than	two	ways</a></text>
<text top="682" left="105" width="179" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#136">The	else	if	statement</a></text>
<text top="719" left="130" width="74" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#137">Exercise</a></text>
<text top="755" left="130" width="73" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#137">Solution</a></text>
<text top="792" left="105" width="183" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#138">The	switch	statement</a></text>
<text top="829" left="130" width="139" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#140">Switch	versus	if</a></text>
<text top="865" left="130" width="74" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#141">Exercise</a></text>
<text top="902" left="130" width="73" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#142">Solution</a></text>
<text top="939" left="79" width="84" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#143">Summary</a></text>
<text top="976" left="54" width="95" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#145">4.	Looping</a></text>
<text top="1012" left="79" width="131" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#147">The	while	loop</a></text>
<text top="1049" left="105" width="116" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#149">Infinite	loops</a></text>
<text top="1086" left="105" width="83" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#150">Exercises</a></text>
<text top="1123" left="105" width="82" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#151">Solutions</a></text>
<text top="1159" left="79" width="158" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#152">The	do/while	loop</a></text>
</page>
<page number="7" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="79" width="108" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#154">The	for	loop</a></text>
<text top="94" left="105" width="83" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#157">Exercises</a></text>
<text top="131" left="105" width="82" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#158">Solutions</a></text>
<text top="168" left="79" width="248" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#159">Looping	with	Unreal	Engine</a></text>
<text top="204" left="79" width="84" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#162">Summary</a></text>
<text top="241" left="54" width="213" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#164">5.	Functions	and	Macros</a></text>
<text top="278" left="79" width="85" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#166">Functions</a></text>
<text top="315" left="79" width="434" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#169">An	example	of	a	&lt;cmath&gt;	library	function	–	sqrt()</a></text>
<text top="351" left="79" width="229" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#172">Writing	our	own	functions</a></text>
<text top="388" left="105" width="207" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#174">A	sample	program	trace</a></text>
<text top="425" left="105" width="74" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#176">Exercise</a></text>
<text top="461" left="105" width="73" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#177">Solution</a></text>
<text top="498" left="79" width="224" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#178">Functions	with	arguments</a></text>
<text top="535" left="79" width="240" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#180">Functions	that	return	values</a></text>
<text top="572" left="105" width="83" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#183">Exercises</a></text>
<text top="608" left="105" width="82" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#184">Solutions</a></text>
<text top="645" left="79" width="165" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">Variables,	revisited</a></text>
<text top="682" left="105" width="142" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#187">Global	variables</a></text>
<text top="719" left="105" width="132" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#188">Local	variables</a></text>
<text top="755" left="105" width="201" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#189">The	scope	of	a	variable</a></text>
<text top="792" left="105" width="180" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#191">Static	local	variables</a></text>
<text top="829" left="105" width="134" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#192">Const	variables</a></text>
<text top="865" left="105" width="173" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#193">Function	prototypes</a></text>
<text top="902" left="105" width="137" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#194">.h	and	.cpp	files</a></text>
<text top="939" left="105" width="185" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#195">prototypes.h	contains</a></text>
<text top="976" left="105" width="161" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#196">funcs.cpp	contains</a></text>
<text top="1012" left="105" width="157" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#197">main.cpp	contains</a></text>
<text top="1049" left="105" width="141" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#198">Extern	variables</a></text>
<text top="1086" left="79" width="65" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#199">Macros</a></text>
<text top="1123" left="105" width="433" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#201">Advice	–	try	to	use	const	variables	where	possible</a></text>
<text top="1159" left="79" width="203" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#202">Macros	with	arguments</a></text>
</page>
<page number="8" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="105" width="549" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#204">Advice	–	use	inline	functions	instead	of	macros	with	arguments</a></text>
<text top="94" left="79" width="84" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#205">Summary</a></text>
<text top="131" left="54" width="308" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#207">6.	Objects,	Classes,	and	Inheritance</a></text>
<text top="168" left="79" width="114" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#209">struct	objects</a></text>
<text top="204" left="105" width="159" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#210">Member	functions</a></text>
<text top="241" left="130" width="151" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#210">The	this	keyword</a></text>
<text top="278" left="105" width="169" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#211">Strings	are	objects?</a></text>
<text top="315" left="105" width="246" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#212">Invoking	a	member	function</a></text>
<text top="351" left="130" width="83" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#213">Exercises</a></text>
<text top="388" left="130" width="82" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#213">Solutions</a></text>
<text top="425" left="105" width="230" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#214">Privates	and	encapsulation</a></text>
<text top="461" left="105" width="227" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#216">Some	people	like	it	public</a></text>
<text top="498" left="79" width="156" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#217">class	versus	struct</a></text>
<text top="535" left="79" width="159" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#219">Getters	and	setters</a></text>
<text top="572" left="105" width="62" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#221">Getters</a></text>
<text top="608" left="105" width="59" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#222">Setters</a></text>
<text top="645" left="105" width="364" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#223">But	what’s	the	point	of	get/set	OPS?</a></text>
<text top="682" left="79" width="247" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#225">Constructors	and	destructors</a></text>
<text top="719" left="79" width="148" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#228">Class	inheritance</a></text>
<text top="755" left="105" width="135" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#230">Derived	classes</a></text>
<text top="792" left="130" width="185" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#233">Syntax	of	inheritance</a></text>
<text top="829" left="130" width="230" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#233">What	does	inheritance	do?</a></text>
<text top="865" left="105" width="138" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#234">is-a	relationship</a></text>
<text top="902" left="105" width="164" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#235">protected	variables</a></text>
<text top="939" left="105" width="146" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#236">Virtual	functions</a></text>
<text top="976" left="105" width="393" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#237">Purely	virtual	functions	(and	abstract	classes)</a></text>
<text top="1012" left="79" width="176" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#238">Multiple	inheritance</a></text>
<text top="1049" left="105" width="161" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#240">private	inheritance</a></text>
<text top="1086" left="79" width="283" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#241">Putting	your	classes	into	headers</a></text>
<text top="1123" left="105" width="95" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#245">.h	and	.cpp</a></text>
<text top="1159" left="105" width="74" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#247">Exercise</a></text>
</page>
<page number="9" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="79" width="84" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#248">Summary</a></text>
<text top="94" left="54" width="277" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#250">7.	Dynamic	Memory	Allocation</a></text>
<text top="131" left="79" width="247" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#253">Dynamic	memory	allocation</a></text>
<text top="168" left="105" width="171" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#254">The	delete	keyword</a></text>
<text top="204" left="105" width="124" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#255">Memory	leaks</a></text>
<text top="241" left="79" width="126" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#256">Regular	arrays</a></text>
<text top="278" left="105" width="145" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#258">The	array	syntax</a></text>
<text top="315" left="105" width="74" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#259">Exercise</a></text>
<text top="351" left="105" width="82" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#260">Solutions</a></text>
<text top="388" left="79" width="440" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#261">C++	style	dynamic	size	arrays	(new[]	and	delete[])</a></text>
<text top="425" left="79" width="205" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#264">Dynamic	C-style	arrays</a></text>
<text top="461" left="79" width="84" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#266">Summary</a></text>
<text top="498" left="54" width="177" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#268">8.	Actors	and	Pawns</a></text>
<text top="535" left="79" width="179" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#270">Actors	versus	pawns</a></text>
<text top="572" left="79" width="324" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#271">Creating	a	world	to	put	your	actors	in</a></text>
<text top="608" left="79" width="134" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#275">The	UE4	editor</a></text>
<text top="645" left="105" width="129" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#277">Editor	controls</a></text>
<text top="682" left="105" width="167" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#278">Play	mode	controls</a></text>
<text top="719" left="105" width="239" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#279">Adding	objects	to	the	scene</a></text>
<text top="755" left="79" width="182" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#282">Starting	from	scratch</a></text>
<text top="792" left="105" width="180" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#285">Adding	light	sources</a></text>
<text top="829" left="105" width="158" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#287">Collision	volumes</a></text>
<text top="865" left="130" width="414" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#287">Adding	collision	detection	for	the	objects	editor</a></text>
<text top="902" left="79" width="246" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#290">Adding	an	actor	to	the	scene</a></text>
<text top="939" left="79" width="203" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#292">Creating	a	player	entity</a></text>
<text top="976" left="105" width="399" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#294">Inheriting	from	UE4	GameFramework	classes</a></text>
<text top="1012" left="130" width="362" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#296">Associating	a	model	with	the	Avatar	class</a></text>
<text top="1049" left="154" width="224" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#296">Downloading	free	models</a></text>
<text top="1086" left="105" width="155" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#299">Loading	the	mesh</a></text>
<text top="1123" left="130" width="346" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#299">Creating	a	blueprint	from	our	C++	class</a></text>
<text top="1159" left="79" width="452" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#308">Writing	C++	code	that	controls	the	game’s	character</a></text>
</page>
<page number="10" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="105" width="425" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#310">Making	the	player	an	instance	of	the	Avatar	class</a></text>
<text top="94" left="105" width="236" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#313">Setting	up	controller	inputs</a></text>
<text top="131" left="130" width="74" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#315">Exercise</a></text>
<text top="168" left="130" width="73" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#315">Solution</a></text>
<text top="204" left="105" width="124" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#317">Yaw	and	pitch</a></text>
<text top="241" left="79" width="325" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#319">Creating	non-player	character	entities</a></text>
<text top="278" left="79" width="400" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#324">Displaying	a	quote	from	each	NPC	dialog	box</a></text>
<text top="315" left="105" width="293" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#326">Displaying	messages	on	the	HUD</a></text>
<text top="351" left="105" width="219" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#329">Using	TArray&lt;Message&gt;</a></text>
<text top="388" left="130" width="74" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#330">Exercise</a></text>
<text top="425" left="130" width="73" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#331">Solution</a></text>
<text top="461" left="105" width="374" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#332">Triggering	an	event	when	it	is	near	an	NPC</a></text>
<text top="498" left="130" width="629" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#333">Make	the	NPC	display	something	to	the	HUD	when	something	is	nearby</a></text>
<text top="535" left="130" width="83" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#334">Exercises</a></text>
<text top="572" left="130" width="82" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#335">Solutions</a></text>
<text top="608" left="79" width="84" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#337">Summary</a></text>
<text top="645" left="54" width="398" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#339">9.	Templates	and	Commonly	Used	container-fluids</a></text>
<text top="682" left="79" width="255" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#341">Debugging	the	output	in	UE4</a></text>
<text top="719" left="79" width="159" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#342">UE4’s	TArray&lt;T&gt;</a></text>
<text top="755" left="105" width="290" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#344">An	example	that	uses	TArray&lt;T&gt;</a></text>
<text top="792" left="105" width="155" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#346">Iterating	a	TArray</a></text>
<text top="829" left="130" width="424" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#346">The	vanilla	for	loop	and	square	brackets	notation</a></text>
<text top="865" left="130" width="72" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#346">Iterators</a></text>
<text top="902" left="105" width="382" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#348">Finding	whether	an	element	is	in	the	TArray</a></text>
<text top="939" left="79" width="78" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#349">TSet&lt;T&gt;</a></text>
<text top="976" left="105" width="134" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#351">Iterating	a	TSet</a></text>
<text top="1012" left="105" width="148" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#352">Intersecting	TSet</a></text>
<text top="1049" left="105" width="128" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#353">Unioning	TSet</a></text>
<text top="1086" left="105" width="113" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#354">Finding	TSet</a></text>
<text top="1123" left="79" width="111" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#355">TMap&lt;T,	S&gt;</a></text>
<text top="1159" left="105" width="347" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#357">A	list	of	items	for	the	player’s	inventory</a></text>
</page>
<page number="11" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="105" width="146" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#358">Iterating	a	TMap</a></text>
<text top="94" left="79" width="419" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#359">C++	STL	versions	of	commonly	used	container-fluids</a></text>
<text top="131" left="105" width="111" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#361">C++	STL	set</a></text>
<text top="168" left="130" width="258" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#361">Finding	an	element	in	a	&lt;set&gt;</a></text>
<text top="204" left="130" width="74" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#362">Exercise</a></text>
<text top="241" left="130" width="73" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#362">Solution</a></text>
<text top="278" left="105" width="124" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#363">C++	STL	map</a></text>
<text top="315" left="130" width="271" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#363">Finding	an	element	in	a	&lt;map&gt;</a></text>
<text top="351" left="130" width="74" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#363">Exercise</a></text>
<text top="388" left="130" width="73" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#364">Solution</a></text>
<text top="425" left="79" width="84" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#365">Summary</a></text>
<text top="461" left="54" width="341" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#367">10.	Inventory	System	and	Pickup	Items</a></text>
<text top="498" left="79" width="204" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#369">Declaring	the	backpack</a></text>
<text top="535" left="105" width="174" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#370">Forward	declaration</a></text>
<text top="572" left="105" width="142" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#373">Importing	assets</a></text>
<text top="608" left="105" width="324" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#378">Attaching	an	action	mapping	to	a	key</a></text>
<text top="645" left="79" width="194" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#380">Base	class	PickupItem</a></text>
<text top="682" left="105" width="175" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#384">The	root	component</a></text>
<text top="719" left="130" width="155" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#385">Getting	the	avatar</a></text>
<text top="755" left="130" width="245" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#385">Getting	the	player	controller</a></text>
<text top="792" left="130" width="149" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#386">Getting	the	HUD</a></text>
<text top="829" left="79" width="255" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#387">Drawing	the	player	inventory</a></text>
<text top="865" left="105" width="244" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#389">Using	HUD::DrawTexture()</a></text>
<text top="902" left="130" width="74" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#391">Exercise</a></text>
<text top="939" left="105" width="271" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#392">Detecting	inventory	item	clicks</a></text>
<text top="976" left="130" width="164" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#392">Dragging	elements</a></text>
<text top="1012" left="130" width="83" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#395">Exercises</a></text>
<text top="1049" left="79" width="84" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#396">Summary</a></text>
<text top="1086" left="54" width="112" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#398">11.	Monsters</a></text>
<text top="1123" left="79" width="92" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#400">Landscape</a></text>
<text top="1159" left="105" width="205" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#403">Sculpting	the	landscape</a></text>
</page>
<page number="12" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="79" width="80" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#405">Monsters</a></text>
<text top="94" left="105" width="229" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#411">Basic	monster	intelligence</a></text>
<text top="131" left="130" width="346" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#411">Moving	the	monster	–	steering	behavior</a></text>
<text top="168" left="130" width="330" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#413">The	discrete	nature	of	monster	motion</a></text>
<text top="204" left="130" width="183" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#415">Monster	SightSphere</a></text>
<text top="241" left="79" width="255" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Monster	attacks	on	the	player</a></text>
<text top="278" left="105" width="119" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#420">Melee	attacks</a></text>
<text top="315" left="130" width="221" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#420">Defining	a	melee	weapon</a></text>
<text top="351" left="154" width="305" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#420">Coding	for	a	melee	weapon	in	C++</a></text>
<text top="388" left="154" width="191" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#422">Downloading	a	sword</a></text>
<text top="425" left="154" width="378" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#424">Creating	a	blueprint	for	your	melee	weapon</a></text>
<text top="461" left="105" width="67" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#426">Sockets</a></text>
<text top="498" left="130" width="464" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#426">Creating	a	skeletal	mesh	socket	in	the	monster’s	hand</a></text>
<text top="535" left="130" width="288" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#427">Attaching	the	sword	to	the	model</a></text>
<text top="572" left="130" width="329" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#429">Code	to	equip	the	player	with	a	sword</a></text>
<text top="608" left="130" width="272" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#431">Triggering	the	attack	animation</a></text>
<text top="645" left="154" width="140" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#431">Blueprint	basics</a></text>
<text top="682" left="154" width="466" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#435">Modifying	the	animation	blueprint	for	Mixamo	Adam</a></text>
<text top="719" left="154" width="215" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#441">Code	to	swing	the	sword</a></text>
<text top="755" left="105" width="236" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#444">Projectile	or	ranged	attacks</a></text>
<text top="792" left="130" width="123" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#445">Bullet	physics</a></text>
<text top="829" left="130" width="304" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#447">Adding	bullets	to	the	monster	class</a></text>
<text top="865" left="105" width="154" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#451">Player	knockback</a></text>
<text top="902" left="79" width="84" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#452">Summary</a></text>
<text top="939" left="54" width="129" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#454">12.	Spell	Book</a></text>
<text top="976" left="79" width="177" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#458">The	particle	systems</a></text>
<text top="1012" left="105" width="246" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#461">Changing	particle	properties</a></text>
<text top="1049" left="105" width="253" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#464">Settings	for	the	blizzard	spell</a></text>
<text top="1086" left="79" width="140" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#472">Spell	class	actor</a></text>
<text top="1123" left="105" width="198" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#476">Blueprinting	our	spells</a></text>
<text top="1159" left="105" width="147" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#478">Picking	up	spells</a></text>
</page>
<page number="13" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="130" width="441" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#478">Creating	blueprints	for	PickupItems	that	cast	spells</a></text>
<text top="94" left="79" width="348" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#482">Attaching	right	mouse	click	to	cast	spell</a></text>
<text top="131" left="105" width="337" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#484">Writing	the	avatar’s	CastSpell	function</a></text>
<text top="168" left="130" width="448" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#484">Instantiating	the	spell	–	GetWorld()-&gt;SpawnActor()</a></text>
<text top="204" left="130" width="68" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#485">if(spell)</a></text>
<text top="241" left="130" width="188" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#485">spell-&gt;SetCaster(this)</a></text>
<text top="278" left="105" width="364" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#486">Writing	AMyHUD::MouseRightClicked()</a></text>
<text top="315" left="130" width="315" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#487">Activating	right	mouse	button	clicks</a></text>
<text top="351" left="79" width="179" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#490">Creating	other	spells</a></text>
<text top="388" left="105" width="115" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#492">The	fire	spell</a></text>
<text top="425" left="105" width="83" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#493">Exercises</a></text>
<text top="461" left="79" width="84" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#494">Summary</a></text>
<text top="498" left="54" width="49" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#496">Index</a></text>
</page>
<page number="14" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="15" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="721" height="39" font="0"><b>Learning	C++	by	Creating	Games	with</b></text>
<text top="116" left="54" width="82" height="39" font="0"><b>UE4</b></text>
</page>
<page number="16" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="17" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="2" size="19" family="Times" color="#000000"/>
<text top="64" left="54" width="721" height="39" font="0"><b>Learning	C++	by	Creating	Games	with</b></text>
<text top="116" left="54" width="82" height="39" font="0"><b>UE4</b></text>
<text top="172" left="54" width="309" height="20" font="2">Copyright	©	2015	Packt	Publishing</text>
<text top="209" left="54" width="765" height="20" font="2">All	rights	reserved.	No	part	of	this	book	may	be	reproduced,	stored	in	a	retrieval	system,</text>
<text top="235" left="54" width="752" height="20" font="2">or	transmitted	in	any	form	or	by	any	means,	without	the	prior	written	permission	of	the</text>
<text top="260" left="54" width="759" height="20" font="2">publisher,	except	in	the	case	of	brief	quotations	embedded	in	critical	articles	or	reviews.</text>
<text top="297" left="54" width="756" height="20" font="2">Every	effort	has	been	made	in	the	preparation	of	this	book	to	ensure	the	accuracy	of	the</text>
<text top="323" left="54" width="753" height="20" font="2">information	presented.	However,	the	information	contained	in	this	book	is	sold	without</text>
<text top="349" left="54" width="725" height="20" font="2">warranty,	either	express	or	implied.	Neither	the	author,	nor	Packt	Publishing,	and	its</text>
<text top="375" left="54" width="777" height="20" font="2">dealers	and	distributors	will	be	held	liable	for	any	damages	caused	or	alleged	to	be	caused</text>
<text top="401" left="54" width="295" height="20" font="2">directly	or	indirectly	by	this	book.</text>
<text top="438" left="54" width="714" height="20" font="2">Packt	Publishing	has	endeavored	to	provide	trademark	information	about	all	of	the</text>
<text top="464" left="54" width="709" height="20" font="2">companies	and	products	mentioned	in	this	book	by	the	appropriate	use	of	capitals.</text>
<text top="490" left="54" width="673" height="20" font="2">However,	Packt	Publishing	cannot	guarantee	the	accuracy	of	this	information.</text>
<text top="526" left="54" width="267" height="20" font="2">First	published:	February	2015</text>
<text top="563" left="54" width="267" height="20" font="2">Production	reference:	1180215</text>
<text top="600" left="54" width="304" height="20" font="2">Published	by	Packt	Publishing	Ltd.</text>
<text top="636" left="54" width="110" height="20" font="2">Livery	Place</text>
<text top="673" left="54" width="140" height="20" font="2">35	Livery	Street</text>
<text top="710" left="54" width="230" height="20" font="2">Birmingham	B3	2PB,	UK.</text>
<text top="747" left="54" width="224" height="20" font="2">ISBN	978-1-78439-657-2</text>
<text top="783" left="54" width="172" height="20" font="1"><a href="http://www.packtpub.com">www.packtpub.com</a></text>
</page>
<page number="18" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="19" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="3" size="19" family="Times" color="#000000"/>
<text top="64" left="54" width="136" height="39" font="0"><b>Credits</b></text>
<text top="120" left="54" width="67" height="19" font="3"><b>Author</b></text>
<text top="157" left="54" width="128" height="20" font="2">William	Sherif</text>
<text top="194" left="54" width="95" height="19" font="3"><b>Reviewers</b></text>
<text top="230" left="54" width="130" height="20" font="2">Brandon	Mann</text>
<text top="267" left="54" width="125" height="20" font="2">Matt	Sutherlin</text>
<text top="304" left="54" width="100" height="20" font="2">Alan	Wolfe</text>
<text top="341" left="54" width="208" height="19" font="3"><b>Commissioning	Editor</b></text>
<text top="377" left="54" width="146" height="20" font="2">Edward	Bowkett</text>
<text top="414" left="54" width="171" height="19" font="3"><b>Acquisition	Editor</b></text>
<text top="451" left="54" width="113" height="20" font="2">Subho	Gupta</text>
<text top="488" left="54" width="266" height="19" font="3"><b>Content	Development	Editor</b></text>
<text top="524" left="54" width="113" height="20" font="2">Anand	Singh</text>
<text top="561" left="54" width="153" height="19" font="3"><b>Technical	Editor</b></text>
<text top="598" left="54" width="155" height="20" font="2">Saurabh	Malhotra</text>
<text top="635" left="54" width="123" height="19" font="3"><b>Copy	Editors</b></text>
<text top="671" left="54" width="122" height="20" font="2">Dipti	Kapadia</text>
<text top="708" left="54" width="136" height="20" font="2">Deepa	Nambiar</text>
<text top="745" left="54" width="187" height="19" font="3"><b>Project	Coordinator</b></text>
<text top="781" left="54" width="153" height="20" font="2">Rashi	Khivansara</text>
<text top="818" left="54" width="120" height="19" font="3"><b>Proofreaders</b></text>
<text top="855" left="54" width="113" height="20" font="2">Martin	Diver</text>
<text top="891" left="54" width="186" height="20" font="2">Lawrence	A.	Herman</text>
<text top="928" left="54" width="103" height="20" font="2">Paul	Hindle</text>
<text top="965" left="54" width="72" height="19" font="3"><b>Indexer</b></text>
<text top="1002" left="54" width="138" height="20" font="2">Hemangini	Bari</text>
<text top="1039" left="54" width="85" height="19" font="3"><b>Graphics</b></text>
<text top="1075" left="54" width="111" height="20" font="2">Sheetal	Aute</text>
<text top="1112" left="54" width="223" height="19" font="3"><b>Production	Coordinator</b></text>
<text top="1148" left="54" width="117" height="20" font="2">Melwyn	D’sa</text>
<text top="1186" left="54" width="114" height="19" font="3"><b>Cover	Work</b></text>
</page>
<page number="20" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="117" height="20" font="2">Melwyn	D’sa</text>
</page>
<page number="21" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="22" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="329" height="39" font="0"><b>About	the	Author</b></text>
<text top="120" left="54" width="763" height="19" font="3"><b>William	Sherif</b>	is	a	C++	programmer	with	more	than	8	years’	programming	experience.</text>
<text top="146" left="54" width="780" height="20" font="2">He	has	a	wide	range	of	experience	in	the	programming	world,	from	game	programming	to</text>
<text top="172" left="54" width="764" height="20" font="2">web	programming.	He	has	also	worked	as	a	university	course	instructor	(sessional)	for	7</text>
<text top="198" left="54" width="51" height="20" font="2">years.</text>
<text top="235" left="54" width="778" height="20" font="2">He	has	released	several	apps	on	to	the	iTunes	store,	including	strum	and	MARSHALL	OF</text>
<text top="260" left="54" width="238" height="20" font="2">THE	ELITE	SQUADRON.</text>
<text top="297" left="54" width="749" height="20" font="2">In	the	past,	he	has	won	acclaim	for	delivering	course	material	in	an	easy-to-understand</text>
<text top="323" left="54" width="69" height="20" font="2">manner.</text>
<text top="360" left="54" width="758" height="20" font="2">I’d	like	to	thank	my	family,	for	their	support	when	I	was	writing	this	book;	Mostafa	and</text>
<text top="386" left="54" width="652" height="20" font="2">Fatima,	for	their	hospitality;	as	well	as	Ryan	and	Reda,	for	letting	me	write.</text>
</page>
<page number="23" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="24" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="4" size="19" family="Times" color="#000000"/>
<text top="64" left="54" width="384" height="39" font="0"><b>About	the	Reviewers</b></text>
<text top="120" left="54" width="729" height="19" font="3"><b>Brandon	Mann</b>	is	a	well-rounded	game	developer	with	over	7	years	of	professional</text>
<text top="146" left="54" width="720" height="20" font="2">game-development	experience.	He	has	worked	on	a	wide	range	of	titles,	from	Indie</text>
<text top="172" left="54" width="690" height="20" font="2">Games	to	AAA	titles,	and	at	companies	such	as	Warner	Bros.,	Midway,	and	343</text>
<text top="198" left="54" width="754" height="20" font="2">Industries.	He	has	worked	on	several	titles,	including	<i>Blacklight</i>,	<i>Tango	Down</i>,	<i>Gotham</i></text>
<text top="224" left="54" width="305" height="20" font="4"><i>City</i>	<i>Impostors</i>,	and	<i>Battle	Nations</i>.</text>
<text top="261" left="54" width="745" height="19" font="3"><b>Matt	Sutherlin</b>	has	been	working	in	the	games	industry	for	over	a	decade	now,	where</text>
<text top="286" left="54" width="740" height="20" font="2">he’s	held	job	titles	ranging	from	QA	and	scripter	to	engine	programmer,	and	technical</text>
<text top="312" left="54" width="747" height="20" font="2">artist.	Most	recently,	he	has	been	heavily	focusing	on	graphics	technology,	working	on</text>
<text top="338" left="54" width="753" height="20" font="2">engine	renderers,	art	pipelines,	and	shaders	for	AAA	titles,	such	as	<i>Heroes	of	the	Storm</i></text>
<text top="364" left="54" width="205" height="20" font="2">and	<i>Halo	5:	Guardians</i>.</text>
<text top="401" left="54" width="754" height="20" font="2">I	would	like	to	thank	my	beautiful	wife,	Megan,	for	years	of	support	and	understanding</text>
<text top="427" left="54" width="528" height="20" font="2">and	Matthew	Phillips	for	giving	me	my	debut	in	the	industry.</text>
<text top="464" left="54" width="765" height="19" font="3"><b>Alan	Wolfe</b>	is	a	self-taught	game	and	engine	programmer	who	has	worked	at	companies</text>
<text top="490" left="54" width="775" height="20" font="2">such	as	inXile	Entertainment,	Midway,	Warner	Bros.,	and	Blizzard	Entertainment.	He	has</text>
<text top="515" left="54" width="784" height="20" font="2">worked	on	titles	including	<i>Line	Rider	2</i>,	<i>Unbound</i>,	<i>Gotham	City	Impostors</i>,	<i>Battle	Nations</i>,</text>
<text top="541" left="54" width="780" height="20" font="4"><i>Insanely	Twisted	Shadow	Planet</i>,	and	<i>StarCraft	II</i>:	<i>Heart	of	the	Swarm</i>.	Alan	is	currently	a</text>
<text top="567" left="54" width="773" height="20" font="2">senior	engine	programmer	at	Blizzard	Entertainment,	where	he	works	on	<i>StarCraft	II</i>	and</text>
<text top="593" left="54" width="178" height="20" font="4"><i>Heroes	of	the	Storm</i>.</text>
<text top="630" left="54" width="784" height="20" font="2">I’d	like	to	thank	Packt	Publishing	and	the	author	for	allowing	me	to	contribute	to	this	book</text>
<text top="656" left="54" width="768" height="20" font="2">and	to	help	budding	game	programmers	learn	the	same	way	I	did.	If	you	want	to	succeed</text>
<text top="682" left="54" width="759" height="20" font="2">as	a	game	programmer,	practice	implementing	everything	you	learn,	hang	out	with	like-</text>
<text top="708" left="54" width="696" height="20" font="2">minded	individuals,	who	want	to	achieve	the	same	things	you	do,	and	never	stop</text>
<text top="734" left="54" width="176" height="20" font="2">learning	new	things.</text>
</page>
<page number="25" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="26" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="369" height="39" font="0"><b>www.PacktPub.com</b></text>
</page>
<page number="27" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="5" size="15" family="Times" color="#000000"/>
	<fontspec id="6" size="15" family="Times" color="#0000ee"/>
<image top="407" left="54" width="281" height="84" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-27_1.jpg"/>
<text top="64" left="54" width="775" height="39" font="0"><b>Support	files,	eBooks,	discount	offers,	and</b></text>
<text top="116" left="54" width="95" height="39" font="0"><b>more</b></text>
<text top="172" left="54" width="571" height="20" font="2">For	support	files	and	downloads	related	to	your	book,	please	visit	</text>
<text top="172" left="625" width="175" height="20" font="1"><a href="http://www.PacktPub.com">www.PacktPub.com</a></text>
<text top="172" left="800" width="5" height="20" font="2"><a href="http://www.PacktPub.com">.</a></text>
<text top="209" left="54" width="754" height="20" font="2">Did	you	know	that	Packt	offers	eBook	versions	of	every	book	published,	with	PDF	and</text>
<text top="235" left="54" width="540" height="20" font="2">ePub	files	available?	You	can	upgrade	to	the	eBook	version	at<a href="http://www.PacktPub.com">	</a></text>
<text top="235" left="594" width="175" height="20" font="1"><a href="http://www.PacktPub.com">www.PacktPub.com</a></text>
<text top="235" left="769" width="60" height="20" font="2">	and	as</text>
<text top="260" left="54" width="776" height="20" font="2">a	print	book	customer,	you	are	entitled	to	a	discount	on	the	eBook	copy.	Get	in	touch	with</text>
<text top="286" left="54" width="46" height="20" font="2">us	at	</text>
<text top="291" left="100" width="10" height="14" font="5">&lt;</text>
<text top="291" left="110" width="207" height="14" font="6"><a href="mailto:service@packtpub.com">service@packtpub.com</a></text>
<text top="291" left="317" width="10" height="14" font="5">&gt;</text>
<text top="286" left="327" width="147" height="20" font="2">	for	more	details.</text>
<text top="323" left="54" width="27" height="20" font="2">At	</text>
<text top="323" left="81" width="175" height="20" font="1"><a href="http://www.PacktPub.com">www.PacktPub.com</a></text>
<text top="323" left="256" width="554" height="20" font="2"><a href="http://www.PacktPub.com">,</a>	you	can	also	read	a	collection	of	free	technical	articles,	sign	up</text>
<text top="349" left="54" width="766" height="20" font="2">for	a	range	of	free	newsletters	and	receive	exclusive	discounts	and	offers	on	Packt	books</text>
<text top="375" left="54" width="107" height="20" font="2">and	eBooks.</text>
<text top="561" left="54" width="489" height="20" font="1"><a href="https://www2.packtpub.com/books/subscription/packtlib">https://www2.packtpub.com/books/subscription/packtlib</a></text>
<text top="598" left="54" width="736" height="20" font="2">Do	you	need	instant	solutions	to	your	IT	questions?	PacktLib	is	Packt’s	online	digital</text>
<text top="623" left="54" width="718" height="20" font="2">book	library.	Here,	you	can	search,	access,	and	read	Packt’s	entire	library	of	books.</text>
</page>
<page number="28" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="7" size="33" family="Times" color="#000000"/>
<text top="61" left="54" width="244" height="32" font="7"><b>Why	subscribe?</b></text>
<text top="110" left="97" width="473" height="20" font="2">Fully	searchable	across	every	book	published	by	Packt</text>
<text top="136" left="97" width="389" height="20" font="2">Copy	and	paste,	print,	and	bookmark	content</text>
<text top="162" left="97" width="393" height="20" font="2">On	demand	and	accessible	via	a	web	browser</text>
</page>
<page number="29" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="569" height="32" font="7"><b>Free	access	for	Packt	account	holders</b></text>
<text top="110" left="54" width="320" height="20" font="2">If	you	have	an	account	with	Packt	at<a href="http://www.PacktPub.com">	</a></text>
<text top="110" left="374" width="175" height="20" font="1"><a href="http://www.PacktPub.com">www.PacktPub.com</a></text>
<text top="110" left="549" width="232" height="20" font="2"><a href="http://www.PacktPub.com">,</a>	you	can	use	this	to	access</text>
<text top="136" left="54" width="730" height="20" font="2">PacktLib	today	and	view	9	entirely	free	books.	Simply	use	your	login	credentials	for</text>
<text top="162" left="54" width="157" height="20" font="2">immediate	access.</text>
</page>
<page number="30" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="31" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="138" height="39" font="0"><b>Preface</b></text>
<text top="120" left="54" width="776" height="20" font="2">So,	you	want	to	program	your	own	games	using	Unreal	Engine	4	(UE4).	You	have	a	great</text>
<text top="146" left="54" width="239" height="20" font="2">number	of	reasons	to	do	so:</text>
<text top="183" left="97" width="727" height="20" font="2">UE4	is	powerful:	UE4	provides	some	of	the	most	state-of-the-art,	beautiful,	realistic</text>
<text top="209" left="97" width="539" height="20" font="2">lighting	and	physics	effects,	of	the	kind	used	by	AAA	Studios.</text>
<text top="235" left="97" width="675" height="20" font="2">UE4	is	device-agnostic:	Code	written	for	UE4	will	work	on	Windows	desktop</text>
<text top="260" left="97" width="721" height="20" font="2">machines,	Mac	desktop	machines,	Android	devices,	and	iOS	devices	(at	the	time	of</text>
<text top="286" left="97" width="612" height="20" font="2">writing	this	book—even	more	devices	may	be	supported	in	the	future).</text>
<text top="323" left="54" width="763" height="20" font="2">So,	you	can	use	UE4	to	write	the	main	parts	of	your	game	once,	and	after	that,	deploy	to</text>
<text top="349" left="54" width="750" height="20" font="2">iOS	and	Android	Marketplaces	without	a	hitch.	(Of	course,	there	will	be	a	few	hitches:</text>
<text top="375" left="54" width="650" height="20" font="2">iOS	and	Android	in	app	purchases	will	have	to	be	programmed	separately.)</text>
</page>
<page number="32" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="589" height="39" font="0"><b>What	is	a	game	engine	anyway?</b></text>
<text top="120" left="54" width="782" height="20" font="2">A	game	engine	is	analogous	to	a	car	engine:	the	game	engine	is	what	drives	the	game.	You</text>
<text top="146" left="54" width="756" height="20" font="2">will	tell	the	engine	what	you	want,	and	(using	C++	code	and	the	UE4	editor)	the	engine</text>
<text top="172" left="54" width="448" height="20" font="2">will	be	responsible	for	actually	making	that	happen.</text>
<text top="209" left="54" width="730" height="20" font="2">You	will	build	your	game	around	the	UE4	game	engine,	similar	to	how	the	body	and</text>
<text top="235" left="54" width="752" height="20" font="2">wheels	are	built	around	an	actual	car	engine.	When	you	ship	a	game	with	UE4,	you	are</text>
<text top="260" left="54" width="762" height="20" font="2">basically	customizing	the	UE4	engine	and	retrofitting	it	with	your	own	game’s	graphics,</text>
<text top="286" left="54" width="154" height="20" font="2">sounds,	and	code.</text>
</page>
<page number="33" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="34" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="553" height="39" font="0"><b>What	will	using	UE4	cost	me?</b></text>
<text top="120" left="54" width="436" height="20" font="2">The	answer,	in	short,	is	$19	and	5	percent	of	sales.</text>
<text top="157" left="54" width="199" height="20" font="2">“What?”	you	say.	$19?</text>
<text top="194" left="54" width="785" height="20" font="2">That’s	right.	For	only	$19,	you	get	full	access	to	a	world	class	AAA	Engine,	complete	with</text>
<text top="219" left="54" width="778" height="20" font="2">a	source.	This	is	a	great	bargain,	considering	the	fact	that	other	engines	can	cost	anywhere</text>
<text top="245" left="54" width="387" height="20" font="2">from	$500	to	$1,000	for	just	a	single	license.</text>
</page>
<page number="35" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="36" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="766" height="39" font="0"><b>Why	don’t	I	just	program	my	own	engine</b></text>
<text top="116" left="54" width="431" height="39" font="0"><b>and	save	the	5	percent?</b></text>
<text top="172" left="54" width="784" height="20" font="2">Take	it	from	me,	if	you	want	to	create	games	within	a	reasonable	time	frame	and	you	don’t</text>
<text top="198" left="54" width="778" height="20" font="2">have	a	large	team	of	dedicated	engine	programmers	to	help	you,	you’ll	want	to	focus	your</text>
<text top="224" left="54" width="320" height="20" font="2">efforts	on	what	you	sell	(your	game).</text>
<text top="260" left="54" width="764" height="20" font="2">Not	having	to	focus	on	programming	a	game	engine	gives	you	the	freedom	to	think	only</text>
<text top="286" left="54" width="772" height="20" font="2">about	how	to	make	the	actual	game.	Not	having	to	maintain	and	bug-fix	your	own	engine</text>
<text top="312" left="54" width="235" height="20" font="2">is	a	load	off	your	mind	too.</text>
</page>
<page number="37" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="38" position="absolute" top="0" left="0" height="1262" width="892">
<image top="256" left="54" width="756" height="574" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-38_1.jpg"/>
<text top="64" left="54" width="712" height="39" font="0"><b>A	game’s	overview	–	the	Play-Reward-</b></text>
<text top="116" left="54" width="233" height="39" font="0"><b>Growth	loop</b></text>
<text top="172" left="54" width="773" height="20" font="2">I	want	to	show	you	this	diagram	now	because	it	contains	a	core	concept	that	many	novice</text>
<text top="198" left="54" width="783" height="20" font="2">developers	might	miss	when	writing	their	first	games.	A	game	can	be	complete	with	sound</text>
<text top="224" left="54" width="703" height="20" font="2">effects,	graphics,	realistic	physics,	and	yet,	still	not	feel	like	a	game.	Why	is	that?</text>
<text top="899" left="54" width="773" height="20" font="2">Starting	at	the	top	of	the	loop,	Play	actions	committed	during	the	game	(such	as	defeating</text>
<text top="925" left="54" width="775" height="20" font="2">a	monster)	result	in	rewards	for	the	player	(such	as	gold	or	experience).	These	rewards,	in</text>
<text top="951" left="54" width="762" height="20" font="2">turn,	can	be	used	for	in-game	Growth	(such	as	stats	increases	or	new	worlds	to	explore).</text>
<text top="977" left="54" width="759" height="20" font="2">This	Growth	then	drives	the	gameplay	in	new	and	interesting	ways.	For	example,	a	new</text>
<text top="1003" left="54" width="766" height="20" font="2">weapon	can	change	the	basic	mechanics	of	fighting,	new	spells	let	you	take	on	groups	of</text>
<text top="1029" left="54" width="782" height="20" font="2">monsters	with	a	completely	different	approach,	or	new	modes	of	transportation	can	let	you</text>
<text top="1054" left="54" width="393" height="20" font="2">reach	areas	that	were	previously	inaccessible.</text>
<text top="1091" left="54" width="743" height="20" font="2">This	is	the	basic	core	loop	that	creates	interesting	gameplay.	The	key	is	that	Play	must</text>
<text top="1117" left="54" width="721" height="20" font="2">result	in	some	kind	of	Reward—think	of	glittering	gold	pieces	popping	out	of	nasty</text>
<text top="1143" left="54" width="703" height="20" font="2">baddies.	For	rewards	to	have	a	point,	it	must	result	in	some	kind	of	Growth	in	the</text>
<text top="1169" left="54" width="776" height="20" font="2">gameplay.	Think	about	how	many	new	locations	were	unlocked	with	the	hook	shot	in	<i>The</i></text>
</page>
<page number="39" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="8" size="22" family="Times" color="#000000"/>
<text top="57" left="54" width="146" height="20" font="4"><i>Legend	of	Zelda</i>.</text>
<text top="94" left="54" width="771" height="20" font="2">A	game	that	is	only	Play	(without	Rewards	or	Growth)	won’t	feel	like	a	game:	it	will	feel</text>
<text top="120" left="54" width="771" height="20" font="2">only	like	a	really	basic	prototype	of	a	game.	For	example,	imagine	a	flight	simulator	with</text>
<text top="146" left="54" width="741" height="20" font="2">just	an	open	world	and	no	goals	or	objectives	as	well	as	without	the	ability	to	upgrade</text>
<text top="172" left="54" width="478" height="20" font="2">your	plane	or	weapons.	It	wouldn’t	be	much	of	a	game.</text>
<text top="209" left="54" width="766" height="20" font="2">A	game	with	only	Play	and	Rewards	(but	no	Growth)	will	feel	primitive	and	simple.	The</text>
<text top="235" left="54" width="605" height="20" font="2">rewards	will	not	satisfy	the	player	if	they	cannot	be	used	for	anything.</text>
<text top="271" left="54" width="738" height="20" font="2">A	game	with	only	Play	and	Growth	(without	Rewards)	will	just	be	seen	as	a	mindless</text>
<text top="297" left="54" width="668" height="20" font="2">increasing	challenge,	without	giving	the	player	a	sense	of	gratification	for	his</text>
<text top="323" left="54" width="123" height="20" font="2">achievements.</text>
<text top="360" left="54" width="747" height="20" font="2">A	game	with	all	three	elements	will	keep	the	player	engaged	with	an	entertaining	Play.</text>
<text top="386" left="54" width="750" height="20" font="2">The	Play	has	a	rewarding	result	(loot	drops	and	story	progression),	which	results	in	the</text>
<text top="412" left="54" width="764" height="20" font="2">Growth	of	the	game	world.	Keeping	this	loop	in	mind	while	you	are	devising	your	game</text>
<text top="438" left="54" width="409" height="20" font="2">will	really	help	you	to	design	a	complete	game.</text>
<text top="476" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="514" left="54" width="756" height="20" font="2">A	prototype	is	the	proof	of	concept	of	a	game.	Say,	you	want	to	create	your	own	unique</text>
<text top="540" left="54" width="781" height="20" font="2">version	of	<i>Blackjack</i>.	The	first	thing	you	might	do	is	program	a	prototype	to	show	how	the</text>
<text top="566" left="54" width="180" height="20" font="2">game	will	be	played.</text>
</page>
<page number="40" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="202" height="32" font="7"><b>Monetization</b></text>
<text top="110" left="54" width="785" height="20" font="2">Something	you	need	to	think	about	early	in	your	game’s	development	is	your	monetization</text>
<text top="136" left="54" width="780" height="20" font="2">strategy.	How	will	your	game	make	money?	If	you	are	trying	to	start	a	company,	you	have</text>
<text top="162" left="54" width="543" height="20" font="2">to	think	of	what	will	be	your	sources	of	revenue	from	early	on.</text>
<text top="199" left="54" width="743" height="20" font="2">Are	you	going	to	try	to	make	money	from	the	purchase	price,	such	as	<i>Jamestown</i>,	<i>The</i></text>
<text top="225" left="54" width="715" height="20" font="4"><i>Banner	Saga</i>,	<i>Castle	Crashers</i>,	or	<i>Crypt	of	the	Necrodancer</i>?	Or,	will	you	focus	on</text>
<text top="251" left="54" width="733" height="20" font="2">distributing	a	free	game	with	in-app	purchases,	such	as	<i>Clash	of	Clans</i>,	<i>Candy	Crush</i></text>
<text top="277" left="54" width="222" height="20" font="4"><i>Saga</i>,	or	<i>Subway	Surfers</i>?</text>
<text top="313" left="54" width="746" height="20" font="2">A	class	of	games	for	mobile	devices	(for	example,	builder	games	on	iOS)	make	lots	of</text>
<text top="339" left="54" width="763" height="20" font="2">money	by	allowing	the	user	to	pay	in	order	to	skip	Play	and	jump	straight	to	the	rewards</text>
<text top="365" left="54" width="784" height="20" font="2">and	Growth	parts	of	the	loop.	The	pull	to	do	this	can	be	very	powerful;	many	people	spend</text>
<text top="391" left="54" width="323" height="20" font="2">hundreds	of	dollars	on	a	single	game.</text>
</page>
<page number="41" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="148" height="32" font="7"><b>Why	C++</b></text>
<text top="110" left="54" width="639" height="20" font="2">UE4	is	programmed	in	C++.	To	write	code	for	UE4,	you	must	know	C++.</text>
<text top="147" left="54" width="773" height="20" font="2">C++	is	a	common	choice	for	game	programmers	because	it	offers	very	good	performance</text>
<text top="173" left="54" width="750" height="20" font="2">combined	with	object-oriented	programming	features.	It’s	a	very	powerful	and	flexible</text>
<text top="199" left="54" width="83" height="20" font="2">language.</text>
</page>
<page number="42" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="43" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="411" height="39" font="0"><b>What	this	book	covers</b></text>
<text top="120" left="54" width="85" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#59">Chapter	1</a></text>
<text top="120" left="139" width="645" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#59">,</a>	<i>Coding	with	C++</i>,	talks	about	getting	up	and	running	with	your	first	C++</text>
<text top="146" left="54" width="79" height="20" font="2">program.</text>
<text top="183" left="54" width="85" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">Chapter	2</a></text>
<text top="183" left="139" width="657" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">,</a>	<i>Variables	and	Memory</i>,	talks	about	how	to	create,	read,	and	write	variables</text>
<text top="209" left="54" width="210" height="20" font="2">from	computer	memory.</text>
<text top="245" left="54" width="85" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#110">Chapter	3</a></text>
<text top="245" left="139" width="682" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#110">,</a>	<i>If,	Else,	and	Switch</i>,	talks	about	branching	the	code:	that	is,	allowing	different</text>
<text top="271" left="54" width="571" height="20" font="2">sections	of	the	code	to	execute,	depending	on	program	conditions.</text>
<text top="308" left="54" width="85" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#145">Chapter	4</a></text>
<text top="308" left="139" width="681" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#145">,</a>	<i>Looping</i>,	discusses	how	we	repeat	a	specific	section	of	code	as	many	times	as</text>
<text top="334" left="54" width="67" height="20" font="2">needed.</text>
<text top="371" left="54" width="85" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#164">Chapter	5</a></text>
<text top="371" left="139" width="671" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#164">,</a>	<i>Functions	and	Macros</i>,	talks	about	functions,	which	are	bundles	of	code	that</text>
<text top="397" left="54" width="470" height="20" font="2">can	get	called	any	number	of	times,	as	often	you	wish.</text>
<text top="433" left="54" width="85" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#207">Chapter	6</a></text>
<text top="433" left="139" width="700" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#207">,</a>	<i>Objects,	Classes,	and	Inheritance</i>,	talks	about	class	definitions	and	instantiating</text>
<text top="459" left="54" width="351" height="20" font="2">some	objects	based	on	a	class	definition.</text>
<text top="496" left="54" width="85" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#250">Chapter	7</a></text>
<text top="496" left="139" width="685" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#250">,</a>	<i>Dynamic	Memory	Allocation</i>,	discusses	heap-allocated	objects	as	well	as	low-</text>
<text top="522" left="54" width="252" height="20" font="2">level	C	and	C++	style	arrays.</text>
<text top="559" left="54" width="85" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#268">Chapter	8</a></text>
<text top="559" left="139" width="684" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#268">,</a>	<i>Actors	and	Pawns</i>,	is	the	first	chapter	where	we	actually	delve	into	UE4	code.</text>
<text top="585" left="54" width="573" height="20" font="2">We	begin	by	creating	a	game	world	to	put	actors	in,	and	derive	an	</text>
<text top="589" left="627" width="62" height="14" font="5">Avatar</text>
<text top="585" left="689" width="110" height="20" font="2">	class	from	a</text>
<text top="611" left="54" width="151" height="20" font="2">customized	actor.</text>
<text top="647" left="54" width="85" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#339">Chapter	9</a></text>
<text top="647" left="139" width="670" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#339">,</a>	<i>Templates	and	Commonly	Used	container-fluids</i>,	explores	UE4	and	the	C++	STL</text>
<text top="673" left="54" width="741" height="20" font="2">family	of	collections	of	data,	called	container-fluids.	Often,	a	programming	problem	can	be</text>
<text top="699" left="54" width="536" height="20" font="2">simplified	many	times	by	selecting	the	right	type	of	container-fluid.</text>
<text top="736" left="54" width="95" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#367">Chapter	10</a></text>
<text top="736" left="149" width="649" height="20" font="2">,	<i>Inventory	System	and	Pickup	Items</i>,	discusses	the	creation	of	an	inventory</text>
<text top="762" left="54" width="387" height="20" font="2">system	with	the	ability	to	pick	up	new	items.</text>
<text top="798" left="54" width="95" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#398">Chapter	11</a></text>
<text top="798" left="149" width="654" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#398">,</a>	<i>Monsters</i>,	teaches	how	to	create	monsters	that	give	chase	to	the	player	and</text>
<text top="824" left="54" width="199" height="20" font="2">attack	it	with	weapons.</text>
<text top="861" left="54" width="95" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#454">Chapter	12</a></text>
<text top="861" left="149" width="544" height="20" font="2">,	<i>Spell	Book</i>,	teaches	how	to	create	and	cast	spells	in	our	game.</text>
</page>
<page number="44" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="45" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="523" height="39" font="0"><b>What	you	need	for	this	book</b></text>
<text top="120" left="54" width="684" height="20" font="2">To	work	with	this	text,	you	will	need	two	programs.	The	first	is	your	integrated</text>
<text top="146" left="54" width="771" height="20" font="2">development	environment,	or	IDE.	The	second	piece	of	software	is,	of	course,	the	Unreal</text>
<text top="172" left="54" width="115" height="20" font="2">Engine	itself.</text>
<text top="209" left="54" width="746" height="20" font="2">If	you	are	using	Microsoft	Windows,	then	you	will	need	Microsoft	Visual	Studio	2013</text>
<text top="235" left="54" width="776" height="20" font="2">Express	Edition	for	Windows	Desktop.	If	you	are	using	a	Mac,	then	you	will	need	Xcode.</text>
<text top="260" left="54" width="350" height="20" font="2">Unreal	Engine	can	be	downloaded	from<a href="https://www.unrealengine.com/">	</a></text>
<text top="260" left="404" width="271" height="20" font="1"><a href="https://www.unrealengine.com/">https://www.unrealengine.com/</a></text>
<text top="260" left="675" width="5" height="20" font="2"><a href="https://www.unrealengine.com/">.</a></text>
</page>
<page number="46" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="47" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="374" height="39" font="0"><b>Who	this	book	is	for</b></text>
<text top="120" left="54" width="777" height="20" font="2">This	book	is	for	anyone	who	wants	to	write	an	Unreal	Engine	application.	The	text	begins</text>
<text top="146" left="54" width="753" height="20" font="2">by	telling	you	how	to	compile	and	run	your	first	C++	application,	followed	by	chapters</text>
<text top="172" left="54" width="739" height="20" font="2">that	describe	the	rules	of	the	C++	programming	language.	After	the	introductory	C++</text>
<text top="198" left="54" width="578" height="20" font="2">chapters,	you	can	start	to	build	your	own	game	application	in	C++.</text>
</page>
<page number="48" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="49" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="230" height="39" font="0"><b>Conventions</b></text>
<text top="120" left="54" width="745" height="20" font="2">In	this	book,	you	will	find	a	number	of	styles	of	text	that	distinguish	between	different</text>
<text top="146" left="54" width="770" height="20" font="2">kinds	of	information.	Here	are	some	examples	of	these	styles,	and	an	explanation	of	their</text>
<text top="172" left="54" width="80" height="20" font="2">meaning.</text>
<text top="209" left="54" width="716" height="20" font="2">Code	words	in	text,	database	table	names,	folder	names,	filenames,	file	extensions,</text>
<text top="235" left="54" width="745" height="20" font="2">pathnames,	dummy	URLs,	user	input,	and	Twitter	handles	are	shown	as	follows:	“The</text>
<text top="265" left="54" width="124" height="14" font="5">variableType</text>
<text top="260" left="178" width="645" height="20" font="2">	is	going	to	tell	you	what	type	of	data	we	are	going	to	store	in	our	variable.</text>
<text top="286" left="54" width="39" height="20" font="2">The	</text>
<text top="291" left="93" width="124" height="14" font="5">variableName</text>
<text top="286" left="217" width="547" height="20" font="2">	is	the	symbol	we’ll	use	to	read	or	write	that	piece	of	memory”.</text>
<text top="323" left="54" width="286" height="20" font="2">A	block	of	code	is	set	as	follows:</text>
<text top="366" left="54" width="135" height="14" font="5">struct	Player</text>
<text top="387" left="54" width="10" height="14" font="5">{</text>
<text top="407" left="54" width="145" height="14" font="5">		string	name;</text>
<text top="428" left="54" width="93" height="14" font="5">		int	hp;</text>
<text top="449" left="54" width="621" height="14" font="5">		//	A	member	function	that	reduces	player	hp	by	some	amount</text>
<text top="469" left="54" width="300" height="14" font="5">		void	damage(	int	amount	)	{</text>
<text top="490" left="54" width="176" height="14" font="5">				hp	-=	amount;</text>
<text top="510" left="54" width="31" height="14" font="5">		}</text>
<text top="531" left="54" width="311" height="14" font="5">		void	recover(	int	amount	)	{</text>
<text top="551" left="54" width="176" height="14" font="5">				hp	+=	amount;</text>
<text top="572" left="54" width="31" height="14" font="5">		}</text>
<text top="592" left="54" width="21" height="14" font="5">};</text>
<text top="624" left="54" width="733" height="19" font="3"><b>New	terms</b>	and	<b>important	words</b>	are	shown	in	bold.	Text	that	appears	on	the	screen</text>
<text top="649" left="54" width="523" height="20" font="2">appears	like	this:	From	the	<b>File</b>	menu,	select	<b>New	Project…</b></text>
<text top="688" left="54" width="50" height="22" font="8"><b>Note</b></text>
<text top="726" left="54" width="724" height="20" font="2">Extra	information	that	is	relevant,	but	kind	of	a	side	note,	appears	in	boxes	like	this.</text>
<text top="764" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="803" left="54" width="270" height="20" font="2">Tips	and	tricks	appear	like	this.</text>
</page>
<page number="50" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="51" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="310" height="39" font="0"><b>Reader	feedback</b></text>
<text top="120" left="54" width="743" height="20" font="2">Feedback	from	our	readers	is	always	welcome.	Let	us	know	what	you	think	about	this</text>
<text top="146" left="54" width="721" height="20" font="2">book—what	you	liked	or	may	have	disliked.	Reader	feedback	is	important	for	us	to</text>
<text top="172" left="54" width="418" height="20" font="2">develop	titles	that	you	really	get	the	most	out	of.</text>
<text top="209" left="54" width="473" height="20" font="2">To	send	us	general	feedback,	simply	send	an	e-mail	to	</text>
<text top="213" left="527" width="10" height="14" font="5"><a href="mailto:feedback@packtpub.com">&lt;</a></text>
<text top="213" left="537" width="218" height="14" font="6"><a href="mailto:feedback@packtpub.com">feedback@packtpub.com</a></text>
<text top="213" left="755" width="10" height="14" font="5"><a href="mailto:feedback@packtpub.com">&gt;</a></text>
<text top="209" left="765" width="42" height="20" font="2">,	and</text>
<text top="235" left="54" width="472" height="20" font="2">mention	the	book	title	via	the	subject	of	your	message.</text>
<text top="271" left="54" width="737" height="20" font="2">If	there	is	a	topic	that	you	have	expertise	in	and	you	are	interested	in	either	writing	or</text>
<text top="297" left="54" width="410" height="20" font="2">contributing	to	a	book,	see	our	author	guide	on<a href="http://www.packtpub.com/authors">	</a></text>
<text top="297" left="464" width="242" height="20" font="1"><a href="http://www.packtpub.com/authors">www.packtpub.com/authors</a></text>
<text top="297" left="706" width="5" height="20" font="2">.</text>
</page>
<page number="52" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="53" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="336" height="39" font="0"><b>Customer	support</b></text>
<text top="120" left="54" width="751" height="20" font="2">Now	that	you	are	the	proud	owner	of	a	Packt	book,	we	have	a	number	of	things	to	help</text>
<text top="146" left="54" width="345" height="20" font="2">you	to	get	the	most	from	your	purchase.</text>
</page>
<page number="54" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="472" height="32" font="7"><b>Downloading	the	example	code</b></text>
<text top="110" left="54" width="752" height="20" font="2">You	can	download	the	example	code	files	for	all	Packt	books	you	have	purchased	from</text>
<text top="136" left="54" width="138" height="20" font="2">your	account	at<a href="http://www.packtpub.com">	</a></text>
<text top="136" left="192" width="224" height="20" font="1"><a href="http://www.packtpub.com">http://www.packtpub.com</a></text>
<text top="136" left="416" width="411" height="20" font="2">.	If	you	purchased	this	book	elsewhere,	you	can</text>
<text top="162" left="54" width="43" height="20" font="2">visit	</text>
<text top="162" left="97" width="295" height="20" font="1"><a href="http://www.packtpub.com/support">http://www.packtpub.com/support</a></text>
<text top="162" left="391" width="424" height="20" font="2">	and	register	to	have	the	files	e-mailed	directly	to</text>
<text top="188" left="54" width="38" height="20" font="2">you.</text>
</page>
<page number="55" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="644" height="32" font="7"><b>Downloading	the	color	images	of	this	book</b></text>
<text top="110" left="54" width="749" height="20" font="2">We	also	provide	you	with	a	PDF	file	that	has	color	images	of	the	screenshots/diagrams</text>
<text top="136" left="54" width="742" height="20" font="2">used	in	this	book.	The	color	images	will	help	you	better	understand	the	changes	in	the</text>
<text top="162" left="54" width="345" height="20" font="2">output.	You	can	download	this	file	from</text>
<text top="188" left="54" width="740" height="20" font="1"><a href="https://www.packtpub.com/sites/default/files/downloads/6572OT_ColoredImages.pdf">https://www.packtpub.com/sites/default/files/downloads/6572OT_ColoredImages.pdf</a></text>
<text top="188" left="794" width="5" height="20" font="2">.</text>
</page>
<page number="56" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="103" height="32" font="7"><b>Errata</b></text>
<text top="110" left="54" width="743" height="20" font="2">Although	we	have	taken	every	care	to	ensure	the	accuracy	of	our	content,	mistakes	do</text>
<text top="136" left="54" width="740" height="20" font="2">happen.	If	you	find	a	mistake	in	one	of	our	books—maybe	a	mistake	in	the	text	or	the</text>
<text top="162" left="54" width="739" height="20" font="2">code—we	would	be	grateful	if	you	would	report	this	to	us.	By	doing	so,	you	can	save</text>
<text top="188" left="54" width="748" height="20" font="2">other	readers	from	frustration	and	help	us	improve	subsequent	versions	of	this	book.	If</text>
<text top="214" left="54" width="436" height="20" font="2"><a href="http://www.packtpub.com/submit-errata">you	find	any	errata,	please	report	them	by	visiting	</a></text>
<text top="214" left="490" width="296" height="20" font="1"><a href="http://www.packtpub.com/submit-errata">http://www.packtpub.com/submit-</a></text>
<text top="240" left="54" width="49" height="20" font="1"><a href="http://www.packtpub.com/submit-errata">errata</a></text>
<text top="240" left="103" width="730" height="20" font="2"><a href="http://www.packtpub.com/submit-errata">,	selecting	your	book,	clicking	on	the	<b>errata</b>	<b>submission</b>	<b>form</b>	link,	and	enterin</a>g	the</text>
<text top="266" left="54" width="774" height="20" font="2">details	of	your	errata.	Once	your	errata	are	verified,	your	submission	will	be	accepted	and</text>
<text top="292" left="54" width="782" height="20" font="2">the	errata	will	be	uploaded	on	our	website,	or	added	to	any	list	of	existing	errata,	under	the</text>
<text top="318" left="54" width="765" height="20" font="2">Errata	section	of	that	title.	Any	existing	errata	can	be	viewed	by	selecting	your	title	from</text>
<text top="344" left="54" width="295" height="20" font="1"><a href="http://www.packtpub.com/support">http://www.packtpub.com/support</a></text>
<text top="344" left="349" width="5" height="20" font="2">.</text>
</page>
<page number="57" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="99" height="32" font="7"><b>Piracy</b></text>
<text top="110" left="54" width="750" height="20" font="2">Piracy	of	copyright	material	on	the	Internet	is	an	ongoing	problem	across	all	media.	At</text>
<text top="136" left="54" width="747" height="20" font="2">Packt,	we	take	the	protection	of	our	copyright	and	licenses	very	seriously.	If	you	come</text>
<text top="162" left="54" width="779" height="20" font="2">across	any	illegal	copies	of	our	works,	in	any	form,	on	the	Internet,	please	provide	us	with</text>
<text top="188" left="54" width="712" height="20" font="2">the	location	address	or	website	name	immediately	so	that	we	can	pursue	a	remedy.</text>
<text top="225" left="54" width="174" height="20" font="2">Please	contact	us	at	</text>
<text top="229" left="228" width="10" height="14" font="5"><a href="mailto:copyright@packtpub.com">&lt;</a></text>
<text top="229" left="238" width="228" height="14" font="6"><a href="mailto:copyright@packtpub.com">copyright@packtpub.com</a></text>
<text top="229" left="466" width="10" height="14" font="5">&gt;</text>
<text top="225" left="476" width="306" height="20" font="2">	with	a	link	to	the	suspected	pirated</text>
<text top="251" left="54" width="76" height="20" font="2">material.</text>
<text top="288" left="54" width="754" height="20" font="2">We	appreciate	your	help	in	protecting	our	authors,	and	our	ability	to	bring	you	valuable</text>
<text top="313" left="54" width="69" height="20" font="2">content.</text>
</page>
<page number="58" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="150" height="32" font="7"><b>Questions</b></text>
<text top="110" left="54" width="189" height="20" font="2">You	can	contact	us	at	</text>
<text top="115" left="243" width="10" height="14" font="5"><a href="mailto:questions@packtpub.com">&lt;</a></text>
<text top="115" left="253" width="228" height="14" font="6"><a href="mailto:questions@packtpub.com">questions@packtpub.com</a></text>
<text top="115" left="481" width="10" height="14" font="5">&gt;</text>
<text top="110" left="492" width="325" height="20" font="2">	if	you	are	having	a	problem	with	any</text>
<text top="136" left="54" width="486" height="20" font="2">aspect	of	the	book,	and	we	will	do	our	best	to	address	it.</text>
</page>
<page number="59" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="60" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="525" height="39" font="0"><b>Chapter	1.	Coding	with	C++</b></text>
<text top="120" left="54" width="484" height="20" font="2">You’re	a	first-time	programmer.	You	have	a	lot	to	learn!</text>
<text top="157" left="54" width="653" height="20" font="2">Academics	often	describe	programming	concepts	in	theory	but	like	to	leave</text>
<text top="183" left="54" width="769" height="20" font="2">implementation	to	someone	else,	preferably	someone	from	the	industry.	We	don’t	do	that</text>
<text top="209" left="54" width="696" height="20" font="2">in	this	book—in	this	book,	we	will	describe	the	theory	behind	C++	concepts	and</text>
<text top="235" left="54" width="293" height="20" font="2">implement	our	own	game	as	well.</text>
<text top="271" left="54" width="779" height="20" font="2">The	first	thing	I	will	recommend	is	that	you	do	the	exercises.	You	cannot	learn	to	program</text>
<text top="297" left="54" width="600" height="20" font="2">simply	by	reading.	You	must	work	with	the	theory	with	the	exercises.</text>
<text top="334" left="54" width="750" height="20" font="2">We	are	going	to	get	started	by	programming	very	simple	programs	in	C++.	I	know	that</text>
<text top="360" left="54" width="770" height="20" font="2">you	want	to	start	playing	your	finished	game	right	now.	However,	you	have	to	start	at	the</text>
<text top="386" left="54" width="543" height="20" font="2">beginning	to	get	to	that	end	(if	you	really	want	to,	skip	over	to	</text>
<text top="386" left="597" width="95" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#454">Chapter	12</a></text>
<text top="386" left="692" width="132" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#454">,</a>	<i>Spell	Book,</i>	or</text>
<text top="412" left="54" width="548" height="20" font="2">open	some	of	the	samples	to	get	a	feel	for	where	we	are	going).</text>
<text top="448" left="54" width="435" height="20" font="2">In	this	chapter,	we	will	cover	the	following	topics:</text>
<text top="485" left="97" width="467" height="20" font="2">Setting	up	a	new	project	(in	Visual	Studio	and	Xcode)</text>
<text top="511" left="97" width="192" height="20" font="2">Your	first	C++	project</text>
<text top="537" left="97" width="183" height="20" font="2">How	to	handle	errors</text>
<text top="563" left="97" width="295" height="20" font="2">What	are	building	and	compiling?</text>
</page>
<page number="61" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="405" height="39" font="0"><b>Setting	up	our	project</b></text>
<text top="120" left="54" width="760" height="20" font="2">Our	first	C++	program	will	be	written	outside	of	UE4.	To	start	with,	I	will	provide	steps</text>
<text top="146" left="54" width="762" height="20" font="2">for	both	Xcode	and	Visual	Studio	2013,	but	after	this	chapter,	I	will	try	to	talk	about	just</text>
<text top="172" left="54" width="768" height="20" font="2">the	C++	code	without	reference	to	whether	you’re	using	Microsoft	Windows	or	Mac	OS.</text>
</page>
<page number="62" position="absolute" top="0" left="0" height="1262" width="892">
<image top="360" left="54" width="162" height="162" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-62_1.jpg"/>
<image top="789" left="97" width="408" height="302" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-62_2.jpg"/>
<text top="61" left="54" width="621" height="32" font="7"><b>Using	Microsoft	Visual	C++	on	Windows</b></text>
<text top="110" left="54" width="727" height="20" font="2">In	this	section,	we	will	install	a	code	editor	for	Windows,	Microsoft’s	Visual	Studio.</text>
<text top="136" left="54" width="464" height="20" font="2">Please	skip	to	the	next	section	if	you	are	using	a	Mac.</text>
<text top="174" left="54" width="50" height="22" font="8"><b>Note</b></text>
<text top="213" left="54" width="752" height="20" font="2">The	Express	edition	of	Visual	Studio	is	the	free	version	of	Visual	Studio	that	Microsoft</text>
<text top="239" left="54" width="282" height="20" font="2"><a href="http://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx">provides	on	their	website.	Go	to	</a></text>
<text top="239" left="336" width="447" height="20" font="1"><a href="http://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx">http://www.visualstudio.com/en-us/products/visual-</a></text>
<text top="265" left="54" width="196" height="20" font="1"><a href="http://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx">studio-express-vs.aspx</a></text>
<text top="265" left="250" width="273" height="20" font="2"><a href="http://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx">	to	start	the	installation	process.</a></text>
<text top="302" left="54" width="745" height="20" font="2">To	start,	you	have	to	download	and	install	<b>Microsoft	Visual	Studio	Express	2013	for</b></text>
<text top="328" left="54" width="553" height="19" font="3"><b>Windows	Desktop</b>.	This	is	how	the	icon	for	the	software	looks:</text>
<text top="592" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="631" left="54" width="757" height="20" font="2">Do	not	install	<b>Express	2013	for	Windows</b>.	This	is	a	different	package	and	it	is	used	for</text>
<text top="657" left="54" width="387" height="20" font="2">different	things	than	what	we	are	doing	here.</text>
<text top="694" left="54" width="775" height="20" font="2">Once	you	have	Visual	Studio	2013	Express	installed,	open	it.	Work	through	the	following</text>
<text top="720" left="54" width="538" height="20" font="2">steps	to	get	to	a	point	where	you	can	actually	type	in	the	code:</text>
<text top="756" left="69" width="736" height="20" font="2">1.	 From	the	<b>File</b>	menu,	select	<b>New	Project…</b>,	as	shown	in	the	following	screenshot:</text>
<text top="1160" left="69" width="320" height="20" font="2">2.	 You	will	get	the	following	dialog:</text>
</page>
<page number="63" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="742" height="513" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-63_1.jpg"/>
<text top="637" left="97" width="37" height="22" font="8"><b>Tip</b></text>
<text top="675" left="97" width="726" height="20" font="2">Note	that	there	is	a	small	box	at	the	bottom	with	the	text	<b>Solution	name</b>.	In	general,</text>
<text top="702" left="97" width="689" height="19" font="3"><b>Visual	Studio	Solutions</b>	might	contain	many	projects.	However,	this	book	only</text>
<text top="727" left="97" width="716" height="20" font="2">works	with	a	single	project,	but	at	times,	you	might	find	it	useful	to	integrate	many</text>
<text top="753" left="97" width="269" height="20" font="2">projects	into	the	same	solution.</text>
<text top="790" left="69" width="482" height="20" font="2">3.	 There	are	five	things	to	take	care	of	now,	as	follows:</text>
<text top="827" left="112" width="450" height="20" font="2">1.	 Select	<b>Visual	C++</b>	from	the	left-hand	side	panel.</text>
<text top="852" left="112" width="611" height="20" font="2">2.	 Select	<b>Win32	Console	Application</b>	from	the	right-hand	side	panel.</text>
<text top="878" left="112" width="231" height="20" font="2">3.	 Name	your	app	(I	used	</text>
<text top="883" left="344" width="104" height="14" font="5">MyFirstApp</text>
<text top="878" left="447" width="13" height="20" font="2">).</text>
<text top="904" left="112" width="315" height="20" font="2">4.	 Select	a	folder	to	save	your	code.</text>
<text top="930" left="112" width="239" height="20" font="2">5.	 Click	on	the	<b>OK</b>	button.</text>
<text top="989" left="69" width="738" height="20" font="2">4.	 After	this	an	<b>Application	Wizard</b>	dialog	box	opens	up,	as	shown	in	the	following</text>
<text top="1015" left="97" width="97" height="20" font="2">screenshot:</text>
</page>
<page number="64" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="742" height="573" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-64_1.jpg"/>
<text top="695" left="69" width="591" height="20" font="2">5.	 We	have	four	things	to	take	care	of	in	this	dialog	box,	as	follows:</text>
<text top="731" left="112" width="529" height="20" font="2">1.	 Click	on	<b>Application	Settings</b>	in	the	left-hand	side	panel.</text>
<text top="757" left="112" width="413" height="20" font="2">2.	 Ensure	that	<b>Console	application</b>	is	selected.</text>
<text top="783" left="112" width="225" height="20" font="2">3.	 Select	<b>Empty	project</b>.</text>
<text top="809" left="112" width="170" height="20" font="2">4.	 Click	on	<b>Finish</b>.</text>
<text top="889" left="54" width="764" height="20" font="2">Now	you	are	in	the	Visual	Studio	2013	environment.	This	is	the	place	where	you	will	do</text>
<text top="915" left="54" width="204" height="20" font="2">all	your	work	and	code.</text>
<text top="952" left="54" width="742" height="20" font="2">However,	we	need	a	file	to	write	our	code	into.	So,	we	will	add	a	C++	code	file	to	our</text>
<text top="978" left="54" width="396" height="20" font="2">project,	as	shown	in	the	following	screenshot:</text>
</page>
<page number="65" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="785" height="459" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-65_1.jpg"/>
<image top="614" left="54" width="785" height="443" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-65_2.jpg"/>
<text top="581" left="54" width="597" height="20" font="2">Add	your	new	source	code	file	as	shown	in	the	following	screenshot:</text>
<text top="1125" left="54" width="160" height="20" font="2">You	will	now	edit	</text>
<text top="1129" left="214" width="104" height="14" font="5">Source.cpp</text>
<text top="1125" left="317" width="489" height="20" font="2">.	Skip	to	the	Your	First	C++	Program	section	and	type	in</text>
<text top="1151" left="54" width="91" height="20" font="2">your	code.</text>
</page>
<page number="66" position="absolute" top="0" left="0" height="1262" width="892">
<image top="231" left="54" width="266" height="148" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-66_1.jpg"/>
<image top="533" left="97" width="584" height="596" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-66_2.jpg"/>
<text top="61" left="54" width="350" height="32" font="7"><b>Using	XCode	on	a	Mac</b></text>
<text top="110" left="54" width="761" height="20" font="2">In	this	section,	we	will	talk	about	how	to	install	Xcode	on	a	Mac.	Please	skip	to	the	next</text>
<text top="136" left="54" width="294" height="20" font="2">section	if	you	are	using	Windows.</text>
<text top="173" left="54" width="754" height="20" font="2">Xcode	is	available	on	all	Mac	machines.	You	can	get	Xcode	using	the	Apple	App	Store</text>
<text top="199" left="54" width="219" height="20" font="2">(it’s	free),	as	shown	here:</text>
<text top="448" left="69" width="729" height="20" font="2">1.	 Once	you	have	Xcode	installed,	open	it.	Then,	navigate	to	<b>File</b>	|	<b>New</b>	|	<b>Project…</b></text>
<text top="474" left="97" width="688" height="20" font="2">from	the	system’s	menu	bar	at	the	top	of	your	screen,	as	shown	in	the	following</text>
<text top="500" left="97" width="97" height="20" font="2">screenshot:</text>
</page>
<page number="67" position="absolute" top="0" left="0" height="1262" width="892">
<image top="142" left="97" width="742" height="499" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-67_1.jpg"/>
<text top="57" left="69" width="738" height="20" font="2">2.	 In	the	New	Project	dialog,	select	<b>Application</b>	under	<b>OS	X</b>	on	the	left-hand	side	of</text>
<text top="83" left="97" width="700" height="20" font="2">the	screen,	and	select	<b>Command	Line	Tool</b>	from	the	right-hand	side	pane.	Then,</text>
<text top="109" left="97" width="123" height="20" font="2">click	on	<b>Next</b>:</text>
<text top="710" left="97" width="50" height="22" font="8"><b>Note</b></text>
<text top="749" left="97" width="701" height="20" font="2">You	might	be	tempted	to	click	on	the	<b>SpriteKit	Game</b>	icon,	but	don’t	click	on	it.</text>
<text top="786" left="69" width="751" height="20" font="2">3.	 In	the	next	dialog,	name	your	project.	Be	sure	to	fill	in	all	the	fields	or	Xcode	won’t</text>
<text top="811" left="97" width="736" height="20" font="2">let	you	proceed.	Make	sure	that	the	project’s	<b>Type</b>	is	set	to	<b>C++</b>	and	then	click	on	the</text>
<text top="838" left="97" width="243" height="19" font="3"><b>Next</b>	button,	as	shown	here:</text>
</page>
<page number="68" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="742" height="500" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-68_1.jpg"/>
<text top="622" left="69" width="765" height="20" font="2">4.	 The	next	popup	will	ask	you	to	choose	a	location	in	order	to	save	your	project.	Pick	a</text>
<text top="648" left="97" width="724" height="20" font="2">spot	on	your	hard	drive	and	save	it	there.	Xcode,	by	default,	creates	a	Git	repository</text>
<text top="674" left="97" width="701" height="20" font="2">for	every	project	you	create.	You	can	uncheck	<b>Create	git	repository</b>	—we	won’t</text>
<text top="700" left="97" width="556" height="20" font="2">cover	Git	in	this	chapter—as	shown	in	the	following	screenshot:</text>
</page>
<page number="69" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="681" height="522" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-69_1.jpg"/>
<text top="667" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="706" left="54" width="765" height="20" font="2">Git	is	a	<b>Version	control	system</b>.	This	basically	means	that	Git	keeps	the	snapshots	of	all</text>
<text top="731" left="54" width="758" height="20" font="2">the	code	in	your	project	every	so	often	(every	time	you	<i>commit</i>	to	the	repository).	Other</text>
<text top="757" left="54" width="677" height="20" font="2">popular	<b>source	control	management</b>	tools	(<b>scm</b>)	are	Mercurial,	Perforce,	and</text>
<text top="783" left="54" width="775" height="20" font="2">Subversion.	When	multiple	people	are	collaborating	on	the	same	project,	the	scm	tool	has</text>
<text top="809" left="54" width="771" height="20" font="2">the	ability	to	automatically	merge	and	copy	other	people’s	changes	from	the	repository	to</text>
<text top="835" left="54" width="182" height="20" font="2">your	local	code	base.</text>
<text top="872" left="54" width="771" height="20" font="2">Okay!	You	are	all	set	up.	Click	on	the	<b>main.cpp</b>	file	in	the	left-hand	side	panel	of	Xcode.</text>
<text top="898" left="54" width="783" height="20" font="2">If	the	file	doesn’t	appear,	ensure	that	the	folder	icon	at	the	top	of	the	left-hand	side	panel	is</text>
<text top="924" left="54" width="446" height="20" font="2">selected	first,	as	shown	in	the	following	screenshot:</text>
</page>
<page number="70" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="785" height="295" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-70_1.jpg"/>
</page>
<page number="71" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="72" position="absolute" top="0" left="0" height="1262" width="892">
<image top="1069" left="640" width="40" height="37" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-72_1.jpg"/>
<text top="64" left="54" width="610" height="39" font="0"><b>Creating	your	first	C++	program</b></text>
<text top="120" left="54" width="755" height="20" font="2">We	are	now	going	to	write	some	C++	source	code.	There	is	a	very	good	reason	why	we</text>
<text top="146" left="54" width="704" height="20" font="2">are	calling	it	the	source	code:	it	is	the	source	from	which	we	will	build	our	binary</text>
<text top="172" left="54" width="753" height="20" font="2">executable	code.	The	same	C++	source	code	can	be	built	on	different	platforms	such	as</text>
<text top="198" left="54" width="782" height="20" font="2">Mac,	Windows,	and	iOS,	and	in	theory,	an	executable	code	doing	the	exact	same	things	on</text>
<text top="224" left="54" width="334" height="20" font="2">each	respective	platform	should	result.</text>
<text top="260" left="54" width="773" height="20" font="2">In	the	not-so-distant	past,	before	the	introduction	of	C	and	C++,	programmers	wrote	code</text>
<text top="286" left="54" width="777" height="20" font="2">for	each	specific	machine	they	were	targeting	individually.	They	wrote	code	in	a	language</text>
<text top="312" left="54" width="769" height="20" font="2">called	assembly	language.	But	now,	with	C	and	C++	available,	a	programmer	only	has	to</text>
<text top="338" left="54" width="731" height="20" font="2">write	code	once,	and	it	can	be	deployed	to	a	number	of	different	machines	simply	by</text>
<text top="364" left="54" width="443" height="20" font="2">sending	the	same	code	through	different	compilers.</text>
<text top="402" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="441" left="54" width="780" height="20" font="2">In	practice,	there	are	some	differences	between	Visual	Studio’s	flavor	of	C++	and	Xcode’s</text>
<text top="467" left="54" width="756" height="20" font="2">flavor	of	C++,	but	these	differences	mostly	come	up	when	working	with	advanced	C++</text>
<text top="493" left="54" width="243" height="20" font="2">concepts,	such	as	templates.</text>
<text top="529" left="54" width="750" height="20" font="2">One	of	the	main	reasons	why	using	UE4	is	so	helpful	is	that	UE4	will	erase	a	lot	of	the</text>
<text top="555" left="54" width="762" height="20" font="2">differences	between	Windows	and	Mac.	The	UE4	team	did	a	lot	of	magic	in	order	to	get</text>
<text top="581" left="54" width="438" height="20" font="2">the	same	code	to	work	on	both	Windows	and	Mac.</text>
<text top="619" left="54" width="50" height="22" font="8"><b>Note</b></text>
<text top="658" left="54" width="147" height="19" font="3"><b>A	real-world	tip</b></text>
<text top="695" left="54" width="701" height="20" font="2">It	is	important	for	the	code	to	run	in	the	same	way	on	all	machines,	especially	for</text>
<text top="721" left="54" width="718" height="20" font="2">networked	games	or	games	that	allow	things	such	as	shareable	replays.	This	can	be</text>
<text top="747" left="54" width="714" height="20" font="2">achieved	using	standards.	For	example,	the	IEEE	floating-point	standard	is	used	to</text>
<text top="773" left="54" width="781" height="20" font="2">implement	decimal	math	on	all	C++	compilers.	This	means	that	the	result	of	computations</text>
<text top="798" left="54" width="68" height="20" font="2">such	as	</text>
<text top="803" left="122" width="135" height="14" font="5">200	*	3.14159</text>
<text top="798" left="257" width="348" height="20" font="2">	should	be	the	same	on	all	the	machines.</text>
<text top="835" left="54" width="564" height="20" font="2">Write	the	following	code	in	Microsoft	Visual	Studio	or	in	Xcode:</text>
<text top="878" left="54" width="570" height="14" font="5">#include	&lt;iostream&gt;		//	Import	the	input-output	library</text>
<text top="899" left="54" width="487" height="14" font="5">using	namespace	std;	//	allows	us	to	write	cout</text>
<text top="920" left="54" width="456" height="14" font="5">																					//	instead	of	std::cout</text>
<text top="940" left="54" width="104" height="14" font="5">int	main()</text>
<text top="961" left="54" width="10" height="14" font="5">{</text>
<text top="981" left="54" width="342" height="14" font="5">		cout	&lt;&lt;	&#34;Hello,	world&#34;	&lt;&lt;	endl;</text>
<text top="1002" left="54" width="487" height="14" font="5">		cout	&lt;&lt;	&#34;I	am	now	a	C++	programmer.&#34;	&lt;&lt;	endl;</text>
<text top="1022" left="54" width="508" height="14" font="5">		return	0;						//	&#34;return&#34;	to	the	operating	sys</text>
<text top="1043" left="54" width="10" height="14" font="5">}</text>
<text top="1091" left="54" width="586" height="20" font="2">Press	<i>Ctrl	</i>+	<i>F5</i>	to	run	the	preceding	code	in	Visual	Studio,	or	press	</text>
<text top="1091" left="680" width="115" height="20" font="2">	+	<i>R</i>	to	run	in</text>
<text top="1117" left="54" width="62" height="20" font="2">Xcode.</text>
<text top="1154" left="54" width="654" height="20" font="2">The	first	time	you	press	<i>Ctrl	</i>+	<i>F5</i>	in	Visual	Studio,	you	will	see	this	dialog:</text>
</page>
<page number="73" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="343" height="313" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-73_1.jpg"/>
<text top="435" left="54" width="776" height="20" font="2">Select	<b>Yes</b>	and	<b>Do	not	show	this	dialog	again</b>—trust	me,	this	will	avoid	future	problems.</text>
<text top="472" left="54" width="695" height="20" font="2">The	first	thing	that	might	come	to	your	mind	is,	“My!	A	whole	lot	of	gibberish!”</text>
<text top="509" left="54" width="756" height="20" font="2">Indeed,	you	rarely	see	the	use	of	the	hash	(#)	symbol	(unless	you	use	Twitter)	and	curly</text>
<text top="535" left="54" width="99" height="20" font="2">brace	pairs	</text>
<text top="539" left="153" width="10" height="14" font="5">{</text>
<text top="535" left="164" width="5" height="20" font="2">	</text>
<text top="539" left="169" width="10" height="14" font="5">}</text>
<text top="535" left="180" width="613" height="20" font="2">	in	normal	English	texts.	However,	in	C++	code,	these	strange	symbols</text>
<text top="561" left="54" width="367" height="20" font="2">abound.	You	just	have	to	get	used	to	them.</text>
<text top="598" left="54" width="501" height="20" font="2">So,	let’s	interpret	this	program,	starting	from	the	first	line.</text>
<text top="634" left="54" width="307" height="20" font="2">This	is	the	first	line	of	the	program:</text>
<text top="678" left="54" width="570" height="14" font="5">#include	&lt;iostream&gt;		//	Import	the	input-output	library</text>
<text top="709" left="54" width="403" height="20" font="2">This	line	has	two	important	points	to	be	noted:</text>
<text top="746" left="69" width="266" height="20" font="2">1.	 The	first	thing	we	see	is	an	</text>
<text top="750" left="335" width="83" height="14" font="5">#include</text>
<text top="746" left="418" width="421" height="20" font="2">	statement.	We	are	asking	C++	to	copy	and	paste</text>
<text top="771" left="97" width="405" height="20" font="2">the	contents	of	another	C++	source	file,	called	</text>
<text top="776" left="502" width="104" height="14" font="5">&lt;iostream&gt;</text>
<text top="771" left="606" width="196" height="20" font="2">,	directly	into	our	code</text>
<text top="797" left="97" width="78" height="20" font="2">file.	The	</text>
<text top="802" left="176" width="104" height="14" font="5">&lt;iostream&gt;</text>
<text top="797" left="279" width="529" height="20" font="2">	is	a	standard	C++	library	that	handles	all	the	sticky	code	that</text>
<text top="823" left="97" width="258" height="20" font="2">lets	us	print	text	to	the	screen.</text>
<text top="849" left="69" width="306" height="20" font="2">2.	 The	second	thing	we	notice	is	a	</text>
<text top="854" left="375" width="21" height="14" font="5">//</text>
<text top="849" left="395" width="403" height="20" font="2">	comment.	C++	ignores	any	text	after	a	double</text>
<text top="875" left="97" width="56" height="20" font="2">slash	(</text>
<text top="880" left="153" width="21" height="14" font="5">//</text>
<text top="875" left="174" width="625" height="20" font="2">)	until	the	end	of	that	line.	Comments	are	very	useful	to	add	in	plain	text</text>
<text top="901" left="97" width="502" height="20" font="2">explanations	of	what	some	code	does.	You	might	also	see	</text>
<text top="905" left="599" width="52" height="14" font="5">/*	*/</text>
<text top="901" left="651" width="184" height="20" font="2">	C-style	comments	in</text>
<text top="927" left="97" width="527" height="20" font="2">the	source.	Surrounding	any	text	in	C	or	C++	with	slash-star	</text>
<text top="931" left="624" width="21" height="14" font="5">/*</text>
<text top="927" left="645" width="128" height="20" font="2">	and	star-slash	</text>
<text top="931" left="773" width="21" height="14" font="5">*/</text>
<text top="953" left="97" width="547" height="20" font="2">gives	an	instruction	to	have	that	code	removed	by	the	compiler.</text>
<text top="1011" left="54" width="246" height="20" font="2">This	is	the	next	line	of	code:</text>
<text top="1055" left="54" width="487" height="14" font="5">using	namespace	std;	//	allows	us	to	write	cout</text>
<text top="1075" left="54" width="456" height="14" font="5">																					//	instead	of	std::cout</text>
<text top="1106" left="54" width="416" height="20" font="2">The	comments	beside	this	line	explain	what	the	</text>
<text top="1111" left="470" width="52" height="14" font="5">using</text>
<text top="1106" left="522" width="315" height="20" font="2">	statement	does:	it	just	lets	you	use	a</text>
<text top="1132" left="54" width="212" height="20" font="2">shorthand	(for	example,	</text>
<text top="1137" left="266" width="41" height="14" font="5">cout</text>
<text top="1132" left="308" width="487" height="20" font="2">)	instead	of	the	fully	qualified	name	(which,	in	this	case,</text>
<text top="1158" left="54" width="85" height="20" font="2">would	be	</text>
<text top="1163" left="139" width="93" height="14" font="5">std::cout</text>
<text top="1158" left="232" width="554" height="20" font="2">)	for	a	lot	of	our	C++	code	commands.	Some	people	don’t	like	a</text>
<text top="1189" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="1184" left="261" width="303" height="20" font="2">	statement;	they	prefer	to	write	the	</text>
<text top="1189" left="564" width="93" height="14" font="5">std::cout</text>
<text top="1184" left="657" width="139" height="20" font="2">	longhand	every</text>
</page>
<page number="74" position="absolute" top="0" left="0" height="1262" width="892">
<image top="305" left="54" width="270" height="167" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-74_1.jpg"/>
<text top="57" left="54" width="190" height="20" font="2">time	they	want	to	use	</text>
<text top="62" left="244" width="41" height="14" font="5">cout</text>
<text top="57" left="285" width="532" height="20" font="2">.	You	can	get	into	long	arguments	over	things	like	this.	In	this</text>
<text top="83" left="54" width="526" height="20" font="2">section	of	the	text,	we	prefer	the	brevity	that	we	get	with	the	</text>
<text top="88" left="580" width="155" height="14" font="5">using	namespace</text>
<text top="83" left="736" width="5" height="20" font="2">	</text>
<text top="88" left="741" width="41" height="14" font="5">std;</text>
<text top="109" left="54" width="88" height="20" font="2">statement.</text>
<text top="146" left="54" width="176" height="20" font="2">This	is	the	next	line:</text>
<text top="189" left="54" width="104" height="14" font="5">int	main()</text>
<text top="221" left="54" width="485" height="20" font="2">This	is	the	application’s	starting	point.	You	can	think	of	</text>
<text top="225" left="539" width="41" height="14" font="5">main</text>
<text top="221" left="581" width="258" height="20" font="2">	as	the	start	line	in	a	race.	The</text>
<text top="251" left="54" width="104" height="14" font="5">int	main()</text>
<text top="246" left="158" width="662" height="20" font="2">	statement	is	how	your	C++	program	knows	where	to	start;	take	a	look	at	the</text>
<text top="272" left="54" width="147" height="20" font="2">following	figure:</text>
<text top="541" left="54" width="180" height="20" font="2">If	you	don’t	have	an	</text>
<text top="546" left="234" width="104" height="14" font="5">int	main()</text>
<text top="541" left="338" width="192" height="20" font="2">	program	marker	or	if	</text>
<text top="546" left="530" width="41" height="14" font="5">main</text>
<text top="541" left="571" width="232" height="20" font="2">	is	spelled	incorrectly,	then</text>
<text top="567" left="54" width="681" height="20" font="2">your	program	just	won’t	work	because	the	program	won’t	know	where	to	start.</text>
<text top="604" left="54" width="410" height="20" font="2">The	next	line	is	a	character	you	don’t	see	often:</text>
<text top="647" left="54" width="10" height="14" font="5">{</text>
<text top="679" left="54" width="44" height="20" font="2">This	</text>
<text top="683" left="98" width="10" height="14" font="5">{</text>
<text top="679" left="108" width="704" height="20" font="2">	character	is	not	a	sideways	mustache.	It	is	called	a	curly	brace,	and	it	denotes	the</text>
<text top="704" left="54" width="267" height="20" font="2">starting	point	of	your	program.</text>
<text top="741" left="54" width="364" height="20" font="2">The	next	two	lines	print	text	to	the	screen:</text>
<text top="784" left="54" width="321" height="14" font="5">cout	&lt;&lt;	&#34;Hello,	world&#34;	&lt;&lt;	endl;</text>
<text top="805" left="54" width="466" height="14" font="5">cout	&lt;&lt;	&#34;I	am	now	a	C++	programmer.&#34;	&lt;&lt;	endl;</text>
<text top="836" left="54" width="39" height="20" font="2">The	</text>
<text top="841" left="93" width="41" height="14" font="5">cout</text>
<text top="836" left="134" width="658" height="20" font="2">	statement	stands	for	console	output.	Text	between	double	quotes	will	get	an</text>
<text top="862" left="54" width="781" height="20" font="2">output	to	the	console	exactly	as	it	appears	between	the	quotes.	You	can	write	anything	you</text>
<text top="888" left="54" width="696" height="20" font="2">want	between	double	quotes	except	a	double	quote	and	it	will	still	be	valid	code.</text>
<text top="926" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="965" left="54" width="681" height="20" font="2">To	enter	a	double	quote	between	double	quotes,	you	need	to	stick	a	backslash	(</text>
<text top="969" left="735" width="10" height="14" font="5">\</text>
<text top="965" left="746" width="77" height="20" font="2">)	in	front</text>
<text top="991" left="54" width="657" height="20" font="2">of	the	double	quote	character	that	you	want	inside	the	string,	as	shown	here:</text>
<text top="1034" left="54" width="663" height="14" font="5">cout	&lt;&lt;	&#34;John	shouted	into	the	cave	\&#34;Hello!\&#34;	The	cave	echoed.&#34;</text>
<text top="1065" left="54" width="39" height="20" font="2">The	</text>
<text top="1070" left="93" width="10" height="14" font="5">\</text>
<text top="1065" left="103" width="726" height="20" font="2">	symbol	is	an	example	of	an	escape	sequence.	There	are	other	escape	sequences	that</text>
<text top="1091" left="54" width="558" height="20" font="2">you	can	use;	the	most	common	escape	sequence	you	will	find	is	</text>
<text top="1096" left="612" width="21" height="14" font="5">\n</text>
<text top="1091" left="632" width="200" height="20" font="2">,	which	is	used	to	jump</text>
<text top="1117" left="54" width="264" height="20" font="2">the	text	output	to	the	next	line.</text>
<text top="1154" left="54" width="297" height="20" font="2">The	last	line	of	the	program	is	the	</text>
<text top="1158" left="351" width="62" height="14" font="5">return</text>
<text top="1154" left="413" width="94" height="20" font="2">	statement:</text>
</page>
<page number="75" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="93" height="14" font="5">return	0;</text>
<text top="89" left="54" width="704" height="20" font="2">This	line	of	code	indicates	that	the	C++	program	is	quitting.	You	can	think	of	the	</text>
<text top="93" left="758" width="62" height="14" font="5">return</text>
<text top="115" left="54" width="402" height="20" font="2">statement	as	returning	to	the	operating	system.</text>
<text top="151" left="54" width="711" height="20" font="2">Finally,	the	end	of	your	program	is	denoted	by	the	closing	curly	brace,	which	is	an</text>
<text top="177" left="54" width="312" height="20" font="2">opposite-facing	sideways	mustache:</text>
<text top="221" left="54" width="10" height="14" font="5">}</text>
</page>
<page number="76" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="170" height="32" font="7"><b>Semicolons</b></text>
<text top="110" left="54" width="774" height="20" font="2">Semicolons	(;)	are	important	in	C++	programming.	Notice	in	the	preceding	code	example</text>
<text top="136" left="54" width="754" height="20" font="2">that	most	lines	of	code	end	in	a	semicolon.	If	you	don’t	end	each	line	with	a	semicolon,</text>
<text top="162" left="54" width="688" height="20" font="2">your	code	will	not	compile,	and	if	that	happens,	you	can	be	fired	from	your	job.</text>
</page>
<page number="77" position="absolute" top="0" left="0" height="1262" width="892">
<image top="231" left="54" width="633" height="186" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-77_1.jpg"/>
<image top="798" left="54" width="563" height="143" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-77_2.jpg"/>
<text top="61" left="54" width="246" height="32" font="7"><b>Handling	errors</b></text>
<text top="110" left="54" width="763" height="20" font="2">If	you	make	a	mistake	while	entering	code,	then	you	will	have	a	syntax	error.	In	the	face</text>
<text top="136" left="54" width="780" height="20" font="2">of	syntax	errors,	C++	will	scream	murder	and	your	program	will	not	even	compile;	also,	it</text>
<text top="162" left="54" width="106" height="20" font="2">will	not	run.</text>
<text top="199" left="54" width="582" height="20" font="2">Let’s	try	to	insert	a	couple	of	errors	into	our	C++	code	from	earlier:</text>
<text top="454" left="63" width="767" height="20" font="4"><i>Warning!	This	code	listing	contains	errors.	It	is	a	good	exercise	to	find	all	the	errors	and</i></text>
<text top="480" left="408" width="76" height="20" font="4"><i>fix	them!</i></text>
<text top="549" left="54" width="546" height="20" font="2">As	an	exercise,	try	to	find	and	fix	all	the	errors	in	this	program.</text>
<text top="587" left="54" width="50" height="22" font="8"><b>Note</b></text>
<text top="626" left="54" width="757" height="20" font="2">Note	that	if	you	are	extremely	new	to	C++,	this	might	be	a	hard	exercise.	However,	this</text>
<text top="652" left="54" width="578" height="20" font="2">will	show	you	how	careful	you	need	to	be	when	writing	C++	code.</text>
<text top="688" left="54" width="756" height="20" font="2">Fixing	compilation	errors	can	be	a	nasty	business.	However,	if	you	input	the	text	of	this</text>
<text top="714" left="54" width="774" height="20" font="2">program	into	your	code	editor	and	try	to	compile	it,	it	will	cause	the	compiler	to	report	all</text>
<text top="740" left="54" width="771" height="20" font="2">the	errors	to	you.	Fix	the	errors,	one	at	a	time,	and	then	try	to	recompile.	A	new	error	will</text>
<text top="766" left="54" width="655" height="20" font="2">pop	up	or	the	program	will	just	work,	as	shown	in	the	following	screenshot:</text>
<text top="978" left="155" width="583" height="20" font="4"><i>Xcode	shows	you	the	errors	in	your	code	when	you	try	to	compile	it</i></text>
<text top="1047" left="54" width="784" height="20" font="2">The	reason	I	am	showing	you	this	sample	program	is	to	encourage	the	following	workflow</text>
<text top="1073" left="54" width="268" height="20" font="2">as	long	as	you	are	new	to	C++:</text>
<text top="1110" left="69" width="732" height="20" font="2">1.	 Always	start	with	a	working	C++	code	example.	You	can	fork	off	a	bunch	of	new</text>
<text top="1136" left="97" width="501" height="20" font="2">C++	programs	from	the	<i>Your	First	C++	Program</i>	section.</text>
<text top="1161" left="69" width="712" height="20" font="2">2.	 Make	your	code	modifications	in	small	steps.	When	you	are	new,	compile	after</text>
<text top="1187" left="97" width="734" height="20" font="2">writing	each	new	line	of	code.	Do	not	code	for	one	to	two	hours	and	then	compile	all</text>
</page>
<page number="78" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="97" width="192" height="20" font="2">that	new	code	at	once.</text>
<text top="83" left="69" width="770" height="20" font="2">3.	 You	can	expect	it	to	be	a	couple	of	months	before	you	can	write	code	that	performs	as</text>
<text top="109" left="97" width="716" height="20" font="2">expected	the	first	time	you	write	it.	Don’t	get	discouraged.	Learning	to	code	is	fun.</text>
</page>
<page number="79" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="148" height="32" font="7"><b>Warnings</b></text>
<text top="110" left="54" width="762" height="20" font="2">The	compiler	will	flag	things	that	it	thinks	might	be	mistakes.	These	are	another	class	of</text>
<text top="136" left="54" width="775" height="20" font="2">compiler	notices	known	as	warnings.	Warnings	are	problems	in	your	code	that	you	do	not</text>
<text top="162" left="54" width="770" height="20" font="2">have	to	fix	for	your	code	to	run	but	are	simply	recommended	to	be	fixed	by	the	compiler.</text>
<text top="188" left="54" width="743" height="20" font="2">Warnings	are	often	indications	of	code	that	is	not	quite	perfect,	and	fixing	warnings	in</text>
<text top="214" left="54" width="373" height="20" font="2">code	is	generally	considered	good	practice.</text>
<text top="251" left="54" width="769" height="20" font="2">However,	not	all	warnings	are	going	to	cause	problems	in	your	code.	Some	programmers</text>
<text top="277" left="54" width="719" height="20" font="2">prefer	to	disable	the	warnings	that	they	do	not	consider	to	be	an	issue	(for	example,</text>
<text top="303" left="54" width="753" height="20" font="2">warning	4018	warns	against	signed/unsigned	mismatch,	which	you	will	most	likely	see</text>
<text top="329" left="54" width="51" height="20" font="2">later).</text>
</page>
<page number="80" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="81" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="602" height="39" font="0"><b>What	is	building	and	compiling?</b></text>
<text top="120" left="54" width="735" height="20" font="2">You	might	have	heard	of	a	computer	process	term	called	compiling.	Compiling	is	the</text>
<text top="146" left="54" width="767" height="20" font="2">process	of	converting	your	C++	program	into	code	that	can	run	on	a	CPU.	Building	your</text>
<text top="172" left="54" width="433" height="20" font="2">source	code	means	the	same	thing	as	compiling	it.</text>
<text top="209" left="54" width="149" height="20" font="2">See,	your	source	</text>
<text top="213" left="203" width="83" height="14" font="5">code.cpp</text>
<text top="209" left="286" width="533" height="20" font="2">	file	will	not	actually	run	on	a	computer.	It	has	to	be	compiled</text>
<text top="235" left="54" width="144" height="20" font="2">first	for	it	to	run.</text>
<text top="271" left="54" width="773" height="20" font="2">This	is	the	whole	point	of	using	Microsoft	Visual	Studio	Express	or	Xcode.	Visual	Studio</text>
<text top="297" left="54" width="784" height="20" font="2">and	Xcode	are	both	compilers.	You	can	write	C++	source	code	in	any	text-editing	program</text>
<text top="323" left="54" width="616" height="20" font="2">—even	in	Notepad.	But	you	need	a	compiler	to	run	it	on	your	machine.</text>
<text top="360" left="54" width="755" height="20" font="2">Every	operating	system	typically	has	one	or	more	C++	compilers	that	can	compile	C++</text>
<text top="386" left="54" width="765" height="20" font="2">code	to	run	on	that	platform.	On	Windows,	you	have	Visual	Studio	and	Intel	C++	Studio</text>
<text top="412" left="54" width="752" height="20" font="2">compiler.	On	Mac,	there	is	Xcode,	and	on	all	of	Windows,	Mac,	and	Linux,	there	is	the</text>
<text top="438" left="54" width="312" height="19" font="3"><b>GNU	Compiler	Collection</b>	(<b>GCC</b>).</text>
<text top="474" left="54" width="771" height="20" font="2">The	same	C++	code	that	we	write	(Source)	can	be	compiled	using	different	compilers	for</text>
<text top="500" left="54" width="783" height="20" font="2">different	operating	systems,	and	in	theory,	they	should	produce	the	same	result.	The	ability</text>
<text top="526" left="54" width="783" height="20" font="2">to	compile	the	same	code	on	different	platforms	is	called	portability.	In	general,	portability</text>
<text top="552" left="54" width="133" height="20" font="2">is	a	good	thing.</text>
</page>
<page number="82" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="140" height="32" font="7"><b>Scripting</b></text>
<text top="110" left="54" width="717" height="20" font="2">There	is	another	class	of	programming	languages	called	scripting	languages.	These</text>
<text top="136" left="54" width="735" height="20" font="2">include	languages	such	as	PHP,	Python,	and	ActionScript.	Scripted	languages	are	not</text>
<text top="162" left="54" width="750" height="20" font="2">compiled—for	JavaScript,	PHP,	and	ActionScript,	there	is	no	compilation	step.	Rather,</text>
<text top="188" left="54" width="773" height="20" font="2">they	are	interpreted	from	the	source	as	the	program	is	run.	The	good	thing	about	scripting</text>
<text top="214" left="54" width="704" height="20" font="2">languages	is	that	they	are	usually	platform-independent	from	the	first	go,	because</text>
<text top="240" left="54" width="584" height="20" font="2">interpreters	are	very	carefully	designed	to	be	platform-independent.</text>
<text top="278" left="54" width="221" height="22" font="8"><b>Exercise	–	ASCII	art</b></text>
<text top="317" left="54" width="770" height="20" font="2">Game	programmers	love	ASCII	art.	You	can	draw	a	picture	using	only	characters.	Here’s</text>
<text top="343" left="54" width="295" height="20" font="2">an	example	of	an	ASCII	art	maze:</text>
<text top="386" left="54" width="363" height="14" font="5">cout	&lt;&lt;	&#34;****************&#34;	&lt;&lt;	endl;</text>
<text top="406" left="54" width="363" height="14" font="5">cout	&lt;&lt;	&#34;*............*.*&#34;	&lt;&lt;	endl;</text>
<text top="427" left="54" width="363" height="14" font="5">cout	&lt;&lt;	&#34;*.*.*******..*.*&#34;	&lt;&lt;	endl;</text>
<text top="447" left="54" width="363" height="14" font="5">cout	&lt;&lt;	&#34;*.*.*..........*&#34;	&lt;&lt;	endl;</text>
<text top="468" left="54" width="363" height="14" font="5">cout	&lt;&lt;	&#34;*.*.*.**********&#34;	&lt;&lt;	endl;</text>
<text top="488" left="54" width="363" height="14" font="5">cout	&lt;&lt;	&#34;***.***........*&#34;	&lt;&lt;	endl;</text>
<text top="520" left="54" width="638" height="20" font="2">Construct	your	own	maze	in	C++	code	or	draw	a	picture	using	characters.</text>
</page>
<page number="83" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="84" position="absolute" top="0" left="0" height="1262" width="892">
<image top="256" left="54" width="485" height="202" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-84_1.jpg"/>
<image top="586" left="54" width="444" height="175" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-84_2.jpg"/>
<text top="64" left="54" width="182" height="39" font="0"><b>Summary</b></text>
<text top="120" left="54" width="785" height="20" font="2">To	sum	it	up,	we	learned	how	to	write	our	first	program	in	the	C++	programming	language</text>
<text top="146" left="54" width="751" height="20" font="2">in	our	integrated	development	environment	(IDE,	Visual	Studio,	or	Xcode).	This	was	a</text>
<text top="172" left="54" width="749" height="20" font="2">simple	program,	but	you	should	count	getting	your	first	program	to	compile	and	run	as</text>
<text top="198" left="54" width="755" height="20" font="2">your	first	victory.	In	the	upcoming	chapters,	we’ll	put	together	more	complex	programs</text>
<text top="224" left="54" width="387" height="20" font="2">and	start	using	Unreal	Engine	for	our	games.</text>
<text top="527" left="54" width="769" height="20" font="2">The	preceding	screenshot	is	of	your	first	C++	program	and	the	following	screenshot	is	of</text>
<text top="553" left="54" width="244" height="20" font="2">its	output,	your	first	victory:</text>
</page>
<page number="85" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="86" position="absolute" top="0" left="0" height="1262" width="892">
<image top="319" left="54" width="756" height="221" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-86_1.jpg"/>
<text top="64" left="54" width="630" height="39" font="0"><b>Chapter	2.	Variables	and	Memory</b></text>
<text top="120" left="54" width="734" height="20" font="2">To	write	your	C++	game	program,	you	will	need	your	computer	to	remember	a	lot	of</text>
<text top="146" left="54" width="765" height="20" font="2">things.	Things	such	as	where	in	the	world	is	the	player,	how	many	hit	points	he	has,	how</text>
<text top="172" left="54" width="732" height="20" font="2">much	ammunition	he	has	left,	where	the	items	are	in	the	world,	what	power-ups	they</text>
<text top="198" left="54" width="539" height="20" font="2">provide,	and	the	letters	that	make	up	the	player’s	screen	name.</text>
<text top="235" left="54" width="740" height="20" font="2">The	computer	that	you	have	actually	has	a	sort	of	electronic	sketchpad	inside	it	called</text>
<text top="260" left="54" width="718" height="20" font="4"><i>memory,</i>	or	RAM.	Physically,	computer	memory	is	made	out	of	silicon	and	it	looks</text>
<text top="286" left="54" width="552" height="20" font="2">something	similar	to	what	is	shown	in	the	following	screenshot:</text>
<text top="577" left="69" width="755" height="20" font="4"><i>Does	this	RAM	look	like	a	parking	garage?	Because	that’s	the	metaphor	we’re	going	to</i></text>
<text top="603" left="432" width="29" height="20" font="4"><i>use</i></text>
<text top="672" left="54" width="751" height="20" font="2">RAM	is	short	for	Random	Access	Memory.	It	is	called	random	access	because	you	can</text>
<text top="698" left="54" width="735" height="20" font="2">access	any	part	of	it	at	any	time.	If	you	still	have	some	CDs	lying	around,	they	are	an</text>
<text top="724" left="54" width="771" height="20" font="2">example	of	non-random	access.	CDs	are	meant	to	be	read	and	played	back	in	order.	I	still</text>
<text top="750" left="54" width="713" height="20" font="2">remember	jumping	tracks	on	Michael	Jackson’s	<i>Dangerous</i>	album	way	back	when</text>
<text top="776" left="54" width="775" height="20" font="2">switching	tracks	on	a	CD	took	a	lot	of	time!	Hopping	around	and	accessing	different	cells</text>
<text top="802" left="54" width="752" height="20" font="2">of	RAM,	however,	doesn’t	take	much	time	at	all.	RAM	is	a	type	of	fast	memory	access</text>
<text top="828" left="54" width="211" height="20" font="2">known	as	flash	memory.</text>
<text top="864" left="54" width="754" height="20" font="2">RAM	is	called	volatile	flash	memory	because	when	the	computer	is	shut	down,	RAM’s</text>
<text top="890" left="54" width="754" height="20" font="2">contents	are	cleared	and	the	old	contents	of	RAM	are	lost	unless	they	were	saved	to	the</text>
<text top="916" left="54" width="125" height="20" font="2">hard	disk	first.</text>
<text top="953" left="54" width="754" height="20" font="2">For	permanent	storage,	you	have	to	save	your	data	into	a	hard	disk.	There	are	two	main</text>
<text top="979" left="54" width="732" height="20" font="2">types	of	hard	disks,	platter-based	<b>Hard	Disk	Drives</b>	(<b>HDDs</b>)	and	<b>Solid-state	Drives</b></text>
<text top="1005" left="54" width="738" height="20" font="2">(<b>SSDs</b>).	SSDs	are	more	modern	than	platter-based	HDDs,	since	they	use	RAM’s	fast-</text>
<text top="1031" left="54" width="781" height="20" font="2">access	(Flash)	memory	principle.	Unlike	RAM,	however,	the	data	on	an	SSD	persists	after</text>
<text top="1057" left="54" width="767" height="20" font="2">the	computer	is	shut	down.	If	you	can	get	an	SSD,	I’d	highly	recommend	that	you	use	it!</text>
<text top="1083" left="54" width="774" height="20" font="2">Platter-based	drives	are	outdated.	We	need	a	way	to	reserve	a	space	on	the	RAM	and	read</text>
<text top="1109" left="54" width="449" height="20" font="2">and	write	from	it.	Fortunately,	C++	makes	this	easy.</text>
</page>
<page number="87" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="174" height="39" font="0"><b>Variables</b></text>
<text top="120" left="54" width="747" height="20" font="2">A	saved	location	in	computer	memory	that	we	can	read	or	write	to	is	called	a	<i>variable</i>.</text>
<text top="157" left="54" width="777" height="20" font="2">A	variable	is	a	component	whose	value	can	vary.	In	a	computer	program,	you	can	think	of</text>
<text top="183" left="54" width="692" height="20" font="2">a	variable	as	a	container-fluid,	into	which	you	can	store	some	data.	In	C++,	these	data</text>
<text top="209" left="54" width="769" height="20" font="2">container-fluids	(variables)	have	types.	You	have	to	use	the	right	type	of	data	container-fluid	to	save</text>
<text top="235" left="54" width="232" height="20" font="2">your	data	in	your	program.</text>
<text top="271" left="54" width="570" height="20" font="2">If	you	want	to	save	an	integer,	such	as	1,	0,	or	20,	you	will	use	an	</text>
<text top="276" left="624" width="31" height="14" font="5">int</text>
<text top="271" left="656" width="173" height="20" font="2">	type	container-fluid.	You</text>
<text top="297" left="54" width="731" height="20" font="2">can	use	float-type	container-fluids	to	carry	around	floating-point	(decimal)	values,	such	as</text>
<text top="323" left="54" width="754" height="20" font="2">38.87,	and	you	can	use	string	variables	to	carry	around	strings	of	letters	(think	of	it	as	a</text>
<text top="349" left="54" width="403" height="20" font="2">“string	of	pearls”,	where	each	letter	is	a	pearl).</text>
<text top="386" left="54" width="742" height="20" font="2">You	can	think	of	your	reserved	spot	in	RAM	like	reserving	parking	space	in	a	parking</text>
<text top="412" left="54" width="734" height="20" font="2">garage:	once	we	declare	our	variable	and	get	a	spot	for	it,	no	one	else	(not	even	other</text>
<text top="438" left="54" width="779" height="20" font="2">programs	running	on	the	same	machine)	will	be	given	that	piece	of	RAM	by	the	operating</text>
<text top="464" left="54" width="731" height="20" font="2">system.	The	RAM	beside	your	variable	might	be	unused	or	it	might	be	used	by	other</text>
<text top="490" left="54" width="87" height="20" font="2">programs.</text>
<text top="528" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="566" left="54" width="735" height="20" font="2">The	operating	system	exists	to	keep	programs	from	stepping	on	each	other’s	toes	and</text>
<text top="592" left="54" width="777" height="20" font="2">accessing	the	same	bits	of	computer	hardware	at	the	same	time.	In	general,	civil	computer</text>
<text top="618" left="54" width="772" height="20" font="2">programs	should	not	read	or	write	to	each	other’s	memory.	However,	some	types	of	cheat</text>
<text top="644" left="54" width="742" height="20" font="2">programs	(for	example,	maphacks)	secretly	access	your	program’s	memory.	Programs</text>
<text top="670" left="54" width="632" height="20" font="2">such	as	PunkBuster	were	introduced	to	prevent	cheating	in	online	games.</text>
</page>
<page number="88" position="absolute" top="0" left="0" height="1262" width="892">
<image top="409" left="54" width="540" height="206" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-88_1.jpg"/>
<text top="61" left="54" width="626" height="32" font="7"><b>Declaring	variables	–	touching	the	silicon</b></text>
<text top="110" left="54" width="766" height="20" font="2">Reserving	a	spot	on	computer	memory	using	C++	is	easy.	We’ll	want	to	name	our	chunk</text>
<text top="136" left="54" width="618" height="20" font="2">of	memory	that	we	will	store	our	data	in	with	a	good,	descriptive	name.</text>
<text top="173" left="54" width="773" height="20" font="2">For	example,	say,	we	know	that	player	<b>hit	points</b>	(<b>hp</b>)	will	be	an	integer	(whole)	number,</text>
<text top="199" left="54" width="782" height="20" font="2">such	as	1,	2,	3,	or	100.	To	get	a	piece	of	silicon	to	store	the	player’s	hp	in	memory,	we	will</text>
<text top="225" left="54" width="297" height="20" font="2">declare	the	following	line	of	code:</text>
<text top="268" left="54" width="580" height="14" font="5">int	hp;					//	declare	variable	to	store	the	player's	hp</text>
<text top="299" left="54" width="598" height="20" font="2">This	line	of	code	reserves	a	small	chunk	of	RAM	to	store	an	integer	(</text>
<text top="304" left="652" width="31" height="14" font="5">int</text>
<text top="299" left="683" width="99" height="20" font="2">	is	short	for</text>
<text top="325" left="54" width="754" height="20" font="2">integer),	called	hp.	The	following	is	an	example	of	our	chunk	of	RAM	used	to	store	the</text>
<text top="351" left="54" width="767" height="20" font="2">player’s	hp.	This	reserves	a	parking	space	for	us	in	memory	(among	all	the	other	parking</text>
<text top="377" left="54" width="576" height="20" font="2">spaces),	and	we	can	refer	to	this	space	in	memory	by	its	label	(hp).</text>
<text top="653" left="121" width="652" height="20" font="4"><i>Among	all	the	other	spaces	in	memory,	we	get	one	spot	to	store	our	hp	data</i></text>
<text top="722" left="54" width="759" height="20" font="2">Notice	how	the	variable	space	is	type-marked	in	this	diagram	as	<b>int</b>:	if	it	is	a	space	for	a</text>
<text top="748" left="54" width="780" height="20" font="2">double	or	a	different	type	of	variable.	C++	remembers	the	spaces	that	you	reserve	for	your</text>
<text top="774" left="54" width="670" height="20" font="2">program	in	memory	not	only	by	name	but	by	the	type	of	variable	it	is	as	well.</text>
<text top="810" left="54" width="752" height="20" font="2">Notice	that	we	haven’t	put	anything	in	hp’s	box	yet!	We’ll	do	that	later—right	now,	the</text>
<text top="836" left="54" width="744" height="20" font="2">value	of	the	hp	variable	is	not	set,	so	it	will	have	the	value	that	was	left	in	that	parking</text>
<text top="862" left="54" width="725" height="20" font="2">space	by	the	previous	occupant	(the	value	left	behind	by	another	program,	perhaps).</text>
<text top="888" left="54" width="778" height="20" font="2">Telling	C++	the	type	of	the	variable	is	important!	Later,	we	will	declare	a	variable	to	store</text>
<text top="914" left="54" width="251" height="20" font="2">decimal	values,	such	as	3.75.</text>
<text top="952" left="54" width="569" height="22" font="8"><b>Reading	and	writing	to	your	reserved	spot	in	memory</b></text>
<text top="991" left="54" width="486" height="20" font="2">Writing	a	value	into	memory	is	easy!	Once	you	have	an	</text>
<text top="995" left="540" width="21" height="14" font="5">hp</text>
<text top="991" left="561" width="244" height="20" font="2">	variable,	you	just	write	to	it</text>
<text top="1017" left="54" width="84" height="20" font="2">using	the	</text>
<text top="1021" left="138" width="10" height="14" font="5">=</text>
<text top="1017" left="148" width="47" height="20" font="2">	sign:</text>
<text top="1060" left="54" width="93" height="14" font="5">hp	=	500;</text>
<text top="1091" left="54" width="255" height="20" font="2">Voila!	The	player	has	500	hp.</text>
<text top="1128" left="54" width="759" height="20" font="2">Reading	the	variable	is	equally	simple.	To	print	out	the	value	of	the	variable,	simply	put</text>
<text top="1154" left="54" width="37" height="20" font="2">this:</text>
</page>
<page number="89" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="197" height="14" font="5">cout	&lt;&lt;	hp	&lt;&lt;	endl;</text>
<text top="89" left="54" width="762" height="20" font="2">This	will	print	the	value	stored	inside	the	hp	variable.	If	you	change	the	value	of	hp,	and</text>
<text top="115" left="54" width="77" height="20" font="2">then	use	</text>
<text top="119" left="131" width="41" height="14" font="5">cout</text>
<text top="115" left="172" width="553" height="20" font="2">	again,	the	most	up-to-date	value	will	be	printed,	as	shown	here:</text>
<text top="158" left="54" width="104" height="14" font="5">hp	=	1200;</text>
<text top="178" left="54" width="383" height="14" font="5">cout	&lt;&lt;	hp	&lt;&lt;	endl;	//	now	shows	1200</text>
</page>
<page number="90" position="absolute" top="0" left="0" height="1262" width="892">
<image top="335" left="54" width="276" height="321" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-90_1.jpg"/>
<image top="835" left="54" width="324" height="297" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-90_2.jpg"/>
<text top="61" left="54" width="369" height="32" font="7"><b>Numbers	are	everything</b></text>
<text top="110" left="54" width="751" height="20" font="2">Something	that	you	need	to	get	used	to	when	you	start	computer	programming	is	that	a</text>
<text top="136" left="54" width="784" height="20" font="2">surprising	number	of	things	can	be	stored	in	computer	memory	as	just	numbers.	A	player’s</text>
<text top="162" left="54" width="775" height="20" font="2">hp?	As	we	just	saw	in	the	previous	section,	hp	can	just	be	an	integer	number.	If	the	player</text>
<text top="188" left="54" width="725" height="20" font="2">gets	hurt,	we	reduce	this	number.	If	the	player	gains	health,	we	increase	the	number.</text>
<text top="225" left="54" width="745" height="20" font="2">Colors	can	be	stored	as	numbers	too!	If	you’ve	used	standard	image	editing	programs,</text>
<text top="251" left="54" width="746" height="20" font="2">there	are	usually	sliders	that	indicate	color	as	how	much	red,	green,	and	blue	are	being</text>
<text top="277" left="54" width="782" height="20" font="2">used,	such	as	Pixelmator’s	color	sliders.	A	color	is	then	represented	by	three	numbers.	The</text>
<text top="303" left="54" width="641" height="20" font="2">purple	color	shown	in	the	following	screenshot	is	(R=127,	G=34,	B=203):</text>
<text top="725" left="54" width="770" height="20" font="2">What	about	world	geometry?	These	are	also	just	numbers:	all	we	have	to	do	is	store	a	list</text>
<text top="751" left="54" width="722" height="20" font="2">of	3D	space	points	(x,	y,	and	z	coordinates)	and	then	store	another	list	of	points	that</text>
<text top="777" left="54" width="770" height="20" font="2">explain	how	those	points	can	be	connected	to	form	triangles.	In	the	following	screenshot,</text>
<text top="803" left="54" width="611" height="20" font="2">we	can	see	how	3D	space	points	are	used	to	represent	world	geometry:</text>
</page>
<page number="91" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="781" height="20" font="2">The	combination	of	numbers	for	colors	and	numbers	for	3D	space	points	will	let	you	draw</text>
<text top="83" left="54" width="429" height="20" font="2">large	and	colored	landscapes	in	your	game	world.</text>
<text top="120" left="54" width="765" height="20" font="2">The	trick	with	the	preceding	examples	is	how	we	interpret	the	stored	numbers	so	that	we</text>
<text top="146" left="54" width="436" height="20" font="2">can	make	them	mean	what	we	want	them	to	mean.</text>
</page>
<page number="92" position="absolute" top="0" left="0" height="1262" width="892">
<image top="1023" left="54" width="432" height="142" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-92_1.jpg"/>
<text top="61" left="54" width="276" height="32" font="7"><b>More	on	variables</b></text>
<text top="110" left="54" width="755" height="20" font="2">You	can	think	of	variables	as	animal-carrying	cases.	A	cat	carrier	can	be	used	to	carry	a</text>
<text top="136" left="54" width="769" height="20" font="2">cat,	but	not	a	dog.	Similarly,	you	should	use	a	float-type	variable	to	carry	decimal-valued</text>
<text top="162" left="54" width="414" height="20" font="2">numbers.	If	you	store	a	decimal	value	inside	an	</text>
<text top="167" left="468" width="31" height="14" font="5">int</text>
<text top="162" left="499" width="200" height="20" font="2">	variable,	it	will	not	fit:</text>
<text top="205" left="54" width="155" height="14" font="5">int	x	=	38.87f;</text>
<text top="226" left="54" width="435" height="14" font="5">cout	&lt;&lt;	x	&lt;&lt;	endl;	//	prints	38,	not	38.87</text>
<text top="257" left="54" width="745" height="20" font="2">What’s	really	happening	here	is	that	C++	does	an	automatic	type	conversion	on	38.87,</text>
<text top="283" left="54" width="376" height="20" font="4"><i>transmogrifying</i>	it	to	an	integer	to	fit	in	the	</text>
<text top="288" left="430" width="31" height="14" font="5">int</text>
<text top="283" left="461" width="325" height="20" font="2">	carrying	case.	It	drops	the	decimal	to</text>
<text top="309" left="54" width="339" height="20" font="2">convert	38.87	into	the	integer	value	38.</text>
<text top="346" left="54" width="770" height="20" font="2">So,	for	example,	we	can	modify	the	code	to	include	the	use	of	three	types	of	variables,	as</text>
<text top="372" left="54" width="252" height="20" font="2">shown	in	the	following	code:</text>
<text top="415" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="436" left="54" width="580" height="14" font="5">#include	&lt;string&gt;		//	need	this	to	use	string	variables!</text>
<text top="456" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="477" left="54" width="104" height="14" font="5">int	main()</text>
<text top="497" left="54" width="10" height="14" font="5">{</text>
<text top="518" left="54" width="145" height="14" font="5">		string	name;</text>
<text top="538" left="54" width="176" height="14" font="5">		int	goldPieces;</text>
<text top="559" left="54" width="114" height="14" font="5">		float	hp;</text>
<text top="579" left="54" width="383" height="14" font="5">		name	=	&#34;William&#34;;	//	That's	my	name</text>
<text top="600" left="54" width="508" height="14" font="5">		goldPieces	=	322;	//	start	with	this	much	gold	</text>
<text top="620" left="54" width="539" height="14" font="5">		hp	=	75.5f;							//	hit	points	are	decimal	valued</text>
<text top="641" left="54" width="435" height="14" font="5">		cout	&lt;&lt;	&#34;Character	&#34;	&lt;&lt;	name	&lt;&lt;	&#34;	has	&#34;	</text>
<text top="661" left="54" width="321" height="14" font="5">											&lt;&lt;	hp	&lt;&lt;	&#34;	hp	and	&#34;	</text>
<text top="682" left="54" width="383" height="14" font="5">											&lt;&lt;	goldPieces	&lt;&lt;	&#34;	gold.&#34;;</text>
<text top="702" left="54" width="10" height="14" font="5">}</text>
<text top="734" left="54" width="763" height="20" font="2">In	the	first	three	lines,	we	declare	three	boxes	to	store	our	data	parts	into,	as	shown	here:</text>
<text top="777" left="54" width="124" height="14" font="5">string	name;</text>
<text top="797" left="54" width="155" height="14" font="5">int	goldPieces;</text>
<text top="818" left="54" width="93" height="14" font="5">float	hp;</text>
<text top="849" left="54" width="779" height="20" font="2">These	three	lines	reserve	three	spots	in	memory	(like	parking	spaces).	The	next	three	lines</text>
<text top="875" left="54" width="469" height="20" font="2">fill	the	variables	with	the	values	we	desire,	as	follows:</text>
<text top="918" left="54" width="176" height="14" font="5">name	=	&#34;William&#34;;</text>
<text top="939" left="54" width="176" height="14" font="5">goldPieces	=	322;</text>
<text top="959" left="54" width="114" height="14" font="5">hp	=	75.5f;</text>
<text top="991" left="54" width="597" height="20" font="2">In	computer	memory,	this	will	look	as	shown	in	the	following	figure:</text>
</page>
<page number="93" position="absolute" top="0" left="0" height="1262" width="892">
<text top="77" left="54" width="771" height="20" font="2">You	can	change	the	contents	of	a	variable	at	any	time.	You	can	write	a	variable	using	the	</text>
<text top="81" left="825" width="10" height="14" font="5">=</text>
<text top="103" left="54" width="278" height="20" font="2">assignment	operator,	as	follows:</text>
<text top="146" left="54" width="590" height="14" font="5">goldPieces	=	522;//	=	is	called	the	&#34;assignment	operator&#34;</text>
<text top="177" left="54" width="781" height="20" font="2">You	can	also	read	the	contents	of	a	variable	at	any	time.	That’s	what	the	next	three	lines	of</text>
<text top="203" left="54" width="207" height="20" font="2">code	do,	as	shown	here:</text>
<text top="247" left="54" width="414" height="14" font="5">cout	&lt;&lt;	&#34;Character	&#34;	&lt;&lt;	name	&lt;&lt;	&#34;	has	&#34;	</text>
<text top="267" left="54" width="259" height="14" font="5">					&lt;&lt;	hp	&lt;&lt;	&#34;	hp	and	&#34;	</text>
<text top="288" left="54" width="321" height="14" font="5">					&lt;&lt;	goldPieces	&lt;&lt;	&#34;	gold.&#34;;</text>
<text top="319" left="54" width="202" height="20" font="2">Take	a	look	at	this	line:</text>
<text top="362" left="54" width="435" height="14" font="5">cout	&lt;&lt;	&#34;I	have	&#34;	&lt;&lt;	hp	&lt;&lt;	&#34;	hp.&#34;	&lt;&lt;	endl;</text>
<text top="393" left="54" width="273" height="20" font="2">There	are	two	uses	of	the	word	</text>
<text top="398" left="327" width="21" height="14" font="5">hp</text>
<text top="393" left="347" width="457" height="20" font="2">	in	this	line.	One	is	between	double	quotes,	while	the</text>
<text top="419" left="54" width="761" height="20" font="2">other	is	not.	Words	between	double	quotes	are	always	output	exactly	as	you	typed	them.</text>
<text top="445" left="54" width="414" height="20" font="2">When	double	quotes	are	not	used	(for	example,	</text>
<text top="450" left="468" width="73" height="14" font="5">&lt;&lt;	hp	&lt;</text>
<text top="445" left="541" width="288" height="20" font="2">),	a	variable	lookup	is	performed.</text>
<text top="471" left="54" width="750" height="20" font="2">If	the	variable	does	not	exist,	then	you	will	get	a	compiler	error	(undeclared	identifier).</text>
<text top="508" left="54" width="693" height="20" font="2">There	is	a	space	in	memory	that	is	allocated	for	the	name,	a	space	for	how	many</text>
<text top="538" left="54" width="104" height="14" font="5">goldPieces</text>
<text top="534" left="158" width="444" height="20" font="2">	the	player	has,	and	a	space	for	the	hp	of	the	player.</text>
<text top="572" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="611" left="54" width="743" height="20" font="2">In	general,	you	should	always	try	to	store	the	right	type	of	data	inside	the	right	type	of</text>
<text top="636" left="54" width="712" height="20" font="2">variable.	If	you	happen	to	store	the	wrong	type	of	data,	your	code	may	misbehave.</text>
</page>
<page number="94" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="9" size="14" family="Times" color="#000000"/>
	<fontspec id="10" size="14" family="Times" color="#000000"/>
<text top="61" left="54" width="197" height="32" font="7"><b>Math	in	C++</b></text>
<text top="110" left="54" width="784" height="20" font="2">Math	in	C++	is	easy	to	do;	+	(plus),	-	(minus),	*	(times),	/	(divide	by)	are	all	common	C++</text>
<text top="136" left="54" width="767" height="20" font="2">OPS,	and	proper	BEDMAS	order	will	be	followed	(Brackets,	Exponents,	Division,</text>
<text top="162" left="54" width="722" height="20" font="2">Multiplication,	Addition,	and	Subtraction).	For	example,	we	can	do	as	shown	in	the</text>
<text top="188" left="54" width="136" height="20" font="2">following	code:</text>
<text top="231" left="54" width="352" height="14" font="5">int	answer	=	277	+	5	*	4	/	2	+	20;</text>
<text top="263" left="54" width="750" height="20" font="2">Another	operator	that	you	might	not	be	familiar	with	yet	is	%	(modulus).	Modulus	(for</text>
<text top="289" left="54" width="406" height="20" font="2">example,	10	%	3)	finds	the	remainder	of	when	</text>
<text top="293" left="460" width="10" height="14" font="5">x</text>
<text top="289" left="471" width="122" height="20" font="2">	is	divided	by	</text>
<text top="293" left="593" width="10" height="14" font="5">y</text>
<text top="289" left="603" width="210" height="20" font="2">.	See	the	following	table</text>
<text top="315" left="54" width="118" height="20" font="2">for	examples:</text>
<text top="365" left="59" width="245" height="14" font="9"><b>Operator	(name) Example Answer</b></text>
<text top="409" left="59" width="51" height="15" font="10">+	(plus)</text>
<text top="409" left="184" width="33" height="15" font="10">7	+	3</text>
<text top="409" left="252" width="16" height="15" font="10">10</text>
<text top="451" left="59" width="60" height="15" font="10">-	(minus)</text>
<text top="451" left="184" width="30" height="15" font="10">8	-	5</text>
<text top="451" left="252" width="8" height="15" font="10">3</text>
<text top="493" left="59" width="58" height="15" font="10">*	(times)</text>
<text top="493" left="184" width="24" height="15" font="10">5*6</text>
<text top="493" left="252" width="16" height="15" font="10">30</text>
<text top="535" left="59" width="71" height="15" font="10">/	(division)</text>
<text top="535" left="184" width="29" height="15" font="10">12/6</text>
<text top="535" left="252" width="8" height="15" font="10">2</text>
<text top="578" left="59" width="84" height="15" font="10">%	(modulus)</text>
<text top="578" left="184" width="46" height="15" font="10">10	%	3</text>
<text top="578" left="252" width="257" height="15" font="10">1	(because	10/3	is	3	the	remainder	=	1).</text>
<text top="621" left="54" width="734" height="20" font="2">However,	we	often	don’t	want	to	do	math	in	this	manner.	Instead,	we	usually	want	to</text>
<text top="647" left="54" width="739" height="20" font="2">change	the	value	of	a	variable	by	a	certain	computed	amount.	This	is	a	concept	that	is</text>
<text top="673" left="54" width="684" height="20" font="2">harder	to	understand.	Say	the	player	encounters	an	imp	and	is	dealt	15	damage.</text>
<text top="710" left="54" width="774" height="20" font="2">The	following	line	of	code	will	be	used	to	reduce	the	player’s	hp	by	15	(believe	it	or	not):</text>
<text top="753" left="54" width="570" height="14" font="5">hp	=	hp	-	15;																		//	probably	confusing	:)</text>
<text top="784" left="54" width="775" height="20" font="2">You	might	ask	why.	Because	on	the	right-hand	side,	we	are	computing	a	new	value	for	hp</text>
<text top="810" left="54" width="7" height="20" font="2">(</text>
<text top="815" left="61" width="52" height="14" font="5">hp-15</text>
<text top="810" left="113" width="686" height="20" font="2">).	After	the	new	value	for	hp	is	found	(15	less	than	what	it	was	before),	the	new</text>
<text top="836" left="54" width="311" height="20" font="2">value	is	written	into	the	hp	variable.</text>
<text top="874" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="913" left="54" width="56" height="19" font="3"><b>Pitfall</b></text>
<text top="950" left="54" width="707" height="20" font="2">An	uninitialized	variable	has	the	bit	pattern	that	was	held	in	memory	for	it	before.</text>
<text top="976" left="54" width="739" height="20" font="2">Declaring	a	variable	does	not	clear	the	memory.	So,	say	we	used	the	following	line	of</text>
<text top="1002" left="54" width="47" height="20" font="2">code:</text>
<text top="1045" left="54" width="73" height="14" font="5">int	hp;</text>
<text top="1065" left="54" width="135" height="14" font="5">hp	=	hp	-	15;</text>
<text top="1097" left="54" width="718" height="20" font="2">The	second	line	of	code	reduces	the	hp	by	15	from	its	previous	value.	What	was	its</text>
<text top="1123" left="54" width="654" height="20" font="2">previous	value	if	we	never	set	hp	=	100	or	so?	It	could	be	0,	but	not	always.</text>
<text top="1159" left="54" width="764" height="20" font="2">One	of	the	most	common	errors	is	to	proceed	with	using	a	variable	without	initializing	it</text>
<text top="1185" left="54" width="40" height="20" font="2">first.</text>
</page>
<page number="95" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="11" size="10" family="Times" color="#000000"/>
<text top="57" left="54" width="438" height="20" font="2">The	following	is	a	shorthand	syntax	for	doing	this:</text>
<text top="101" left="54" width="93" height="14" font="5">hp	-=	15;</text>
<text top="132" left="54" width="73" height="20" font="2">Besides	</text>
<text top="136" left="127" width="21" height="14" font="5">-=</text>
<text top="132" left="147" width="686" height="20" font="2">,	you	can	use	+=	to	add	some	amount	to	a	variable,	*=	to	multiply	a	variable	by</text>
<text top="158" left="54" width="481" height="20" font="2">an	amount,	and	/=	to	divide	a	variable	by	some	amount.</text>
<text top="196" left="54" width="99" height="22" font="8"><b>Exercises</b></text>
<text top="235" left="54" width="214" height="20" font="2">Write	down	the	value	of	</text>
<text top="239" left="268" width="10" height="14" font="5">x</text>
<text top="235" left="279" width="517" height="20" font="2">	after	performing	the	following	OPS;	then,	check	with</text>
<text top="260" left="54" width="128" height="20" font="2">your	compiler:</text>
<text top="311" left="59" width="64" height="14" font="9"><b>Exercises</b></text>
<text top="311" left="221" width="64" height="14" font="9"><b>Solutions</b></text>
<text top="356" left="59" width="140" height="10" font="11">int	x	=	4;	x	+=	4;</text>
<text top="355" left="221" width="8" height="15" font="10">8</text>
<text top="398" left="59" width="124" height="10" font="11">int	x	=	9;	x-=2;</text>
<text top="397" left="221" width="8" height="15" font="10">7</text>
<text top="440" left="59" width="140" height="10" font="11">int	x	=	900;	x/=2;</text>
<text top="439" left="221" width="24" height="15" font="10">450</text>
<text top="482" left="59" width="132" height="10" font="11">int	x	=	50;	x*=2;</text>
<text top="481" left="221" width="24" height="15" font="10">100</text>
<text top="525" left="59" width="140" height="10" font="11">int	x	=	1;	x	+=	1;</text>
<text top="524" left="221" width="8" height="15" font="10">2</text>
<text top="567" left="59" width="155" height="10" font="11">int	x	=	2;	x	-=	200;</text>
<text top="566" left="221" width="30" height="15" font="10">-198</text>
<text top="609" left="59" width="124" height="10" font="11">int	x	=	5;	x*=5;</text>
<text top="608" left="221" width="16" height="15" font="10">25</text>
</page>
<page number="96" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="425" height="32" font="7"><b>Generalized	variable	syntax</b></text>
<text top="110" left="54" width="750" height="20" font="2">In	the	previous	section,	you	learned	that	every	piece	of	data	that	you	save	in	C++	has	a</text>
<text top="136" left="54" width="752" height="20" font="2">type.	All	variables	are	created	in	the	same	way;	in	C++,	variable	declarations	are	of	the</text>
<text top="162" left="54" width="48" height="20" font="2">form:</text>
<text top="205" left="54" width="269" height="14" font="5">variableType	variableName;</text>
<text top="237" left="54" width="39" height="20" font="2">The	</text>
<text top="241" left="93" width="124" height="14" font="5">variableType</text>
<text top="237" left="217" width="596" height="20" font="2">	tells	you	what	type	of	data	we	are	going	to	store	in	our	variable.	The</text>
<text top="267" left="54" width="124" height="14" font="5">variableName</text>
<text top="263" left="178" width="558" height="20" font="2">	is	the	symbol	we’ll	use	to	read	or	write	to	that	piece	of	memory.</text>
</page>
<page number="97" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="230" height="32" font="7"><b>Primitive	types</b></text>
<text top="110" left="54" width="739" height="20" font="2">We	previously	talked	about	how	all	the	data	inside	a	computer	will	at	some	point	be	a</text>
<text top="136" left="54" width="706" height="20" font="2">number.	Your	computer	code	is	responsible	for	interpreting	that	number	correctly.</text>
<text top="173" left="54" width="748" height="20" font="2">It	is	said	that	C++	only	defines	a	few	basic	data	types,	as	shown	in	the	following	table:</text>
<text top="224" left="59" width="31" height="10" font="11">Char</text>
<text top="223" left="113" width="240" height="15" font="10">A	single	letter,	such	as	‘a’,	‘b’,	or	‘+’</text>
<text top="266" left="59" width="39" height="10" font="11">Short</text>
<text top="265" left="113" width="233" height="15" font="10">An	integer	from	-32,767	to	+32,768</text>
<text top="309" left="59" width="23" height="10" font="11">Int</text>
<text top="307" left="113" width="330" height="15" font="10">An	integer	from	-2,147,483,647	to	+2,147,483,648</text>
<text top="351" left="59" width="39" height="10" font="11">Float</text>
<text top="350" left="113" width="338" height="15" font="10">Any	decimal	value	from	approx.	-1x1038	to	1x1038</text>
<text top="393" left="59" width="47" height="10" font="11">Double</text>
<text top="392" left="113" width="354" height="15" font="10">Any	decimal	value	from	approx.	-1x10308	to	1x10308</text>
<text top="435" left="59" width="31" height="10" font="11">Bool</text>
<text top="434" left="113" width="77" height="15" font="10">true	or	false</text>
<text top="478" left="54" width="733" height="20" font="2">There	are	unsigned	versions	of	each	of	the	variable	types	mentioned	in	the	preceding</text>
<text top="504" left="54" width="709" height="20" font="2">table.	An	unsigned	variable	can	contain	natural	numbers,	including	0	(x	&gt;=	0).	An</text>
<text top="529" left="54" width="83" height="20" font="2">unsigned	</text>
<text top="534" left="137" width="52" height="14" font="5">short</text>
<text top="529" left="189" width="484" height="20" font="2">,	for	example,	might	have	a	value	between	0	and	65535.</text>
<text top="568" left="54" width="50" height="22" font="8"><b>Note</b></text>
<text top="606" left="54" width="763" height="20" font="2">If	you’re	further	interested	in	the	difference	between	float	and	double,	please	feel	free	to</text>
<text top="632" left="54" width="743" height="20" font="2">look	it	up	on	the	Internet.	I	will	keep	my	explanations	only	to	the	most	important	C++</text>
<text top="658" left="54" width="757" height="20" font="2">concepts	used	for	games.	If	you	are	curious	about	something	that’s	covered	by	this	text,</text>
<text top="684" left="54" width="187" height="20" font="2">feel	free	to	look	it	up.</text>
<text top="721" left="54" width="774" height="20" font="2">It	turns	out	that	these	simple	data	types	alone	can	be	used	to	construct	arbitrarily	complex</text>
<text top="747" left="54" width="779" height="20" font="2">programs.	“How?”	you	ask.	Isn’t	it	hard	to	build	a	3D	game	using	just	floats	and	integers?</text>
<text top="783" left="54" width="751" height="20" font="2">It	is	not	really	difficult	to	build	a	game	from	float	and	int,	but	more	complex	data	types</text>
<text top="809" left="54" width="726" height="20" font="2">help.	It	will	be	tedious	and	messy	to	program	if	we	used	loose	floats	for	the	player’s</text>
<text top="835" left="54" width="75" height="20" font="2">position.</text>
</page>
<page number="98" position="absolute" top="0" left="0" height="1262" width="892">
<image top="556" left="54" width="270" height="158" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-98_1.jpg"/>
<text top="61" left="54" width="191" height="32" font="7"><b>Object	types</b></text>
<text top="110" left="54" width="730" height="20" font="2">C++	gives	you	structures	to	group	variables	together,	which	will	make	your	life	a	lot</text>
<text top="136" left="54" width="479" height="20" font="2">easier.	Take	an	example	of	the	following	block	of	code:</text>
<text top="180" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="200" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="221" left="54" width="559" height="14" font="5">struct	Vector								//	BEGIN	Vector	OBJECT	DEFINITION</text>
<text top="241" left="54" width="10" height="14" font="5">{</text>
<text top="262" left="54" width="570" height="14" font="5">		float	x,	y,	z;					//	x,	y	and	z	positions	all	floats</text>
<text top="282" left="54" width="549" height="14" font="5">};																			//	END	Vector	OBJECT	DEFINITION.</text>
<text top="303" left="54" width="435" height="14" font="5">//	The	computer	now	knows	what	a	Vector	is</text>
<text top="323" left="54" width="249" height="14" font="5">//	So	we	can	create	one.</text>
<text top="344" left="54" width="104" height="14" font="5">int	main()</text>
<text top="364" left="54" width="10" height="14" font="5">{</text>
<text top="385" left="54" width="497" height="14" font="5">		Vector	v;	//	Create	a	Vector	instance	called	v</text>
<text top="405" left="54" width="487" height="14" font="5">		v.x=20,	v.y=30,	v.z=40;	//	assign	some	values</text>
<text top="426" left="54" width="766" height="14" font="5">		cout	&lt;&lt;	&#34;A	3-space	vector	at	&#34;	&lt;&lt;	v.x	&lt;&lt;	&#34;,	&#34;	&lt;&lt;	v.y	&lt;&lt;	&#34;,	&#34;	&lt;&lt;		v.z	&lt;&lt;	</text>
<text top="446" left="54" width="52" height="14" font="5">endl;</text>
<text top="467" left="54" width="10" height="14" font="5">}</text>
<text top="498" left="54" width="773" height="20" font="2">The	way	this	looks	in	memory	is	pretty	intuitive;	a	Vector	is	just	a	chunk	of	memory	with</text>
<text top="524" left="54" width="393" height="20" font="2">three	floats,	as	shown	in	the	following	figure:</text>
<text top="785" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="823" left="54" width="591" height="20" font="2">Don’t	confuse	the	struct	Vector	in	the	preceding	screenshot	with	the	</text>
<text top="828" left="645" width="114" height="14" font="5">std::vector</text>
<text top="823" left="759" width="55" height="20" font="2">	of	the</text>
<text top="849" left="54" width="736" height="20" font="2">STL.	The	Vector	object	above	is	meant	to	represent	a	three-space	vector,	while	STL’s</text>
<text top="880" left="54" width="114" height="14" font="5">std::vector</text>
<text top="875" left="168" width="380" height="20" font="2">	type	represents	a	sized	collection	of	values.</text>
<text top="912" left="54" width="577" height="20" font="2">Here	are	a	couple	of	review	notes	about	the	preceding	code	listing:</text>
<text top="949" left="54" width="774" height="20" font="2">First,	even	before	we	use	our	Vector	object	type,	we	have	to	define	it.	C++	does	not	come</text>
<text top="975" left="54" width="781" height="20" font="2">with	built-in	types	for	math	vectors	(it	only	supports	scalar	numbers,	and	they	thought	that</text>
<text top="1000" left="54" width="743" height="20" font="2">was	enough!).	So,	C++	lets	you	build	your	own	object	constructions	to	make	your	life</text>
<text top="1026" left="54" width="381" height="20" font="2">easier.	We	first	had	the	following	definition:</text>
<text top="1070" left="54" width="559" height="14" font="5">struct	Vector								//	BEGIN	Vector	OBJECT	DEFINITION</text>
<text top="1090" left="54" width="10" height="14" font="5">{</text>
<text top="1111" left="54" width="580" height="14" font="5">		float	x,	y,	z;					//	x,	y,	and	z	positions	all	floats</text>
<text top="1131" left="54" width="549" height="14" font="5">};																			//	END	Vector	OBJECT	DEFINITION.</text>
<text top="1163" left="54" width="740" height="20" font="2">This	it	tells	the	computer	what	a	Vector	is	(it’s	3	floats,	all	of	which	are	declared	to	be</text>
<text top="1188" left="54" width="748" height="20" font="2">sitting	next	to	each	other	in	the	memory).	The	way	a	Vector	will	look	in	the	memory	is</text>
</page>
<page number="99" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="231" height="20" font="2">shown	in	preceding	figure.</text>
<text top="94" left="54" width="650" height="20" font="2">Next,	we	use	our	Vector	object	definition	to	create	a	Vector	instance	called	</text>
<text top="99" left="704" width="10" height="14" font="5">v</text>
<text top="94" left="714" width="6" height="20" font="2">:</text>
<text top="137" left="54" width="476" height="14" font="5">Vector	v;	//	Create	a	Vector	instance	called	v</text>
<text top="169" left="54" width="39" height="20" font="2">The	</text>
<text top="173" left="93" width="62" height="14" font="5">struct</text>
<text top="169" left="155" width="606" height="20" font="2">	Vector	definition	doesn’t	actually	create	a	Vector	object.	You	can’t	do</text>
<text top="199" left="54" width="124" height="14" font="5">Vector.x	=	1</text>
<text top="195" left="178" width="656" height="20" font="2">.	“Which	object	instance	are	you	talking	about?”	the	C++	compiler	will	ask.</text>
<text top="221" left="54" width="781" height="20" font="2">You	need	to	create	a	Vector	instance	first,	such	as	Vector	v1;	then,	you	can	do	assignments</text>
<text top="246" left="54" width="313" height="20" font="2">on	the	v1	instance,	such	as	v1.x	=	0.</text>
<text top="283" left="54" width="394" height="20" font="2">We	then	use	this	instance	to	write	values	into	</text>
<text top="288" left="448" width="10" height="14" font="5">v</text>
<text top="283" left="459" width="6" height="20" font="2">:</text>
<text top="326" left="54" width="466" height="14" font="5">v.x=20,	v.y=30,	v.z=40;	//	assign	some	values</text>
<text top="359" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="398" left="54" width="776" height="20" font="2">We	used	commas	in	the	preceding	code	to	initialize	a	bunch	of	variables	on	the	same	line.</text>
<text top="424" left="54" width="739" height="20" font="2">This	is	okay	in	C++.	Although	you	can	do	each	variable	on	its	own	line,	the	approach</text>
<text top="450" left="54" width="204" height="20" font="2">shown	here	is	okay	too.</text>
<text top="486" left="54" width="104" height="20" font="2">This	makes	</text>
<text top="491" left="158" width="10" height="14" font="5">v</text>
<text top="486" left="169" width="533" height="20" font="2">	look	as	in	the	preceding	screenshot.	Then,	we	print	them	out:</text>
<text top="530" left="54" width="746" height="14" font="5">cout	&lt;&lt;	&#34;A	3-space	vector	at	&#34;	&lt;&lt;	v.x	&lt;&lt;	&#34;,	&#34;	&lt;&lt;	v.y	&lt;&lt;	&#34;,	&#34;	&lt;&lt;		v.z	&lt;&lt;	</text>
<text top="550" left="54" width="52" height="14" font="5">endl;</text>
<text top="581" left="54" width="773" height="20" font="2">In	both	the	lines	of	code	here,	we	access	the	individual	data	members	inside	the	object	by</text>
<text top="607" left="54" width="171" height="20" font="2">simply	using	a	dot	(</text>
<text top="612" left="225" width="10" height="14" font="5">.</text>
<text top="607" left="236" width="18" height="20" font="2">).	</text>
<text top="612" left="254" width="31" height="14" font="5">v.x</text>
<text top="607" left="285" width="114" height="20" font="2">	refers	to	the	</text>
<text top="612" left="399" width="10" height="14" font="5">x</text>
<text top="607" left="409" width="228" height="20" font="2">	member	inside	the	object	</text>
<text top="612" left="637" width="10" height="14" font="5">v</text>
<text top="607" left="648" width="174" height="20" font="2">.	Each	Vector	object</text>
<text top="633" left="54" width="429" height="20" font="2">will	have	exactly	three	floats	inside	it:	one	called	</text>
<text top="638" left="483" width="10" height="14" font="5">x</text>
<text top="633" left="493" width="104" height="20" font="2">,	one	called	</text>
<text top="638" left="597" width="10" height="14" font="5">y</text>
<text top="633" left="608" width="141" height="20" font="2">,	and	one	called	</text>
<text top="638" left="748" width="10" height="14" font="5">z</text>
<text top="633" left="759" width="5" height="20" font="2">.</text>
<text top="671" left="54" width="183" height="22" font="8"><b>Exercise	–	Player</b></text>
<text top="710" left="54" width="772" height="20" font="2">Define	a	C++	data	struct	for	a	Player	object.	Then,	create	an	instance	of	your	Player	class</text>
<text top="736" left="54" width="397" height="20" font="2">and	fill	each	of	the	data	members	with	values.</text>
<text top="773" left="54" width="77" height="19" font="3"><b>Solution</b></text>
<text top="809" left="54" width="727" height="20" font="2">Let’s	declare	our	Player	object.	We	want	to	group	together	everything	to	do	with	the</text>
<text top="835" left="54" width="750" height="20" font="2">player	into	the	Player	object.	We	do	this	so	that	the	code	is	neat	and	tidy.	The	code	you</text>
<text top="861" left="54" width="713" height="20" font="2">read	in	Unreal	Engine	will	use	objects	such	as	these	everywhere;	so,	pay	attention:</text>
<text top="904" left="54" width="135" height="14" font="5">struct	Player</text>
<text top="925" left="54" width="10" height="14" font="5">{</text>
<text top="945" left="54" width="145" height="14" font="5">		string	name;</text>
<text top="966" left="54" width="93" height="14" font="5">		int	hp;</text>
<text top="986" left="54" width="186" height="14" font="5">		Vector	position;</text>
<text top="1007" left="54" width="466" height="14" font="5">};	//	Don't	forget	this	semicolon	at	the	end!</text>
<text top="1028" left="54" width="104" height="14" font="5">int	main()</text>
<text top="1048" left="54" width="10" height="14" font="5">{</text>
<text top="1069" left="54" width="383" height="14" font="5">		//	create	an	object	of	type	Player,</text>
<text top="1089" left="54" width="363" height="14" font="5">		Player	me;	//	instance	named	'me'</text>
<text top="1110" left="54" width="228" height="14" font="5">		me.name	=	&#34;William&#34;;</text>
<text top="1130" left="54" width="176" height="14" font="5">		me.hp	=	100.0f;</text>
<text top="1151" left="54" width="518" height="14" font="5">		me.position.x	=	me.position.y	=	me.position.z=0;</text>
<text top="1171" left="54" width="10" height="14" font="5">}</text>
</page>
<page number="100" position="absolute" top="0" left="0" height="1262" width="892">
<image top="480" left="54" width="432" height="215" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-100_1.jpg"/>
<text top="57" left="54" width="753" height="20" font="2">The	struct	Player	definition	is	what	tells	the	computer	how	a	Player	object	is	laid	out	in</text>
<text top="83" left="54" width="76" height="20" font="2">memory.</text>
<text top="121" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="160" left="54" width="743" height="20" font="2">I	hope	you	noticed	the	mandatory	semicolon	at	the	end	of	the	struct	declaration.	struct</text>
<text top="186" left="54" width="780" height="20" font="2">object	declarations	need	to	have	a	semicolon	at	the	end,	but	functions	do	not.	This	is	just	a</text>
<text top="212" left="54" width="298" height="20" font="2">C++	rule	that	you	must	remember.</text>
<text top="249" left="54" width="770" height="20" font="2">Inside	a	Player	object,	we	declared	a	string	for	the	player’s	name,	a	float	for	his	hp,	and	a</text>
<text top="275" left="54" width="377" height="20" font="2">Vector	object	for	his	complete	xyz	position.</text>
<text top="311" left="54" width="711" height="20" font="2">When	I	say	object,	I	mean	a	C++	struct	(or	later,	we	will	introduce	the	term	class).</text>
<text top="348" left="54" width="632" height="20" font="2">Wait!	We	put	a	Vector	object	inside	a	Player	object!	Yes,	you	can	do	that.</text>
<text top="385" left="54" width="780" height="20" font="2">After	the	definition	of	what	a	Player	object	has	inside	it,	we	actually	create	a	Player	object</text>
<text top="411" left="54" width="390" height="20" font="2">instance	called	me	and	assign	it	some	values.</text>
<text top="447" left="54" width="650" height="20" font="2">After	the	assignment,	the	me	object	looks	as	shown	in	the	following	figure:</text>
</page>
<page number="101" position="absolute" top="0" left="0" height="1262" width="892">
<image top="661" left="54" width="540" height="189" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-101_1.jpg"/>
<text top="61" left="54" width="127" height="32" font="7"><b>Pointers</b></text>
<text top="110" left="54" width="785" height="20" font="2">A	particularly	tricky	concept	to	grasp	is	the	concept	of	pointers.	Pointers	aren’t	that	hard	to</text>
<text top="136" left="54" width="480" height="20" font="2">understand	but	can	take	a	while	to	get	a	firm	handle	on.</text>
<text top="173" left="54" width="636" height="20" font="2">Say	we	have,	as	before,	declared	a	variable	of	the	type	Player	in	memory:</text>
<text top="216" left="54" width="104" height="14" font="5">Player	me;</text>
<text top="237" left="54" width="207" height="14" font="5">me.name	=	&#34;William&#34;;</text>
<text top="257" left="54" width="155" height="14" font="5">me.hp	=	100.0f;</text>
<text top="289" left="54" width="340" height="20" font="2">We	now	declare	a	pointer	to	the	Player:</text>
<text top="332" left="54" width="528" height="14" font="5">Player*	ptrMe;															//	Declaring	a	pointer</text>
<text top="363" left="54" width="39" height="20" font="2">The	</text>
<text top="367" left="93" width="10" height="14" font="5">*</text>
<text top="363" left="103" width="487" height="20" font="2">	characters	usually	make	things	special.	In	this	case,	the	</text>
<text top="367" left="590" width="10" height="14" font="5">*</text>
<text top="363" left="600" width="66" height="20" font="2">	makes	</text>
<text top="367" left="666" width="52" height="14" font="5">ptrMe</text>
<text top="363" left="718" width="110" height="20" font="2">	special.	The</text>
<text top="393" left="54" width="10" height="14" font="5">*</text>
<text top="389" left="64" width="133" height="20" font="2">	is	what	makes	</text>
<text top="393" left="197" width="52" height="14" font="5">ptrMe</text>
<text top="389" left="249" width="129" height="20" font="2">	a	pointer	type.</text>
<text top="426" left="54" width="185" height="20" font="2">We	now	want	to	link	</text>
<text top="430" left="239" width="52" height="14" font="5">ptrMe</text>
<text top="426" left="290" width="60" height="20" font="2">	to	me:</text>
<text top="469" left="54" width="414" height="14" font="5">ptrMe	=	&amp;me;																		//	LINKAGE</text>
<text top="502" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="540" left="54" width="756" height="20" font="2">This	linkage	step	is	very	important.	If	you	don’t	link	the	pointer	to	an	object	before	you</text>
<text top="566" left="54" width="480" height="20" font="2">use	the	pointer,	you	will	get	a	memory	access	violation.</text>
<text top="607" left="54" width="52" height="14" font="5">ptrMe</text>
<text top="603" left="106" width="414" height="20" font="2">	now	refers	to	the	same	object	as	me.	Changing	</text>
<text top="607" left="520" width="52" height="14" font="5">ptrMe</text>
<text top="603" left="572" width="250" height="20" font="2">	will	change	me,	as	shown	in</text>
<text top="629" left="54" width="179" height="20" font="2">the	following	figure:</text>
</page>
<page number="102" position="absolute" top="0" left="0" height="1262" width="892">
<image top="467" left="54" width="540" height="189" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-102_1.jpg"/>
<text top="61" left="54" width="345" height="32" font="7"><b>What	can	pointers	do?</b></text>
<text top="110" left="54" width="782" height="20" font="2">When	we	set	up	the	linkage	between	the	pointer	variable	and	what	it	is	pointing	to,	we	can</text>
<text top="136" left="54" width="527" height="20" font="2">manipulate	the	variable	that	is	pointed	to	through	the	pointer.</text>
<text top="173" left="54" width="750" height="20" font="2">One	use	of	pointers	is	to	refer	to	the	same	object	from	several	different	locations	of	the</text>
<text top="199" left="54" width="766" height="20" font="2">code.	The	Player	object	is	a	good	candidate	for	being	pointed	to.	You	can	create	as	many</text>
<text top="225" left="54" width="739" height="20" font="2">pointers	as	you	wish	to	the	same	object.	Objects	that	are	pointed	to	do	not	necessarily</text>
<text top="251" left="54" width="748" height="20" font="2">know	that	they	are	being	pointed	at,	but	changes	can	be	made	to	the	object	through	the</text>
<text top="277" left="54" width="75" height="20" font="2">pointers.</text>
<text top="313" left="54" width="710" height="20" font="2">For	instance,	say	the	player	got	attacked.	A	reduction	in	his	hp	will	result,	and	this</text>
<text top="339" left="54" width="629" height="20" font="2">reduction	will	be	done	using	the	pointer,	as	shown	in	the	following	code:</text>
<text top="383" left="54" width="559" height="14" font="5">ptrMe-&gt;hp	-=	33;						//	reduced	the	player's	hp	by	33</text>
<text top="403" left="54" width="497" height="14" font="5">ptrMe-&gt;name	=	&#34;John&#34;;//	changed	his	name	to	John</text>
<text top="434" left="54" width="350" height="20" font="2">Here’s	how	the	Player	object	looks	now:</text>
<text top="725" left="54" width="141" height="20" font="2">So,	we	changed	</text>
<text top="729" left="195" width="73" height="14" font="5">me.name</text>
<text top="725" left="268" width="117" height="20" font="2">	by	changing	</text>
<text top="729" left="385" width="114" height="14" font="5">ptrMe-&gt;name</text>
<text top="725" left="499" width="88" height="20" font="2">.	Because	</text>
<text top="729" left="587" width="52" height="14" font="5">ptrMe</text>
<text top="725" left="639" width="192" height="20" font="2">	points	to	me,	changes</text>
<text top="751" left="54" width="73" height="20" font="2">through	</text>
<text top="755" left="127" width="52" height="14" font="5">ptrMe</text>
<text top="751" left="178" width="161" height="20" font="2">	affect	me	directly.</text>
<text top="788" left="54" width="319" height="20" font="2">Besides	the	funky	arrow	syntax	(use	</text>
<text top="792" left="373" width="21" height="14" font="5">-&gt;</text>
<text top="788" left="394" width="425" height="20" font="2">	when	the	variable	is	a	pointer),	this	concept	isn’t</text>
<text top="814" left="54" width="231" height="20" font="2">all	that	hard	to	understand.</text>
</page>
<page number="103" position="absolute" top="0" left="0" height="1262" width="892">
<image top="479" left="54" width="540" height="239" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-103_1.jpg"/>
<text top="61" left="54" width="342" height="32" font="7"><b>Address	of	operator	&amp;</b></text>
<text top="110" left="54" width="184" height="20" font="2">Notice	the	use	of	the	</text>
<text top="115" left="238" width="10" height="14" font="5">&amp;</text>
<text top="110" left="248" width="388" height="20" font="2">	symbol	in	the	preceding	code	example.	The	</text>
<text top="115" left="636" width="10" height="14" font="5">&amp;</text>
<text top="110" left="647" width="149" height="20" font="2">	operator	gets	the</text>
<text top="136" left="54" width="713" height="20" font="2">memory	address	of	a	variable.	A	variable’s	memory	address	is	where	it	lives	in	the</text>
<text top="162" left="54" width="741" height="20" font="2">computer	memory	space.	C++	is	able	to	get	the	memory	address	of	any	object	in	your</text>
<text top="188" left="54" width="707" height="20" font="2">program’s	memory.	The	address	of	a	variable	is	unique	and	also,	kind	of,	random.</text>
<text top="225" left="54" width="410" height="20" font="2">Say,	we	print	the	address	of	an	integer	variable	</text>
<text top="229" left="464" width="10" height="14" font="5">x</text>
<text top="225" left="474" width="105" height="20" font="2">,	as	follows:</text>
<text top="268" left="54" width="114" height="14" font="5">int	x	=	22;</text>
<text top="289" left="54" width="466" height="14" font="5">cout	&lt;&lt;	&amp;x	&lt;&lt;	endl;	//	print	the	address	of	x</text>
<text top="320" left="54" width="573" height="20" font="2">On	the	first	run	of	the	program,	my	computer	prints	the	following:</text>
<text top="363" left="54" width="83" height="14" font="5">0023F744</text>
<text top="394" left="54" width="230" height="20" font="2">This	number	(the	value	of	</text>
<text top="399" left="284" width="21" height="14" font="5">&amp;x</text>
<text top="394" left="304" width="379" height="20" font="2">)	is	just	the	memory	cell	where	the	variable	</text>
<text top="399" left="684" width="10" height="14" font="5">x</text>
<text top="394" left="694" width="135" height="20" font="2">	is	stored.	What</text>
<text top="420" left="54" width="610" height="20" font="2">this	means	is	that	in	this	particular	launch	of	the	program,	the	variable	</text>
<text top="425" left="664" width="10" height="14" font="5">x</text>
<text top="420" left="675" width="108" height="20" font="2">	is	located	at</text>
<text top="446" left="54" width="570" height="20" font="2">memory	cell	number	0023F744,	as	shown	in	the	following	figure:</text>
<text top="787" left="54" width="508" height="20" font="2">Now,	create	and	assign	a	pointer	variable	to	the	address	of	</text>
<text top="791" left="562" width="10" height="14" font="5">x</text>
<text top="787" left="572" width="6" height="20" font="2">:</text>
<text top="830" left="54" width="83" height="14" font="5">int	*px;</text>
<text top="850" left="54" width="83" height="14" font="5">px	=	&amp;x;</text>
<text top="882" left="54" width="492" height="20" font="2">What	we’re	doing	here	is	storing	the	memory	address	of	</text>
<text top="886" left="546" width="10" height="14" font="5">x</text>
<text top="882" left="556" width="169" height="20" font="2">	inside	the	variable	</text>
<text top="886" left="725" width="21" height="14" font="5">px</text>
<text top="882" left="746" width="70" height="20" font="2">.	So,	we</text>
<text top="908" left="54" width="373" height="20" font="2">are	metaphorically	pointing	to	the	variable	</text>
<text top="912" left="427" width="10" height="14" font="5">x</text>
<text top="908" left="437" width="339" height="20" font="2">	using	another	different	variable	called	</text>
<text top="912" left="776" width="21" height="14" font="5">px</text>
<text top="908" left="797" width="5" height="20" font="2">.</text>
<text top="934" left="54" width="656" height="20" font="2">This	might	look	something	similar	to	what	is	shown	in	the	following	figure:</text>
</page>
<page number="104" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="756" height="337" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-104_1.jpg"/>
<image top="736" left="54" width="756" height="256" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-104_2.jpg"/>
<text top="459" left="54" width="159" height="20" font="2">Here,	the	variable	</text>
<text top="464" left="213" width="21" height="14" font="5">px</text>
<text top="459" left="234" width="272" height="20" font="2">	has	the	address	of	the	variable	</text>
<text top="464" left="506" width="10" height="14" font="5">x</text>
<text top="459" left="516" width="248" height="20" font="2">	inside	it.	In	other	words,	the</text>
<text top="485" left="54" width="75" height="20" font="2">variable	</text>
<text top="490" left="129" width="21" height="14" font="5">px</text>
<text top="485" left="150" width="414" height="20" font="2">	is	a	reference	to	another	variable.	Differencing	</text>
<text top="490" left="563" width="21" height="14" font="5">px</text>
<text top="485" left="584" width="250" height="20" font="2">	means	to	access	the	variable</text>
<text top="511" left="54" width="38" height="20" font="2">that	</text>
<text top="515" left="92" width="21" height="14" font="5">px</text>
<text top="511" left="112" width="401" height="20" font="2">	is	referencing.	Differencing	is	done	using	the	</text>
<text top="515" left="513" width="10" height="14" font="5">*</text>
<text top="511" left="523" width="75" height="20" font="2">	symbol:</text>
<text top="554" left="54" width="207" height="14" font="5">cout	&lt;&lt;	*px	&lt;&lt;	endl;</text>
<text top="587" left="54" width="186" height="22" font="8"><b>The	Null	pointers</b></text>
<text top="626" left="54" width="430" height="20" font="2">A	null	pointer	is	a	pointer	variable	with	the	value	</text>
<text top="630" left="484" width="10" height="14" font="5">0</text>
<text top="626" left="495" width="331" height="20" font="2">.	In	general,	most	programmers	like	to</text>
<text top="652" left="54" width="229" height="20" font="2">initialize	pointers	to	Null	(</text>
<text top="656" left="283" width="10" height="14" font="5">0</text>
<text top="652" left="293" width="545" height="20" font="2">)	on	the	creation	of	new	pointer	variables.	Computer	programs,</text>
<text top="677" left="54" width="384" height="20" font="2">in	general,	can’t	access	the	memory	address	</text>
<text top="682" left="438" width="10" height="14" font="5">0</text>
<text top="677" left="449" width="369" height="20" font="2">	(it	is	reserved),	so	if	you	try	to	reference	a</text>
<text top="703" left="54" width="659" height="20" font="2">Null	pointer,	your	program	will	crash,	as	shown	in	the	following	screenshot:</text>
<text top="1062" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="1101" left="54" width="586" height="20" font="2">Pointer	Fun	with	Binky	is	a	fun	video	about	pointers.	Take	a	look	at</text>
<text top="1127" left="54" width="416" height="20" font="1"><a href="http://www.youtube.com/watch?v=i49_SNt4yfk">http://www.youtube.com/watch?v=i49_SNt4yfk</a></text>
<text top="1127" left="470" width="5" height="20" font="2">.</text>
</page>
<page number="105" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="46" height="32" font="7"><b>cin</b></text>
<text top="115" left="54" width="31" height="14" font="5">cin</text>
<text top="110" left="85" width="628" height="20" font="2">	is	the	way	C++	traditionally	takes	input	from	the	user	into	the	program.	</text>
<text top="115" left="713" width="31" height="14" font="5">cin</text>
<text top="110" left="744" width="86" height="20" font="2">	is	easy	to</text>
<text top="136" left="54" width="746" height="20" font="2">use,	because	it	looks	at	the	type	of	variable	it	will	put	the	value	into	as	it	puts	it	in.	For</text>
<text top="162" left="54" width="541" height="20" font="2">example,	say	we	want	to	ask	the	user	his	age	and	store	it	in	an	</text>
<text top="167" left="595" width="31" height="14" font="5">int</text>
<text top="162" left="626" width="176" height="20" font="2">	variable.	We	can	do</text>
<text top="188" left="54" width="132" height="20" font="2">that	as	follows:</text>
<text top="231" left="54" width="373" height="14" font="5">cout	&lt;&lt;	&#34;What	is	your	age?&#34;	&lt;&lt;	endl;</text>
<text top="252" left="54" width="83" height="14" font="5">int	age;</text>
<text top="272" left="54" width="114" height="14" font="5">cin	&gt;&gt;	age;</text>
</page>
<page number="106" position="absolute" top="0" left="0" height="1262" width="892">
<image top="817" left="54" width="540" height="108" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-106_1.jpg"/>
<text top="61" left="54" width="113" height="32" font="7"><b>printf()</b></text>
<text top="110" left="54" width="209" height="20" font="2">Although	we	have	used	</text>
<text top="115" left="263" width="41" height="14" font="5">cout</text>
<text top="110" left="304" width="526" height="20" font="2">	to	print	out	variables	so	far,	you	need	to	know	about	another</text>
<text top="136" left="54" width="689" height="20" font="2">common	function	that	is	used	to	print	to	the	console.	This	function	is	called	the	</text>
<text top="141" left="743" width="62" height="14" font="5">printf</text>
<text top="162" left="54" width="122" height="20" font="2">function.	The	</text>
<text top="167" left="176" width="62" height="14" font="5">printf</text>
<text top="162" left="238" width="236" height="20" font="2">	function	is	included	in	the	</text>
<text top="167" left="474" width="104" height="14" font="5">&lt;iostream&gt;</text>
<text top="162" left="578" width="248" height="20" font="2">	library,	so	you	don’t	have	to</text>
<text top="192" left="54" width="83" height="14" font="5">#include</text>
<text top="188" left="137" width="589" height="20" font="2">	anything	extra	to	use	it.	Some	people	in	the	gaming	industry	prefer	</text>
<text top="192" left="726" width="62" height="14" font="5">printf</text>
<text top="188" left="788" width="22" height="20" font="2">	to</text>
<text top="218" left="54" width="41" height="14" font="5">cout</text>
<text top="214" left="95" width="301" height="20" font="2">	(I	know	I	do),	so	let’s	introduce	it.</text>
<text top="251" left="54" width="187" height="20" font="2">Let’s	proceed	to	how	</text>
<text top="255" left="241" width="83" height="14" font="5">printf()</text>
<text top="251" left="324" width="344" height="20" font="2">	works,	as	shown	in	the	following	code:</text>
<text top="294" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="315" left="54" width="176" height="14" font="5">#include	&lt;string&gt;</text>
<text top="335" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="356" left="54" width="104" height="14" font="5">int	main()</text>
<text top="376" left="54" width="10" height="14" font="5">{</text>
<text top="397" left="54" width="238" height="14" font="5">		char	character	=	'A';</text>
<text top="417" left="54" width="186" height="14" font="5">		int	integer	=	1;</text>
<text top="438" left="54" width="632" height="14" font="5">		printf(	&#34;integer	%d,	character	%c\n&#34;,	integer,	character	);</text>
<text top="458" left="54" width="10" height="14" font="5">}</text>
<text top="491" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="530" left="54" width="286" height="19" font="3"><b>Downloading	the	example	code</b></text>
<text top="566" left="54" width="551" height="20" font="2">You	can	download	the	example	code	files	from	your	account	at<a href="http://www.packtpub.com">	</a></text>
<text top="566" left="605" width="224" height="20" font="1"><a href="http://www.packtpub.com">http://www.packtpub.com</a></text>
<text top="592" left="54" width="710" height="20" font="2">for	all	the	Packt	Publishing	books	you	have	purchased.	If	you	purchased	this	book</text>
<text top="618" left="54" width="213" height="20" font="2">elsewhere,	you	can	visit	</text>
<text top="618" left="267" width="295" height="20" font="1"><a href="http://www.packtpub.com/support">http://www.packtpub.com/support</a></text>
<text top="618" left="562" width="272" height="20" font="2"><a href="http://www.packtpub.com/support">	</a>and	register	to	have	the	files	e-</text>
<text top="644" left="54" width="195" height="20" font="2">mailed	directly	to	you.</text>
<text top="681" left="54" width="759" height="20" font="2">We	start	with	a	format	string.	The	format	string	is	like	a	picture	frame,	and	the	variables</text>
<text top="707" left="54" width="359" height="20" font="2">will	get	plugged	in	at	the	locations	of	the	</text>
<text top="711" left="413" width="10" height="14" font="5">%</text>
<text top="707" left="423" width="408" height="20" font="2">	in	the	format	string.	Then,	the	entire	thing	gets</text>
<text top="733" left="54" width="774" height="20" font="2">dumped	out	to	the	console.	In	the	preceding	example,	the	integer	variable	will	be	plugged</text>
<text top="758" left="54" width="241" height="20" font="2">into	the	location	of	the	first	</text>
<text top="763" left="295" width="10" height="14" font="5">%</text>
<text top="758" left="305" width="13" height="20" font="2">	(</text>
<text top="763" left="318" width="21" height="14" font="5">%d</text>
<text top="758" left="339" width="474" height="20" font="2">),	and	the	character	will	be	plugged	into	the	location	of</text>
<text top="784" left="54" width="97" height="20" font="2">the	second	</text>
<text top="789" left="151" width="10" height="14" font="5">%</text>
<text top="784" left="161" width="13" height="20" font="2">	(</text>
<text top="789" left="174" width="21" height="14" font="5">%c</text>
<text top="784" left="195" width="344" height="20" font="2">),	as	shown	in	the	following	screenshot:</text>
<text top="994" left="54" width="765" height="20" font="2">You	have	to	use	the	right	format	code	to	get	the	output	to	format	correctly;	take	a	look	at</text>
<text top="1020" left="54" width="169" height="20" font="2">the	following	table:</text>
<text top="1070" left="59" width="162" height="14" font="9"><b>Data	type Format	code</b></text>
<text top="1114" left="59" width="18" height="15" font="10">Int</text>
<text top="1114" left="134" width="22" height="15" font="10">%d</text>
<text top="1157" left="59" width="31" height="15" font="10">Char</text>
<text top="1157" left="134" width="21" height="15" font="10">%c</text>
</page>
<page number="107" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="59" width="40" height="15" font="10">String</text>
<text top="57" left="134" width="20" height="15" font="10">%s</text>
<text top="102" left="54" width="344" height="20" font="2">To	print	a	C++	string,	you	must	use	the	</text>
<text top="106" left="398" width="145" height="14" font="5">string.c_str()</text>
<text top="102" left="543" width="83" height="20" font="2">	function:</text>
<text top="145" left="54" width="197" height="14" font="5">string	s	=	&#34;Hello&#34;;</text>
<text top="165" left="54" width="363" height="14" font="5">printf(	&#34;string	%s\n&#34;,	s.c_str()	);</text>
<text top="197" left="54" width="39" height="20" font="2">The	</text>
<text top="201" left="93" width="93" height="14" font="5">s.c_str()</text>
<text top="197" left="186" width="451" height="20" font="2">	function	accesses	the	C	pointer	to	the	string,	which	</text>
<text top="201" left="638" width="62" height="14" font="5">printf</text>
<text top="197" left="700" width="60" height="20" font="2">	needs.</text>
<text top="233" left="54" width="775" height="20" font="2">If	you	use	the	wrong	format	code,	the	output	won’t	appear	correctly	or	the	program	might</text>
<text top="259" left="54" width="51" height="20" font="2">crash.</text>
<text top="298" left="54" width="89" height="22" font="8"><b>Exercise</b></text>
<text top="336" left="54" width="469" height="20" font="2">Ask	the	user	his	name	and	age	and	take	them	in	using	</text>
<text top="340" left="523" width="31" height="14" font="5">cin</text>
<text top="336" left="554" width="270" height="20" font="2">.	Then,	issue	a	greeting	for	him</text>
<text top="362" left="54" width="176" height="20" font="2">at	the	console	using	</text>
<text top="366" left="230" width="83" height="14" font="5">printf()</text>
<text top="362" left="313" width="46" height="20" font="2">	(not	</text>
<text top="366" left="359" width="41" height="14" font="5">cout</text>
<text top="362" left="400" width="13" height="20" font="2">).</text>
<text top="400" left="54" width="88" height="22" font="8"><b>Solution</b></text>
<text top="439" left="54" width="300" height="20" font="2">This	is	how	the	program	will	look:</text>
<text top="482" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="503" left="54" width="176" height="14" font="5">#include	&lt;string&gt;</text>
<text top="523" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="544" left="54" width="104" height="14" font="5">int	main()</text>
<text top="564" left="54" width="10" height="14" font="5">{</text>
<text top="585" left="54" width="269" height="14" font="5">		cout	&lt;&lt;	&#34;Name?&#34;	&lt;&lt;	endl;</text>
<text top="605" left="54" width="145" height="14" font="5">		string	name;</text>
<text top="626" left="54" width="145" height="14" font="5">		cin	&gt;&gt;	name;</text>
<text top="646" left="54" width="269" height="14" font="5">		cout	&lt;&lt;	&#34;Age?&#34;	&lt;&lt;	endl;	</text>
<text top="667" left="54" width="104" height="14" font="5">		int	age;</text>
<text top="687" left="54" width="135" height="14" font="5">		cin	&gt;&gt;	age;</text>
<text top="708" left="54" width="735" height="14" font="5">		cout	&lt;&lt;	&#34;Hello	&#34;	&lt;&lt;	name	&lt;&lt;	&#34;	I	see	you	have	attained	&#34;	&lt;&lt;	age		&lt;&lt;	&#34;	</text>
<text top="728" left="54" width="342" height="14" font="5">years.	Congratulations.&#34;	&lt;&lt;	endl;</text>
<text top="749" left="54" width="10" height="14" font="5">}</text>
<text top="781" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="820" left="54" width="581" height="20" font="2">A	string	is	actually	an	object	type.	Inside	it	is	just	a	bunch	of	chars!</text>
</page>
<page number="108" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="109" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="182" height="39" font="0"><b>Summary</b></text>
<text top="120" left="54" width="736" height="20" font="2">In	this	chapter,	we	spoke	about	variables	and	memory.	We	talked	about	mathematical</text>
<text top="146" left="54" width="504" height="20" font="2">OPS	on	variables	and	how	simple	they	were	in	C++.</text>
<text top="183" left="54" width="773" height="20" font="2">We	also	discussed	how	arbitrarily	complex	data	types	can	be	built	using	a	combination	of</text>
<text top="209" left="54" width="783" height="20" font="2">these	simpler	data	types,	such	as	floats,	integers,	and	characters.	Constructions	such	as	this</text>
<text top="235" left="54" width="155" height="20" font="2">are	called	objects.</text>
</page>
<page number="110" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="111" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="564" height="39" font="0"><b>Chapter	3.	If,	Else,	and	Switch</b></text>
<text top="120" left="54" width="781" height="20" font="2">In	the	previous	chapter,	we	discussed	the	importance	of	memory	and	how	it	can	be	used	to</text>
<text top="146" left="54" width="761" height="20" font="2">store	data	inside	a	computer.	We	spoke	about	how	memory	is	reserved	for	your	program</text>
<text top="172" left="54" width="755" height="20" font="2">using	variables,	and	how	we	can	include	different	types	of	information	in	our	variables.</text>
<text top="209" left="54" width="778" height="20" font="2">In	this	chapter,	we	will	talk	about	how	to	control	the	flow	of	our	program	and	how	we	can</text>
<text top="235" left="54" width="739" height="20" font="2">change	what	code	gets	executed	by	branching	the	code	using	control	flow	statements.</text>
<text top="260" left="54" width="565" height="20" font="2">Here,	we’ll	discuss	the	different	types	of	control	flow,	as	follows:</text>
<text top="297" left="97" width="111" height="20" font="2">If	statements</text>
<text top="323" left="97" width="426" height="20" font="2">How	to	check	whether	things	are	equal	using	the	</text>
<text top="328" left="523" width="21" height="14" font="5">==</text>
<text top="323" left="544" width="77" height="20" font="2">	operator</text>
<text top="349" left="97" width="134" height="20" font="2">Else	statements</text>
<text top="375" left="97" width="717" height="20" font="2">How	to	test	for	inequalities	(that	is,	how	to	check	whether	one	number	is	greater	or</text>
<text top="401" left="97" width="531" height="20" font="2">smaller	than	another	using	the	operators	&gt;,	&gt;=,	&lt;,	&lt;=,	and	!=)</text>
<text top="427" left="97" width="497" height="20" font="2">Using	logical	operators	(such	as	not	(!),	and	(&amp;&amp;),	or	(||))</text>
<text top="453" left="97" width="392" height="20" font="2">Our	first	example	project	with	Unreal	Engine</text>
<text top="479" left="97" width="298" height="20" font="2">Branching	in	more	than	two	ways:</text>
<text top="515" left="140" width="179" height="20" font="2">The	else	if	statement</text>
<text top="541" left="140" width="183" height="20" font="2">The	switch	statement</text>
</page>
<page number="112" position="absolute" top="0" left="0" height="1262" width="892">
<image top="230" left="54" width="162" height="300" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-112_1.jpg"/>
<text top="64" left="54" width="194" height="39" font="0"><b>Branching</b></text>
<text top="120" left="54" width="279" height="20" font="2">The	computer	code	we	wrote	in<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">	</a></text>
<text top="120" left="333" width="85" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">Chapter	2</a></text>
<text top="120" left="418" width="402" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">,</a>	<i>Variables	and	Memory</i>	went	in	one	direction:</text>
<text top="146" left="54" width="760" height="20" font="2">straight	down.	Sometimes,	we	might	want	to	be	able	to	skip	parts	of	the	code.	We	might</text>
<text top="172" left="54" width="732" height="20" font="2">want	the	code	to	be	able	to	branch	in	more	than	one	direction.	Schematically,	we	can</text>
<text top="198" left="54" width="335" height="20" font="2">represent	this	in	the	following	manner:</text>
<text top="567" left="396" width="101" height="20" font="4"><i>A	flowchart</i></text>
<text top="636" left="54" width="689" height="20" font="2">In	other	words,	we	want	the	option	to	not	run	certain	lines	of	code	under	certain</text>
<text top="662" left="54" width="771" height="20" font="2">conditions.	The	preceding	figure	is	called	a	flowchart.	According	to	this	flowchart,	if	and</text>
<text top="688" left="54" width="766" height="20" font="2">only	if	we	are	hungry,	then	we	will	go	prepare	a	sandwich,	eat	it,	and	then	go	and	rest	on</text>
<text top="714" left="54" width="734" height="20" font="2">the	couch.	If	we	are	not	hungry,	then	there	is	no	need	to	make	a	sandwich,	so	we	will</text>
<text top="740" left="54" width="216" height="20" font="2">simply	rest	on	the	couch.</text>
<text top="777" left="54" width="691" height="20" font="2">We’ll	use	flowcharts	in	this	book	only	sometimes,	but	in	UE4,	you	can	even	use</text>
<text top="803" left="54" width="605" height="20" font="2">flowcharts	to	program	your	game	(using	something	called	blueprints).</text>
<text top="841" left="54" width="50" height="22" font="8"><b>Note</b></text>
<text top="879" left="54" width="775" height="20" font="2">This	book	is	about	C++	code,	so	we	will	always	transform	our	flowcharts	into	actual	C++</text>
<text top="905" left="54" width="153" height="20" font="2">code	in	this	book.</text>
</page>
<page number="113" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="114" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="687" height="39" font="0"><b>Controlling	the	flow	of	your	program</b></text>
<text top="120" left="54" width="776" height="20" font="2">Ultimately,	what	we	want	is	the	code	to	branch	in	one	way	under	certain	conditions.	Code</text>
<text top="146" left="54" width="728" height="20" font="2">commands	that	change	which	line	of	code	gets	executed	next	are	called	control	flow</text>
<text top="172" left="54" width="489" height="20" font="2">statements.	The	most	basic	control	flow	statement	is	the	</text>
<text top="176" left="543" width="21" height="14" font="5">if</text>
<text top="172" left="564" width="257" height="20" font="2">	statement.	To	be	able	to	code</text>
<text top="202" left="54" width="21" height="14" font="5">if</text>
<text top="198" left="75" width="556" height="20" font="2">	statements,	we	first	need	a	way	to	check	the	value	of	a	variable.</text>
<text top="235" left="54" width="264" height="20" font="2">So,	to	start,	let’s	introduce	the	</text>
<text top="239" left="318" width="21" height="14" font="5">==</text>
<text top="235" left="338" width="478" height="20" font="2">	symbol,	which	is	used	to	check	the	value	of	a	variable.</text>
</page>
<page number="115" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="250" height="32" font="7"><b>The	==	operator</b></text>
<text top="110" left="54" width="747" height="20" font="2">In	order	to	check	whether	two	things	are	equal	in	C++,	we	need	to	use	not	one	but	two</text>
<text top="136" left="54" width="109" height="20" font="2">equal	signs	(</text>
<text top="141" left="163" width="21" height="14" font="5">==</text>
<text top="136" left="184" width="308" height="20" font="2">)	one	after	the	other,	as	shown	here:</text>
<text top="180" left="54" width="518" height="14" font="5">int	x	=	5;	//	as	you	know,	we	use	one	equals	sign	</text>
<text top="200" left="54" width="311" height="14" font="5">int	y	=	4;	//	for	assignment..</text>
<text top="221" left="54" width="404" height="14" font="5">//	but	we	need	to	use	two	equals	signs	</text>
<text top="241" left="54" width="497" height="14" font="5">//	to	check	if	variables	are	equal	to	each	other</text>
<text top="262" left="54" width="601" height="14" font="5">cout	&lt;&lt;	&#34;Is	x	equal	to	y?	C++	says:	&#34;	&lt;&lt;	(x	==	y)	&lt;&lt;	endl;</text>
<text top="293" left="54" width="587" height="20" font="2">If	you	run	the	preceding	code,	you	will	notice	that	the	output	is	this:</text>
<text top="336" left="54" width="300" height="14" font="5">Is	x	equal	to	y?	C++	says:	0	</text>
<text top="367" left="54" width="742" height="20" font="2">In	C++,	1	means	true,	and	0	means	false.	If	you	want	the	words	true	or	false	to	appear</text>
<text top="393" left="54" width="303" height="20" font="2">instead	of	1	and	0,	you	can	use	the	</text>
<text top="398" left="357" width="93" height="14" font="5">boolalpha</text>
<text top="393" left="451" width="232" height="20" font="2">	stream	manipulator	in	the	</text>
<text top="398" left="683" width="41" height="14" font="5">cout</text>
<text top="393" left="724" width="113" height="20" font="2">	line	of	code,</text>
<text top="419" left="54" width="128" height="20" font="2">as	shown	here:</text>
<text top="463" left="54" width="559" height="14" font="5">cout	&lt;&lt;	&#34;Is	x	equal	to	y?	C++	says:	&#34;	&lt;&lt;	boolalpha	&lt;&lt;	</text>
<text top="483" left="54" width="259" height="14" font="5">								(x	==	y)	&lt;&lt;	endl;</text>
<text top="514" left="54" width="39" height="20" font="2">The	</text>
<text top="519" left="93" width="21" height="14" font="5">==</text>
<text top="514" left="114" width="601" height="20" font="2">	operator	is	a	type	of	comparison	operator.	The	reason	why	C++	uses	</text>
<text top="519" left="715" width="21" height="14" font="5">==</text>
<text top="514" left="735" width="78" height="20" font="2">	to	check</text>
<text top="540" left="54" width="212" height="20" font="2">for	equality	and	not	just	</text>
<text top="545" left="266" width="10" height="14" font="5">=</text>
<text top="540" left="276" width="266" height="20" font="2">	is	that	we	already	used	up	the	</text>
<text top="545" left="542" width="10" height="14" font="5">=</text>
<text top="540" left="552" width="234" height="20" font="2">	symbol	for	the	assignment</text>
<text top="566" left="54" width="409" height="20" font="2">operator!	(see	the	<i>More	on	variables</i>	section	in<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">	</a></text>
<text top="566" left="463" width="85" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">Chapter	2</a></text>
<text top="566" left="548" width="270" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">,</a>	<i>Variables	and	Memory</i>).	If	we</text>
<text top="592" left="54" width="106" height="20" font="2">use	a	single	</text>
<text top="597" left="160" width="10" height="14" font="5">=</text>
<text top="592" left="170" width="430" height="20" font="2">	sign,	C++	will	assume	that	we	want	to	overwrite	</text>
<text top="597" left="601" width="10" height="14" font="5">x</text>
<text top="592" left="611" width="49" height="20" font="2">	with	</text>
<text top="597" left="660" width="10" height="14" font="5">y</text>
<text top="592" left="670" width="118" height="20" font="2">,	not	compare</text>
<text top="618" left="54" width="49" height="20" font="2">them.</text>
</page>
<page number="116" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="12" size="15" family="Times" color="#000000"/>
<image top="647" left="54" width="540" height="279" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-116_1.jpg"/>
<text top="61" left="54" width="313" height="32" font="7"><b>Coding	if	statements</b></text>
<text top="110" left="54" width="784" height="20" font="2">Now	that	we	have	the	double	equals	sign	under	our	belt,	let’s	code	the	flowchart.	The	code</text>
<text top="136" left="54" width="412" height="20" font="2">for	the	preceding	flowchart	figure	is	as	follows:</text>
<text top="180" left="54" width="559" height="14" font="5">bool	isHungry	=	true;		//	can	set	this	to	false	if	not</text>
<text top="200" left="54" width="342" height="14" font="5">																							//	hungry!</text>
<text top="221" left="54" width="663" height="14" font="5">if(	isHungry	==	true	)	//	only	go	inside	{	when	isHungry	is	true</text>
<text top="241" left="54" width="10" height="14" font="5">{</text>
<text top="262" left="54" width="394" height="14" font="5">		cout	&lt;&lt;	&#34;Preparing	snack..&#34;	&lt;&lt;	endl;</text>
<text top="282" left="54" width="321" height="14" font="5">		cout	&lt;&lt;	&#34;Eating	..	&#34;	&lt;&lt;	endl;</text>
<text top="303" left="54" width="10" height="14" font="5">}</text>
<text top="323" left="54" width="425" height="14" font="5">cout	&lt;&lt;	&#34;Sitting	on	the	couch..&#34;	&lt;&lt;	endl;</text>
<text top="344" left="54" width="10" height="14" font="5">}</text>
<text top="376" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="415" left="54" width="309" height="20" font="2">This	is	the	first	time	we	are	using	a	</text>
<text top="419" left="363" width="41" height="14" font="5">bool</text>
<text top="415" left="404" width="107" height="20" font="2">	variable!	A	</text>
<text top="419" left="511" width="41" height="14" font="5">bool</text>
<text top="415" left="553" width="266" height="20" font="2">	variable	either	holds	the	value</text>
<text top="445" left="54" width="41" height="14" font="5">true</text>
<text top="441" left="95" width="113" height="20" font="2">	or	the	value	</text>
<text top="445" left="208" width="52" height="14" font="5">false</text>
<text top="441" left="260" width="5" height="20" font="2">.</text>
<text top="478" left="54" width="182" height="20" font="2">First,	we	start	with	a	</text>
<text top="482" left="236" width="41" height="14" font="5">bool</text>
<text top="478" left="278" width="137" height="20" font="2">	variable	called	</text>
<text top="482" left="415" width="83" height="14" font="5">isHungry</text>
<text top="478" left="498" width="147" height="20" font="2">	and	just	set	it	to	</text>
<text top="482" left="645" width="41" height="14" font="5">true</text>
<text top="478" left="687" width="5" height="20" font="2">.</text>
<text top="514" left="54" width="146" height="20" font="2">Then,	we	use	an	</text>
<text top="519" left="200" width="21" height="14" font="5">if</text>
<text top="514" left="220" width="193" height="20" font="2">	statement,	as	follows:</text>
<text top="558" left="54" width="228" height="14" font="5">if(	isHungry	==	true	)</text>
<text top="589" left="54" width="762" height="20" font="2">The	if	statement	acts	like	a	guard	on	the	block	of	code	below	it.	(Remember	that	a	block</text>
<text top="615" left="54" width="364" height="20" font="2">of	code	is	a	group	of	code	encased	within	</text>
<text top="619" left="418" width="10" height="14" font="5">{</text>
<text top="615" left="428" width="42" height="20" font="2">	and	</text>
<text top="619" left="470" width="10" height="14" font="5">}</text>
<text top="615" left="481" width="13" height="20" font="2">.)</text>
<text top="963" left="175" width="398" height="20" font="4"><i>You	can	only	read	the	code	between	{	and	}	if	</i></text>
<text top="967" left="573" width="145" height="14" font="12"><i>isHungry==true</i></text>
<text top="1032" left="54" width="501" height="20" font="2">You	can	only	get	at	the	code	inside	the	curly	braces	when	</text>
<text top="1036" left="555" width="166" height="14" font="5">isHungry	==	true</text>
<text top="1032" left="721" width="105" height="20" font="2">.	Otherwise,</text>
<text top="1058" left="54" width="646" height="20" font="2">you	will	be	denied	access	and	forced	to	skip	over	that	entire	block	of	code.</text>
<text top="1096" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="1134" left="54" width="654" height="20" font="2">We	an	achieve	the	same	effect	by	simply	writing	the	following	line	of	code:</text>
<text top="1178" left="54" width="559" height="14" font="5">if(	isHungry	)					//	only	go	here	if	isHungry	is	true</text>
</page>
<page number="117" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="448" height="20" font="2">This	can	be	used	as	an	alternative	for	the	following:</text>
<text top="101" left="54" width="228" height="14" font="5">if(	isHungry	==	true	)</text>
<text top="132" left="54" width="285" height="20" font="2">The	reason	people	might	use	the	</text>
<text top="136" left="339" width="145" height="14" font="5">if(	isHungry	)</text>
<text top="132" left="484" width="293" height="20" font="2">	form	is	to	avoid	the	possibility	of</text>
<text top="158" left="54" width="228" height="20" font="2">making	mistakes.	Writing	</text>
<text top="162" left="282" width="218" height="14" font="5">if(	isHungry	=	true	)</text>
<text top="158" left="500" width="178" height="20" font="2">	by	accident	will	set	</text>
<text top="162" left="678" width="83" height="14" font="5">isHungry</text>
<text top="158" left="761" width="61" height="20" font="2">	to	true</text>
<text top="184" left="54" width="129" height="20" font="2">every	time	the	</text>
<text top="188" left="183" width="21" height="14" font="5">if</text>
<text top="184" left="204" width="518" height="20" font="2">	statement	is	hit!	To	avoid	this	possibility,	we	can	just	write	</text>
<text top="188" left="722" width="31" height="14" font="5">if(</text>
<text top="214" left="54" width="104" height="14" font="5">isHungry	)</text>
<text top="210" left="158" width="589" height="20" font="2">	instead.	Alternatively,	some	(wise)	people	use	what	are	called	Yoda</text>
<text top="236" left="54" width="312" height="20" font="2">conditions	to	check	an	if	statement:	</text>
<text top="240" left="366" width="228" height="14" font="5">if(	true	==	isHungry	)</text>
<text top="236" left="594" width="224" height="20" font="2">.	The	reason	we	write	the	</text>
<text top="240" left="817" width="21" height="14" font="5">if</text>
<text top="262" left="54" width="460" height="20" font="2">statement	in	this	way	is	that,	if	we	accidentally	write	</text>
<text top="266" left="514" width="218" height="14" font="5">if(	true	=	isHungry	)</text>
<text top="262" left="731" width="81" height="20" font="2">,	this	will</text>
<text top="288" left="54" width="410" height="20" font="2">generate	a	compiler	error,	catching	the	mistake.</text>
<text top="324" left="54" width="420" height="20" font="2">Try	to	run	this	code	segment	to	see	what	I	mean:</text>
<text top="367" left="54" width="176" height="14" font="5">int	x	=	4,	y	=	5;</text>
<text top="388" left="54" width="663" height="14" font="5">cout	&lt;&lt;	&#34;Is	x	equal	to	y?	C++	says:	&#34;	&lt;&lt;	(x	=	y)	&lt;&lt;	endl;	//bad!</text>
<text top="409" left="54" width="559" height="14" font="5">//	above	line	overwrote	value	in	x	with	what	was	in	y,</text>
<text top="429" left="54" width="549" height="14" font="5">//	since	the	above	line	contains	the	assignment	x	=	y</text>
<text top="450" left="54" width="414" height="14" font="5">//	we	should	have	used	(x	==	y)	instead.</text>
<text top="470" left="54" width="466" height="14" font="5">cout	&lt;&lt;	&#34;x	=	&#34;	&lt;&lt;	x	&lt;&lt;	&#34;,	y	=	&#34;	&lt;&lt;	y	&lt;&lt;	endl;</text>
<text top="501" left="54" width="580" height="20" font="2">The	following	lines	show	the	output	of	the	preceding	lines	of	code:</text>
<text top="545" left="54" width="290" height="14" font="5">Is	x	equal	to	y?	C++	says:	5</text>
<text top="565" left="54" width="124" height="14" font="5">x	=	5,	y	=	5</text>
<text top="596" left="54" width="218" height="20" font="2">The	line	of	code	that	has	</text>
<text top="601" left="272" width="73" height="14" font="5">(x	=	y)</text>
<text top="596" left="345" width="289" height="20" font="2">	overwrites	the	previous	value	of	</text>
<text top="601" left="634" width="10" height="14" font="5">x</text>
<text top="596" left="644" width="171" height="20" font="2">	(which	was	4)	with</text>
<text top="622" left="54" width="107" height="20" font="2">the	value	of	</text>
<text top="627" left="161" width="10" height="14" font="5">y</text>
<text top="622" left="172" width="494" height="20" font="2">	(which	is	5).	Although	we	were	trying	to	check	whether	</text>
<text top="627" left="666" width="10" height="14" font="5">x</text>
<text top="622" left="676" width="66" height="20" font="2">	equals	</text>
<text top="627" left="742" width="10" height="14" font="5">y</text>
<text top="622" left="752" width="53" height="20" font="2">,	what</text>
<text top="648" left="54" width="387" height="20" font="2">happened	in	the	previous	statement	was	that	</text>
<text top="653" left="441" width="10" height="14" font="5">x</text>
<text top="648" left="451" width="231" height="20" font="2">	was	assigned	the	value	of	</text>
<text top="653" left="682" width="10" height="14" font="5">y</text>
<text top="648" left="693" width="5" height="20" font="2">.</text>
</page>
<page number="118" position="absolute" top="0" left="0" height="1262" width="892">
<image top="715" left="97" width="540" height="247" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-118_1.jpg"/>
<text top="61" left="54" width="346" height="32" font="7"><b>Coding	else	statements</b></text>
<text top="110" left="54" width="39" height="20" font="2">The	</text>
<text top="115" left="93" width="41" height="14" font="5">else</text>
<text top="110" left="134" width="595" height="20" font="2">	statement	is	used	to	have	our	code	do	something	in	the	case	that	the	</text>
<text top="115" left="730" width="21" height="14" font="5">if</text>
<text top="110" left="750" width="68" height="20" font="2">	portion</text>
<text top="136" left="54" width="213" height="20" font="2">of	the	code	does	not	run.</text>
<text top="173" left="54" width="763" height="20" font="2">For	example,	say	we	have	something	else	that	we’d	like	to	do	in	case	we	are	not	hungry,</text>
<text top="199" left="54" width="343" height="20" font="2">as	shown	in	the	following	code	snippet:</text>
<text top="242" left="54" width="218" height="14" font="5">bool	isHungry	=	true;</text>
<text top="263" left="54" width="508" height="14" font="5">if(	isHungry	)						//	notice	==	true	is	implied!</text>
<text top="283" left="54" width="10" height="14" font="5">{</text>
<text top="304" left="54" width="394" height="14" font="5">		cout	&lt;&lt;	&#34;Preparing	snack..&#34;	&lt;&lt;	endl;</text>
<text top="324" left="54" width="321" height="14" font="5">		cout	&lt;&lt;	&#34;Eating	..	&#34;	&lt;&lt;	endl;</text>
<text top="345" left="54" width="10" height="14" font="5">}</text>
<text top="365" left="54" width="559" height="14" font="5">else																//	we	go	here	if	isHungry	is	FALSE</text>
<text top="386" left="54" width="10" height="14" font="5">{</text>
<text top="406" left="54" width="363" height="14" font="5">		cout	&lt;&lt;	&#34;I'm	not	hungry&#34;	&lt;&lt;	endl;</text>
<text top="427" left="54" width="10" height="14" font="5">}</text>
<text top="465" left="54" width="425" height="14" font="5">cout	&lt;&lt;	&#34;Sitting	on	the	couch..&#34;	&lt;&lt;	endl;</text>
<text top="485" left="54" width="10" height="14" font="5">}</text>
<text top="517" left="54" width="610" height="20" font="2">There	are	a	few	important	things	that	you	need	to	remember	about	the	</text>
<text top="521" left="664" width="41" height="14" font="5">else</text>
<text top="517" left="705" width="110" height="20" font="2">	keyword,	as</text>
<text top="542" left="54" width="71" height="20" font="2">follows:</text>
<text top="579" left="97" width="32" height="20" font="2">An	</text>
<text top="584" left="129" width="41" height="14" font="5">else</text>
<text top="579" left="170" width="452" height="20" font="2">	statement	must	always	immediately	follow	after	an	</text>
<text top="584" left="622" width="21" height="14" font="5">if</text>
<text top="579" left="643" width="182" height="20" font="2">	statement.	You	can’t</text>
<text top="605" left="97" width="712" height="20" font="2">have	any	extra	lines	of	code	between	the	end	of	the	if	block	and	the	corresponding</text>
<text top="631" left="97" width="92" height="20" font="2">else	block.</text>
<text top="657" left="97" width="722" height="20" font="2">You	can	never	go	into	both	the	if	and	the	corresponding	else	blocks.	It’s	always	one</text>
<text top="683" left="97" width="104" height="20" font="2">or	the	other.</text>
<text top="999" left="155" width="375" height="20" font="4"><i>The	else	statement	is	the	way	you	will	go	if	</i></text>
<text top="1004" left="530" width="83" height="14" font="12"><i>isHungry</i></text>
<text top="999" left="613" width="168" height="20" font="4"><i>	is	not	equal	to	true</i></text>
<text top="1069" left="54" width="181" height="20" font="2">You	can	think	of	the	</text>
<text top="1073" left="235" width="21" height="14" font="5">if</text>
<text top="1069" left="255" width="6" height="20" font="2">/</text>
<text top="1073" left="261" width="41" height="14" font="5">else</text>
<text top="1069" left="303" width="533" height="20" font="2">	statements	as	a	guard	diverting	people	to	either	the	left	or	the</text>
<text top="1094" left="54" width="493" height="20" font="2">right.	Each	person	will	either	go	towards	the	food	(when	</text>
<text top="1099" left="547" width="145" height="14" font="5">isHungry==true</text>
<text top="1094" left="692" width="144" height="20" font="2">),	or	they	will	go</text>
<text top="1120" left="54" width="234" height="20" font="2">away	from	the	food	(when	</text>
<text top="1125" left="288" width="155" height="14" font="5">isHungry==false</text>
<text top="1120" left="444" width="13" height="20" font="2">).</text>
</page>
<page number="119" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="713" height="32" font="7"><b>Testing	for	inequalities	using	other	comparison</b></text>
<text top="103" left="54" width="471" height="32" font="7"><b>operators	(&gt;,	&gt;=,	&lt;,	&lt;=,	and	!=)</b></text>
<text top="152" left="54" width="740" height="20" font="2">Other	logical	comparisons	can	be	easily	done	in	C++.	The	&gt;	and	&lt;	symbols	mean	just</text>
<text top="178" left="54" width="672" height="20" font="2">what	they	do	in	math.	They	are	the	greater	than	(&gt;)	and	less	than	(&lt;)	symbols,</text>
<text top="204" left="54" width="776" height="20" font="2">respectively.	&gt;=	has	the	same	meaning	as	the	≥	symbol	in	math.	&lt;=	is	the	C++	code	for	≤.</text>
<text top="230" left="54" width="762" height="20" font="2">Since	there	isn’t	a	≤	symbol	on	the	keyboard,	we	have	to	write	it	using	two	characters	in</text>
<text top="256" left="54" width="50" height="20" font="2">C++.	</text>
<text top="261" left="104" width="21" height="14" font="5">!=</text>
<text top="256" left="124" width="705" height="20" font="2">	is	how	we	say	“not	equal	to”	in	C++.	So,	for	example,	say	we	have	the	following</text>
<text top="282" left="54" width="116" height="20" font="2">lines	of	code:</text>
<text top="325" left="54" width="104" height="14" font="5">int	x	=	9;</text>
<text top="346" left="54" width="104" height="14" font="5">int	y	=	7;</text>
<text top="377" left="54" width="297" height="20" font="2">We	can	ask	the	computer	whether	</text>
<text top="382" left="351" width="52" height="14" font="5">x	&gt;	y</text>
<text top="377" left="403" width="29" height="20" font="2">	or	</text>
<text top="382" left="431" width="52" height="14" font="5">x	&lt;	y</text>
<text top="377" left="483" width="134" height="20" font="2">	as	shown	here:</text>
<text top="420" left="54" width="528" height="14" font="5">cout	&lt;&lt;	&#34;Is	x	greater	than	y?	&#34;	&lt;&lt;	(x	&gt;	y)	&lt;&lt;	endl;</text>
<text top="441" left="54" width="663" height="14" font="5">cout	&lt;&lt;	&#34;Is	x	greater	than	OR	EQUAL	to	y?	&#34;	&lt;&lt;	(x	&gt;=	y)	&lt;&lt;	endl;</text>
<text top="461" left="54" width="497" height="14" font="5">cout	&lt;&lt;	&#34;Is	x	less	than	y?	&#34;	&lt;&lt;	(x	&lt;	y)	&lt;&lt;	endl;</text>
<text top="482" left="54" width="632" height="14" font="5">cout	&lt;&lt;	&#34;Is	x	less	than	OR	EQUAL	to	y?	&#34;	&lt;&lt;	(x	&lt;=	y)	&lt;&lt;	endl;</text>
<text top="503" left="54" width="539" height="14" font="5">cout	&lt;&lt;	&#34;Is	x	not	equal	to	y?	&#34;	&lt;&lt;	(x	!=	y)	&lt;&lt;	endl;</text>
<text top="535" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="574" left="54" width="767" height="20" font="2">We	need	the	brackets	around	the	comparisons	of	x	and	y	because	of	something	known	as</text>
<text top="600" left="54" width="778" height="20" font="2">operator	precedence.	If	we	don’t	have	the	brackets,	C++	will	get	confused	between	the	&lt;&lt;</text>
<text top="626" left="54" width="763" height="20" font="2">and	&lt;	operators.	It’s	weird	and	you	will	better	understand	this	later,	but	you	need	C++	to</text>
<text top="652" left="54" width="752" height="20" font="2">evaluate	the	(x	&lt;	y)	comparison	before	you	output	the	result	(&lt;&lt;).	There	is	an	excellent</text>
<text top="677" left="54" width="262" height="20" font="2">table	available	for	reference	at</text>
<text top="703" left="54" width="560" height="20" font="1"><a href="http://en.cppreference.com/w/cpp/language/operator_precedence">http://en.cppreference.com/w/cpp/language/operator_precedence</a></text>
<text top="703" left="614" width="5" height="20" font="2"><a href="http://en.cppreference.com/w/cpp/language/operator_precedence">.</a></text>
</page>
<page number="120" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="121" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="425" height="39" font="0"><b>Using	logical	operators</b></text>
<text top="120" left="54" width="781" height="20" font="2">Logical	operators	allow	you	to	do	more	complex	checks,	rather	than	checking	for	a	simple</text>
<text top="146" left="54" width="748" height="20" font="2">equality	or	inequality.	Say,	for	example,	the	condition	to	gain	entry	into	a	special	room</text>
<text top="172" left="54" width="749" height="20" font="2">requires	the	player	to	have	both	the	red	and	green	keycards.	We	want	to	check	whether</text>
<text top="198" left="54" width="736" height="20" font="2">two	conditions	hold	true	at	the	same	time.	To	do	this	type	of	complex	logic	statement</text>
<text top="224" left="54" width="646" height="20" font="2">checks,	there	are	three	additional	constructs	that	we	need	to	learn:	the	<i>not</i>	(</text>
<text top="228" left="700" width="10" height="14" font="5">!</text>
<text top="224" left="710" width="63" height="20" font="2">),	<i>and</i>	(</text>
<text top="228" left="773" width="21" height="14" font="5">&amp;&amp;</text>
<text top="224" left="794" width="13" height="20" font="2">),</text>
<text top="250" left="54" width="68" height="20" font="2">and	<i>or</i>	(</text>
<text top="254" left="122" width="21" height="14" font="5">||</text>
<text top="250" left="143" width="98" height="20" font="2">)	operators.</text>
</page>
<page number="122" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="310" height="32" font="7"><b>The	Not	(!)	operator</b></text>
<text top="110" left="54" width="39" height="20" font="2">The	</text>
<text top="115" left="93" width="10" height="14" font="5">!</text>
<text top="110" left="103" width="373" height="20" font="2">	operator	is	handy	to	reverse	the	value	of	a	</text>
<text top="115" left="476" width="73" height="14" font="5">boolean</text>
<text top="110" left="549" width="287" height="20" font="2">	variable.	Take	an	example	of	the</text>
<text top="136" left="54" width="136" height="20" font="2">following	code:</text>
<text top="180" left="54" width="259" height="14" font="5">bool	wearingSocks	=	true;</text>
<text top="200" left="54" width="601" height="14" font="5">if(	!wearingSocks	)	//	same	as	if(	false	==	wearingSocks	)</text>
<text top="221" left="54" width="10" height="14" font="5">{</text>
<text top="241" left="54" width="383" height="14" font="5">cout	&lt;&lt;	&#34;Get	some	socks	on!&#34;	&lt;&lt;	endl;</text>
<text top="262" left="54" width="10" height="14" font="5">}</text>
<text top="282" left="54" width="41" height="14" font="5">else</text>
<text top="303" left="54" width="10" height="14" font="5">{</text>
<text top="323" left="54" width="10" height="14" font="5">	</text>
<text top="323" left="137" width="425" height="14" font="5">cout	&lt;&lt;	&#34;You	already	have	socks&#34;	&lt;&lt;	endl;</text>
<text top="344" left="54" width="10" height="14" font="5">}</text>
<text top="375" left="54" width="39" height="20" font="2">The	</text>
<text top="379" left="93" width="21" height="14" font="5">if</text>
<text top="375" left="114" width="713" height="20" font="2">	statement	here	checks	whether	or	not	you	are	wearing	socks.	Then,	you	are	issued</text>
<text top="401" left="54" width="335" height="20" font="2">a	command	to	get	some	socks	on.	The	</text>
<text top="405" left="389" width="10" height="14" font="5">!</text>
<text top="401" left="399" width="419" height="20" font="2">	operator	reverses	the	value	of	whatever	is	in	the</text>
<text top="431" left="54" width="73" height="14" font="5">boolean</text>
<text top="427" left="127" width="291" height="20" font="2">	variable	to	be	the	opposite	value.</text>
<text top="464" left="54" width="706" height="20" font="2">We	use	something	called	a	truth	table	to	show	all	the	possible	results	of	using	the	</text>
<text top="468" left="760" width="10" height="14" font="5">!</text>
<text top="490" left="54" width="119" height="20" font="2">operator	on	a	</text>
<text top="494" left="173" width="73" height="14" font="5">boolean</text>
<text top="490" left="246" width="180" height="20" font="2">	variable,	as	follows:</text>
<text top="540" left="59" width="203" height="14" font="9"><b>wearingSocks !wearingSocks</b></text>
<text top="584" left="59" width="25" height="15" font="10">true</text>
<text top="584" left="162" width="31" height="15" font="10">false</text>
<text top="626" left="59" width="31" height="15" font="10">false</text>
<text top="626" left="162" width="25" height="15" font="10">true</text>
<text top="670" left="54" width="86" height="20" font="2">So,	when	</text>
<text top="674" left="140" width="124" height="14" font="5">wearingSocks</text>
<text top="670" left="264" width="168" height="20" font="2">	has	the	value	true,	</text>
<text top="674" left="432" width="135" height="14" font="5">!wearingSocks</text>
<text top="670" left="567" width="123" height="20" font="2">	has	the	value	</text>
<text top="674" left="690" width="52" height="14" font="5">false</text>
<text top="670" left="742" width="78" height="20" font="2">	and	vice</text>
<text top="696" left="54" width="51" height="20" font="2">versa.</text>
<text top="734" left="54" width="99" height="22" font="8"><b>Exercises</b></text>
<text top="773" left="69" width="367" height="20" font="2">1.	 What	do	you	think	will	be	the	value	of	</text>
<text top="777" left="436" width="145" height="14" font="5">!!wearingSocks</text>
<text top="773" left="581" width="159" height="20" font="2">	when	the	value	of</text>
<text top="803" left="97" width="124" height="14" font="5">wearingSocks</text>
<text top="798" left="221" width="68" height="20" font="2">	is	true?</text>
<text top="824" left="69" width="207" height="20" font="2">2.	 What	is	the	value	of	</text>
<text top="829" left="276" width="93" height="14" font="5">isVisible</text>
<text top="824" left="370" width="276" height="20" font="2">	after	the	following	code	is	run?</text>
<text top="889" left="54" width="197" height="14" font="5">bool	hidden	=	true;</text>
<text top="910" left="54" width="259" height="14" font="5">bool	isVisible	=	!hidden;</text>
<text top="942" left="54" width="88" height="22" font="8"><b>Solution</b></text>
<text top="981" left="69" width="48" height="20" font="2">1.	 If	</text>
<text top="985" left="117" width="124" height="14" font="5">wearingSocks</text>
<text top="981" left="241" width="112" height="20" font="2">	is	true,	then	</text>
<text top="985" left="353" width="135" height="14" font="5">!wearingSocks</text>
<text top="981" left="488" width="173" height="20" font="2">	is	false.	Therefore,	</text>
<text top="985" left="661" width="145" height="14" font="5">!!wearingSocks</text>
<text top="1007" left="97" width="740" height="20" font="2">becomes	true	again.	It’s	like	saying	<i>I	am	not	not	hungry</i>.	Not	not	is	a	double	negative,</text>
<text top="1033" left="97" width="422" height="20" font="2">so	this	sentence	means	that	I	am	actually	hungry.</text>
<text top="1059" left="69" width="403" height="20" font="2">2.	 The	answer	to	the	second	question	is	false.	</text>
<text top="1063" left="472" width="62" height="14" font="5">hidden</text>
<text top="1059" left="534" width="113" height="20" font="2">	was	true,	so	</text>
<text top="1063" left="647" width="73" height="14" font="5">!hidden</text>
<text top="1059" left="720" width="117" height="20" font="2">	is	false.	false</text>
<text top="1085" left="97" width="208" height="20" font="2">then	gets	saved	into	the	</text>
<text top="1089" left="305" width="93" height="14" font="5">isVisible</text>
<text top="1085" left="398" width="80" height="20" font="2">	variable.</text>
<text top="1144" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="1183" left="54" width="39" height="20" font="2">The	</text>
<text top="1187" left="93" width="10" height="14" font="5">!</text>
<text top="1183" left="103" width="668" height="20" font="2">	operator	is	sometimes	colloquially	known	as	bang.	The	preceding	bang	bang</text>
</page>
<page number="123" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="94" height="20" font="2">operation	(</text>
<text top="62" left="148" width="21" height="14" font="5">!!</text>
<text top="57" left="169" width="625" height="20" font="2">)	is	a	double	negative	and	a	double	logical	inversion.	If	you	bang-bang	a</text>
<text top="88" left="54" width="41" height="14" font="5">bool</text>
<text top="83" left="95" width="593" height="20" font="2">	variable,	there	is	no	net	change	to	the	variable.	If	you	bang-bang	an	</text>
<text top="88" left="689" width="31" height="14" font="5">int</text>
<text top="83" left="720" width="98" height="20" font="2">	variable,	it</text>
<text top="109" left="54" width="159" height="20" font="2">becomes	a	simple	</text>
<text top="114" left="213" width="41" height="14" font="5">bool</text>
<text top="109" left="254" width="82" height="20" font="2">	variable(</text>
<text top="114" left="336" width="41" height="14" font="5">true</text>
<text top="109" left="378" width="29" height="20" font="2">	or	</text>
<text top="114" left="407" width="52" height="14" font="5">false</text>
<text top="109" left="458" width="70" height="20" font="2">).	If	the	</text>
<text top="114" left="528" width="31" height="14" font="5">int</text>
<text top="109" left="559" width="265" height="20" font="2">	value	is	greater	than	zero,	it	is</text>
<text top="135" left="54" width="174" height="20" font="2">reduced	to	a	simple	</text>
<text top="140" left="228" width="41" height="14" font="5">true</text>
<text top="135" left="269" width="62" height="20" font="2">.	If	the	</text>
<text top="140" left="332" width="31" height="14" font="5">int</text>
<text top="135" left="363" width="377" height="20" font="2">	value	is	0	already,	it	is	reduced	to	a	simple	</text>
<text top="140" left="740" width="52" height="14" font="5">false</text>
<text top="135" left="792" width="5" height="20" font="2">.</text>
</page>
<page number="124" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="367" height="32" font="7"><b>The	And	(&amp;&amp;)	operator</b></text>
<text top="110" left="54" width="775" height="20" font="2">Say,	we	only	want	to	run	a	section	of	the	code	if	two	conditions	are	true.	For	example,	we</text>
<text top="136" left="54" width="779" height="20" font="2">are	only	dressed	if	we	are	wearing	both	socks	and	clothes.	You	can	use	the	following	code</text>
<text top="162" left="54" width="124" height="20" font="2">to	checks	this:</text>
<text top="205" left="54" width="259" height="14" font="5">bool	wearingSocks	=	true;</text>
<text top="226" left="54" width="290" height="14" font="5">bool	wearingClothes	=	false;</text>
<text top="247" left="54" width="684" height="14" font="5">if(	wearingSocks	&amp;&amp;	wearingClothes	)//	&amp;&amp;	requires	BOTH	to	be	true</text>
<text top="267" left="54" width="10" height="14" font="5">{</text>
<text top="288" left="54" width="10" height="14" font="5">	</text>
<text top="288" left="137" width="363" height="14" font="5">cout	&lt;&lt;	&#34;You	are	dressed!&#34;	&lt;&lt;	endl;</text>
<text top="308" left="54" width="10" height="14" font="5">}</text>
<text top="329" left="54" width="41" height="14" font="5">else</text>
<text top="349" left="54" width="10" height="14" font="5">{</text>
<text top="370" left="54" width="10" height="14" font="5">	</text>
<text top="370" left="137" width="435" height="14" font="5">cout	&lt;&lt;	&#34;You	are	not	dressed	yet&#34;	&lt;&lt;	endl;</text>
<text top="390" left="54" width="10" height="14" font="5">}</text>
</page>
<page number="125" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="301" height="32" font="7"><b>The	Or	(||)	operator</b></text>
<text top="110" left="54" width="686" height="20" font="2">We	sometimes	want	to	run	a	section	of	the	code	if	either	one	of	the	variables	is	</text>
<text top="115" left="740" width="41" height="14" font="5">true</text>
<text top="110" left="781" width="5" height="20" font="2">.</text>
<text top="147" left="54" width="768" height="20" font="2">So,	for	example,	say	the	player	wins	a	certain	bonus	if	he	finds	either	a	special	star	in	the</text>
<text top="173" left="54" width="769" height="20" font="2">level	or	the	time	that	he	takes	to	complete	the	level	is	less	than	60	seconds,	in	which	case</text>
<text top="199" left="54" width="275" height="20" font="2">you	can	use	the	following	code:</text>
<text top="242" left="54" width="228" height="14" font="5">bool	foundStar	=	true;</text>
<text top="263" left="54" width="321" height="14" font="5">float	levelCompleteTime	=	25.f;</text>
<text top="283" left="54" width="300" height="14" font="5">float	maxTimeForBonus	=	60.f;</text>
<text top="304" left="54" width="559" height="14" font="5">//	||	requires	EITHER	to	be	true	to	get	in	the	{	below</text>
<text top="324" left="54" width="559" height="14" font="5">if(	foundStar	||	levelCompleteTime	&lt;	maxTimeForBonus	)</text>
<text top="345" left="54" width="10" height="14" font="5">{</text>
<text top="365" left="54" width="10" height="14" font="5">	</text>
<text top="365" left="137" width="342" height="14" font="5">cout	&lt;&lt;	&#34;Bonus	awarded!&#34;	&lt;&lt;	endl;</text>
<text top="386" left="54" width="10" height="14" font="5">}</text>
<text top="406" left="54" width="41" height="14" font="5">else</text>
<text top="427" left="54" width="10" height="14" font="5">{</text>
<text top="447" left="54" width="10" height="14" font="5">	</text>
<text top="447" left="137" width="290" height="14" font="5">cout	&lt;&lt;	&#34;No	bonus.&#34;	&lt;&lt;	endl;</text>
<text top="468" left="54" width="10" height="14" font="5">}</text>
</page>
<page number="126" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="127" position="absolute" top="0" left="0" height="1262" width="892">
<image top="333" left="742" width="32" height="32" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-127_1.jpg"/>
<image top="408" left="54" width="540" height="291" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-127_2.jpg"/>
<image top="892" left="488" width="32" height="27" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-127_3.jpg"/>
<text top="64" left="54" width="698" height="39" font="0"><b>Our	first	example	with	Unreal	Engine</b></text>
<text top="120" left="54" width="371" height="20" font="2">We	need	to	get	started	with	Unreal	Engine.</text>
<text top="158" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="197" left="54" width="760" height="20" font="2">A	word	of	warning:	when	you	open	your	first	Unreal	project,	you	will	find	that	the	code</text>
<text top="223" left="54" width="744" height="20" font="2">looks	very	complicated.	Don’t	get	discouraged.	Simply	focus	on	the	highlighted	parts.</text>
<text top="249" left="54" width="778" height="20" font="2">Throughout	your	career	as	a	programmer,	you	will	often	have	to	deal	with	very	large	code</text>
<text top="275" left="54" width="772" height="20" font="2">bases	containing	sections	that	you	do	not	understand.	However,	focusing	on	the	parts	that</text>
<text top="300" left="54" width="457" height="20" font="2">you	do	understand	will	make	this	section	productive.</text>
<text top="350" left="54" width="688" height="20" font="2">Open	the	<b>Unreal	Engine	Launcher</b>	app	(which	has	the	blue-colored	UE4	icon	</text>
<text top="350" left="774" width="13" height="20" font="2">).</text>
<text top="376" left="54" width="652" height="20" font="2">Select	<b>Launch	Unreal	Engine	4.4.3</b>,	as	shown	in	the	following	screenshot:</text>
<text top="770" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="808" left="54" width="755" height="20" font="2">If	the	<b>Launch</b>	button	is	grayed	out,	you	need	to	go	to	the	<b>Library</b>	tab	and	download	an</text>
<text top="834" left="54" width="141" height="20" font="2">engine	(~3	GB).</text>
<text top="871" left="54" width="770" height="20" font="2">Once	the	engine	is	launched	(which	might	take	a	few	seconds),	you	will	be	in	the	<b>Unreal</b></text>
<text top="905" left="54" width="434" height="19" font="3"><b>Project	Browser</b>	screen	(black-colored	UE4	icon	</text>
<text top="904" left="521" width="241" height="20" font="2">),	as	shown	in	the	following</text>
<text top="930" left="54" width="97" height="20" font="2">screenshot.</text>
<text top="967" left="54" width="771" height="20" font="2">Now,	select	the	<b>New	Project</b>	tab	in	the	UE4	project	browser.	Scroll	down	until	you	reach</text>
<text top="993" left="54" width="764" height="19" font="3"><b>Code	Puzzle</b>.	This	is	one	of	the	simpler	projects	that	doesn’t	have	too	much	code,	so	it’s</text>
<text top="1019" left="54" width="444" height="20" font="2">good	to	start	with.	We’ll	go	to	the	3D	projects	later.</text>
</page>
<page number="128" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="785" height="619" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-128_1.jpg"/>
<text top="741" left="54" width="465" height="20" font="2">Here	are	a	few	things	to	make	a	note	of	in	this	screen:</text>
<text top="778" left="97" width="331" height="20" font="2">Be	sure	you’re	in	the	<b>New	Project</b>	tab</text>
<text top="804" left="97" width="741" height="20" font="2">When	you	click	on	<b>Code	Puzzle</b>,	make	sure	that	it	is	the	one	with	the	<b>C++</b>	icon	at	the</text>
<text top="830" left="97" width="239" height="20" font="2">right,	not	<b>Blueprint	Puzzle</b></text>
<text top="856" left="97" width="266" height="20" font="2">Enter	a	name	for	your	project,	</text>
<text top="860" left="363" width="62" height="14" font="5">Puzzle</text>
<text top="856" left="425" width="372" height="20" font="2">,	in	the	<b>Name</b>	box	(this	is	important	for	the</text>
<text top="882" left="97" width="401" height="20" font="2">example	code	I	will	give	you	to	work	on	later)</text>
<text top="908" left="97" width="719" height="20" font="2">If	you	want	to	change	the	storage	folder	(to	a	different	drive),	click	the	down	arrow</text>
<text top="934" left="97" width="703" height="20" font="2">so	that	the	folder	appears.	Then,	name	the	directory	where	you	want	to	store	your</text>
<text top="959" left="97" width="65" height="20" font="2">project.</text>
<text top="996" left="54" width="427" height="20" font="2">After	you’ve	done	all	this,	select	<b>Create	Project</b>.</text>
<text top="1033" left="54" width="512" height="20" font="2">Visual	Studio	2013	will	open	with	the	code	of	your	project.</text>
<text top="1070" left="54" width="396" height="20" font="2">Press	<i>Ctrl</i>+<i>F5</i>	to	build	and	launch	the	project.</text>
<text top="1106" left="54" width="743" height="20" font="2">Once	the	project	compiles	and	runs,	you	should	see	the	Unreal	Editor,	as	shown	in	the</text>
<text top="1132" left="54" width="186" height="20" font="2">following	screenshot:</text>
</page>
<page number="129" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="785" height="570" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-129_1.jpg"/>
<text top="692" left="54" width="732" height="20" font="2">Looks	complicated?	Oh	boy,	it	sure	is!	We’ll	explore	some	of	the	functionality	in	the</text>
<text top="717" left="54" width="745" height="20" font="2">toolbars	at	the	side	later.	For	now,	just	select	<b>Play</b>	(marked	in	yellow),	as	shown	in	the</text>
<text top="743" left="54" width="187" height="20" font="2">preceding	screenshot.</text>
<text top="780" left="54" width="445" height="20" font="2">This	launches	the	game.	This	is	how	it	should	look:</text>
</page>
<page number="130" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="432" height="466" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-130_1.jpg"/>
<text top="588" left="54" width="770" height="20" font="2">Now,	try	clicking	on	the	blocks.	As	soon	as	you	click	on	a	block,	it	turns	orange,	and	this</text>
<text top="614" left="54" width="180" height="20" font="2">increases	your	score.</text>
<text top="650" left="54" width="764" height="20" font="2">What	we’re	going	to	do	is	find	the	section	that	does	this	and	change	the	behavior	a	little.</text>
<text top="687" left="54" width="161" height="20" font="2">Find	and	open	the	</text>
<text top="692" left="215" width="155" height="14" font="5">PuzzleBlock.cpp</text>
<text top="687" left="370" width="40" height="20" font="2">	file.</text>
<text top="725" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="764" left="54" width="766" height="20" font="2">In	Visual	Studio,	the	list	of	files	in	the	project	is	located	inside	the	<b>Solution	Explorer</b>.	If</text>
<text top="790" left="54" width="738" height="20" font="2">your	<b>Solution	Explorer</b>	is	hidden,	simply	click	on	<b>View</b>/<b>Solution	Explorer</b>	from	the</text>
<text top="816" left="54" width="139" height="20" font="2">menu	at	the	top.</text>
<text top="852" left="54" width="773" height="20" font="2">Inside	this	file,	scroll	down	to	the	bottom,	where	you’ll	find	a	section	that	begins	with	the</text>
<text top="878" left="54" width="148" height="20" font="2">following	words:</text>
<text top="922" left="54" width="673" height="14" font="5">void	APuzzleBlock::BlockClicked(UPrimitiveComponent*	ClickedComp)</text>
</page>
<page number="131" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="785" height="313" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-131_1.jpg"/>
<text top="439" left="54" width="124" height="14" font="5">APuzzleBlock</text>
<text top="434" left="178" width="198" height="20" font="2">	is	the	class	name,	and	</text>
<text top="439" left="377" width="124" height="14" font="5">BlockClicked</text>
<text top="434" left="501" width="296" height="20" font="2">	is	the	function	name.	Whenever	a</text>
<text top="460" left="54" width="776" height="20" font="2">puzzle	block	gets	clicked	on,	the	section	of	code	from	the	starting	{	to	the	ending	}	is	run.</text>
<text top="486" left="54" width="555" height="20" font="2">Hopefully,	exactly	how	this	happens	will	make	more	sense	later.</text>
<text top="523" left="54" width="164" height="20" font="2">It’s	kind	of	like	an	</text>
<text top="527" left="218" width="21" height="14" font="5">if</text>
<text top="523" left="238" width="596" height="20" font="2">	statement	in	a	way.	If	a	puzzle	piece	is	clicked	on,	then	this	group	of</text>
<text top="549" left="54" width="313" height="20" font="2">the	code	is	run	for	that	puzzle	piece.</text>
<text top="586" left="54" width="785" height="20" font="2">We’re	going	to	walk	through	the	steps	to	make	the	blocks	flip	colors	when	they	are	clicked</text>
<text top="612" left="54" width="717" height="20" font="2">on	(so,	a	second	click	will	change	the	color	of	the	block	from	orange	back	to	blue).</text>
<text top="648" left="54" width="427" height="20" font="2">Perform	the	following	steps	with	the	utmost	care:</text>
<text top="685" left="69" width="80" height="20" font="2">1.	 Open	</text>
<text top="689" left="149" width="135" height="14" font="5">PuzzleBlock.h</text>
<text top="685" left="284" width="351" height="20" font="2">	file.	After	line	25	(which	has	this	code):</text>
<text top="728" left="97" width="570" height="14" font="5">/**	Pointer	to	orange	material	used	on	active	blocks	*/</text>
<text top="749" left="97" width="114" height="14" font="5">UPROPERTY()</text>
<text top="769" left="97" width="414" height="14" font="5">class	UMaterialInstance*	OrangeMaterial;</text>
<text top="801" left="97" width="505" height="20" font="2">Insert	the	following	code	after	the	preceding	lines	of	code:</text>
<text top="844" left="97" width="114" height="14" font="5">UPROPERTY()</text>
<text top="864" left="97" width="394" height="14" font="5">class	UMaterialInstance*	BlueMaterial;</text>
<text top="896" left="69" width="127" height="20" font="2">2.	 Now,	open	</text>
<text top="900" left="196" width="155" height="14" font="5">PuzzleBlock.cpp</text>
<text top="896" left="351" width="351" height="20" font="2">	file.	After	line	40	(which	has	this	code):</text>
<text top="939" left="97" width="414" height="14" font="5">//	Save	a	pointer	to	the	orange	material</text>
<text top="959" left="97" width="590" height="14" font="5">OrangeMaterial	=	ConstructorStatics.OrangeMaterial.Get();</text>
<text top="991" left="97" width="436" height="20" font="2">Insert	the	following	code	after	the	preceding	lines:</text>
<text top="1034" left="97" width="549" height="14" font="5">BlueMaterial	=	ConstructorStatics.BlueMaterial.Get();</text>
<text top="1065" left="69" width="121" height="20" font="2">3.	 Finally,	in	</text>
<text top="1070" left="190" width="155" height="14" font="5">PuzzleBlock.cpp</text>
<text top="1065" left="345" width="243" height="20" font="2">,	replace	the	contents	of	the	</text>
<text top="1070" left="588" width="41" height="14" font="5">void</text>
<text top="1096" left="97" width="269" height="14" font="5">APuzzleBlock::BlockClicked</text>
<text top="1091" left="366" width="432" height="20" font="2">	section	of	code	(line	44)	with	the	following	code:</text>
<text top="1134" left="97" width="673" height="14" font="5">void	APuzzleBlock::BlockClicked(UPrimitiveComponent*	ClickedComp)</text>
<text top="1155" left="97" width="10" height="14" font="5">{</text>
<text top="1176" left="97" width="269" height="14" font="5">		//	--REPLACE	FROM	HERE--</text>
</page>
<page number="132" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="97" width="580" height="14" font="5">		bIsActive	=	!bIsActive;	//	flip	the	value	of	bIsActive</text>
<text top="78" left="97" width="559" height="14" font="5">		//	(if	it	was	true,	it	becomes	false,	or	vice	versa)</text>
<text top="99" left="97" width="186" height="14" font="5">		if	(	bIsActive	)</text>
<text top="119" left="97" width="31" height="14" font="5">		{</text>
<text top="140" left="97" width="476" height="14" font="5">				BlockMesh-&gt;SetMaterial(0,	OrangeMaterial);</text>
<text top="160" left="97" width="31" height="14" font="5">		}</text>
<text top="181" left="97" width="62" height="14" font="5">		else</text>
<text top="201" left="97" width="31" height="14" font="5">		{</text>
<text top="222" left="97" width="456" height="14" font="5">				BlockMesh-&gt;SetMaterial(0,	BlueMaterial);</text>
<text top="242" left="97" width="31" height="14" font="5">		}</text>
<text top="263" left="97" width="186" height="14" font="5">		//	Tell	the	Grid</text>
<text top="283" left="97" width="249" height="14" font="5">		if(OwningGrid	!=	NULL)</text>
<text top="304" left="97" width="31" height="14" font="5">		{</text>
<text top="324" left="97" width="280" height="14" font="5">				OwningGrid-&gt;AddScore();</text>
<text top="345" left="97" width="31" height="14" font="5">		}</text>
<text top="365" left="97" width="166" height="14" font="5">		//	--TO	HERE--</text>
<text top="386" left="97" width="10" height="14" font="5">}</text>
<text top="440" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="479" left="54" width="205" height="20" font="2">Only	replace	inside	the	</text>
<text top="483" left="259" width="549" height="14" font="5">void	APuzzleBlock::BlockClicked	(UPrimitiveComponent*</text>
<text top="509" left="54" width="124" height="14" font="5">ClickedComp)</text>
<text top="505" left="178" width="88" height="20" font="2">statement.</text>
<text top="541" left="54" width="334" height="20" font="2">Do	not	replace	the	line	that	starts	with	</text>
<text top="546" left="388" width="321" height="14" font="5">void	APuzzleBlock::BlockClicked</text>
<text top="541" left="710" width="102" height="20" font="2">.	You	might</text>
<text top="567" left="54" width="670" height="20" font="2">get	an	error	(if	you	haven’t	named	your	project	Puzzle).	You’ve	been	warned.</text>
<text top="604" left="54" width="432" height="20" font="2">So,	let’s	analyze	this.	This	is	the	first	line	of	code:</text>
<text top="647" left="54" width="559" height="14" font="5">bIsActive	=	!bIsActive;	//	flip	the	value	of	bIsActive</text>
<text top="679" left="54" width="366" height="20" font="2">This	line	of	code	simply	flips	the	value	of	</text>
<text top="683" left="420" width="93" height="14" font="5">bIsActive</text>
<text top="679" left="513" width="11" height="20" font="2">.	</text>
<text top="683" left="524" width="93" height="14" font="5">bIsActive</text>
<text top="679" left="617" width="40" height="20" font="2">	is	a	</text>
<text top="683" left="658" width="41" height="14" font="5">bool</text>
<text top="679" left="699" width="119" height="20" font="2">	variable	(it	is</text>
<text top="704" left="54" width="90" height="20" font="2">created	in	</text>
<text top="709" left="144" width="145" height="14" font="5">APuzzleBlock.h</text>
<text top="704" left="289" width="38" height="20" font="2">).	If	</text>
<text top="709" left="327" width="93" height="14" font="5">bIsActive</text>
<text top="704" left="420" width="70" height="20" font="2">	is	true,	</text>
<text top="709" left="489" width="104" height="14" font="5">!bIsActive</text>
<text top="704" left="593" width="239" height="20" font="2">	will	be	false.	So,	whenever</text>
<text top="730" left="54" width="601" height="20" font="2">this	line	of	code	is	hit	(which	happens	with	a	click	on	any	block),	the	</text>
<text top="735" left="655" width="93" height="14" font="5">bIsActive</text>
<text top="730" left="748" width="72" height="20" font="2">	value	is</text>
<text top="756" left="54" width="133" height="20" font="2">reversed	(from	</text>
<text top="761" left="187" width="41" height="14" font="5">true</text>
<text top="756" left="228" width="28" height="20" font="2">	to	</text>
<text top="761" left="256" width="52" height="14" font="5">false</text>
<text top="756" left="308" width="76" height="20" font="2">	or	from	</text>
<text top="761" left="384" width="52" height="14" font="5">false</text>
<text top="756" left="436" width="28" height="20" font="2">	to	</text>
<text top="761" left="463" width="41" height="14" font="5">true</text>
<text top="756" left="505" width="13" height="20" font="2">).</text>
<text top="793" left="54" width="325" height="20" font="2">Let’s	consider	the	next	block	of	code:</text>
<text top="836" left="54" width="166" height="14" font="5">if	(	bIsActive	)</text>
<text top="857" left="54" width="31" height="14" font="5">		{</text>
<text top="877" left="54" width="476" height="14" font="5">				BlockMesh-&gt;SetMaterial(0,	OrangeMaterial);</text>
<text top="898" left="54" width="31" height="14" font="5">		}</text>
<text top="918" left="54" width="62" height="14" font="5">		else</text>
<text top="939" left="54" width="31" height="14" font="5">		{</text>
<text top="959" left="54" width="456" height="14" font="5">				BlockMesh-&gt;SetMaterial(0,	BlueMaterial);</text>
<text top="980" left="54" width="31" height="14" font="5">		}</text>
<text top="1011" left="54" width="373" height="20" font="2">We	are	simply	changing	the	block	color.	If	</text>
<text top="1016" left="427" width="93" height="14" font="5">bIsActive</text>
<text top="1011" left="520" width="273" height="20" font="2">	is	true,	then	the	block	becomes</text>
<text top="1037" left="54" width="345" height="20" font="2">orange.	Otherwise,	the	block	turns	blue.</text>
</page>
<page number="133" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="128" height="32" font="7"><b>Exercise</b></text>
<text top="110" left="54" width="758" height="20" font="2">By	now,	you	should	notice	that	the	best	way	to	get	better	at	programming	is	by	doing	it.</text>
<text top="136" left="54" width="609" height="20" font="2">You	have	to	practice	programming	a	lot	to	get	significantly	better	at	it.</text>
<text top="173" left="54" width="732" height="20" font="2">Create	two	integer	variables,	called	x	and	y,	and	read	them	in	from	the	user.	Write	an</text>
<text top="203" left="54" width="21" height="14" font="5">if</text>
<text top="199" left="75" width="6" height="20" font="2">/</text>
<text top="203" left="81" width="41" height="14" font="5">else</text>
<text top="199" left="122" width="564" height="20" font="2">	statement	pair	that	prints	the	name	of	the	bigger-valued	variable.</text>
</page>
<page number="134" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="127" height="32" font="7"><b>Solution</b></text>
<text top="110" left="54" width="684" height="20" font="2">The	solution	of	the	preceding	exercise	is	shown	in	the	following	block	of	code:</text>
<text top="154" left="54" width="93" height="14" font="5">int	x,	y;</text>
<text top="174" left="54" width="704" height="14" font="5">cout	&lt;&lt;	&#34;Enter	two	numbers	integers,	separated	by	a	space	&#34;	&lt;&lt;	endl;</text>
<text top="195" left="54" width="145" height="14" font="5">cin	&gt;&gt;	x	&gt;&gt;	y;</text>
<text top="215" left="54" width="124" height="14" font="5">if(	x	&lt;	y	)	</text>
<text top="236" left="54" width="10" height="14" font="5">{</text>
<text top="256" left="54" width="383" height="14" font="5">		cout	&lt;&lt;	&#34;x	is	less	than	y&#34;	&lt;&lt;	endl;</text>
<text top="277" left="54" width="10" height="14" font="5">}</text>
<text top="297" left="54" width="41" height="14" font="5">else</text>
<text top="318" left="54" width="10" height="14" font="5">{</text>
<text top="338" left="54" width="414" height="14" font="5">		cout	&lt;&lt;	&#34;x	is	greater	than	y&#34;	&lt;&lt;	endl;</text>
<text top="359" left="54" width="10" height="14" font="5">}</text>
<text top="392" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="430" left="54" width="215" height="20" font="2">Don’t	type	a	letter	when	</text>
<text top="434" left="269" width="31" height="14" font="5">cin</text>
<text top="430" left="300" width="166" height="20" font="2">	expects	a	number.	</text>
<text top="434" left="466" width="31" height="14" font="5">cin</text>
<text top="430" left="497" width="319" height="20" font="2">	can	fail	and	give	a	bad	value	to	your</text>
<text top="456" left="54" width="207" height="20" font="2">variable	if	that	happens.</text>
</page>
<page number="135" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="591" height="32" font="7"><b>Branching	code	in	more	than	two	ways</b></text>
<text top="110" left="54" width="741" height="20" font="2">In	the	previous	sections,	we	were	only	able	to	make	the	code	branch	in	one	of	the	two</text>
<text top="136" left="54" width="426" height="20" font="2">ways.	In	pseudocode,	we	had	the	following	code:</text>
<text top="180" left="54" width="290" height="14" font="5">if(	some	condition	is	true	)</text>
<text top="200" left="54" width="10" height="14" font="5">{</text>
<text top="221" left="54" width="155" height="14" font="5">		execute	this;</text>
<text top="241" left="54" width="10" height="14" font="5">}</text>
<text top="262" left="54" width="176" height="14" font="5">else	//	otherwise</text>
<text top="282" left="54" width="10" height="14" font="5">{</text>
<text top="303" left="54" width="155" height="14" font="5">		execute	that;</text>
<text top="323" left="54" width="10" height="14" font="5">}</text>
<text top="356" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="394" left="54" width="753" height="20" font="2">Pseudocode	is	<i>fake	code</i>.	Writing	pseudocode	is	a	great	way	to	brainstorm	and	plan	out</text>
<text top="420" left="54" width="469" height="20" font="2">your	code,	especially	if	you	are	not	quite	used	to	C++.</text>
<text top="457" left="54" width="783" height="20" font="2">This	code	is	a	little	bit	like	a	metaphorical	fork	in	the	road,	with	only	one	of	two	directions</text>
<text top="483" left="54" width="135" height="20" font="2">to	choose	from.</text>
<text top="520" left="54" width="773" height="20" font="2">Sometimes,	we	might	want	to	branch	the	code	in	more	than	just	two	directions.	We	might</text>
<text top="546" left="54" width="746" height="20" font="2">want	the	code	to	branch	in	three	ways,	or	even	more.	For	example,	say	the	direction	in</text>
<text top="572" left="54" width="774" height="20" font="2">which	the	code	goes	depends	on	what	item	the	player	is	currently	holding.	The	player	can</text>
<text top="598" left="54" width="763" height="20" font="2">be	holding	one	of	three	different	items:	a	coin,	key,	or	sand	dollar.	And	C++	allows	that!</text>
<text top="623" left="54" width="627" height="20" font="2">In	fact,	in	C++,	you	can	branch	in	any	number	of	directions	as	you	wish.</text>
</page>
<page number="136" position="absolute" top="0" left="0" height="1262" width="892">
<image top="910" left="54" width="540" height="244" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-136_1.jpg"/>
<text top="61" left="54" width="312" height="32" font="7"><b>The	else	if	statement</b></text>
<text top="110" left="54" width="39" height="20" font="2">The	</text>
<text top="115" left="93" width="73" height="14" font="5">else	if</text>
<text top="110" left="165" width="658" height="20" font="2">	statement	is	a	way	to	code	in	more	than	just	two	possible	branch	directions.</text>
<text top="136" left="54" width="710" height="20" font="2">In	the	following	code	example,	the	code	will	go	in	one	of	the	three	different	ways,</text>
<text top="162" left="54" width="411" height="20" font="2">depending	on	whether	the	player	is	holding	the	</text>
<text top="167" left="465" width="41" height="14" font="5">Coin</text>
<text top="162" left="507" width="11" height="20" font="2">,	</text>
<text top="167" left="517" width="31" height="14" font="5">Key</text>
<text top="162" left="549" width="34" height="20" font="2">,	or	</text>
<text top="167" left="583" width="104" height="14" font="5">Sanddollar</text>
<text top="162" left="686" width="73" height="20" font="2">	objects:</text>
<text top="205" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="226" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="247" left="54" width="104" height="14" font="5">int	main()</text>
<text top="267" left="54" width="10" height="14" font="5">{</text>
<text top="288" left="54" width="539" height="14" font="5">		enum	Item		//	enums	define	a	new	type	of	variable!</text>
<text top="308" left="54" width="31" height="14" font="5">		{</text>
<text top="329" left="54" width="632" height="14" font="5">				Coin,	Key,	Sanddollar	//	variables	of	type	Item	can	have	</text>
<text top="349" left="54" width="331" height="14" font="5">				//	any	one	of	these	3	values</text>
<text top="370" left="54" width="31" height="14" font="5">		}</text>
<text top="390" left="54" width="642" height="14" font="5">		Item	itemInHand	=	Key;		//	Try	changing	this	value	to	Coin,	</text>
<text top="411" left="54" width="404" height="14" font="5">																										//	Sanddollar</text>
<text top="431" left="54" width="259" height="14" font="5">		if(	itemInHand	==	Key	)</text>
<text top="452" left="54" width="31" height="14" font="5">		{</text>
<text top="472" left="54" width="632" height="14" font="5">				cout	&lt;&lt;	&#34;The	key	has	a	lionshead	on	the	handle.&#34;	&lt;&lt;	endl;</text>
<text top="493" left="54" width="663" height="14" font="5">				cout	&lt;&lt;	&#34;You	got	into	a	secret	room	using	the	Key!&#34;	&lt;&lt;	endl;</text>
<text top="513" left="54" width="31" height="14" font="5">		}</text>
<text top="534" left="54" width="321" height="14" font="5">		else	if(	itemInHand	==	Coin	)</text>
<text top="554" left="54" width="31" height="14" font="5">		{</text>
<text top="575" left="54" width="787" height="14" font="5">				cout	&lt;&lt;	&#34;The	coin	is	a	rusted	brassy	color.	It	has	a	picture		of	a	lady	</text>
<text top="595" left="54" width="238" height="14" font="5">with	a	skirt.&#34;	&lt;&lt;	endl;</text>
<text top="616" left="54" width="673" height="14" font="5">				cout	&lt;&lt;	&#34;Using	this	coin	you	could	buy	a	few	things&#34;	&lt;&lt;	endl;</text>
<text top="636" left="54" width="31" height="14" font="5">		}</text>
<text top="657" left="54" width="383" height="14" font="5">		else	if(	itemInHand	==	Sanddollar	)</text>
<text top="678" left="54" width="31" height="14" font="5">		{</text>
<text top="698" left="54" width="642" height="14" font="5">				cout	&lt;&lt;	&#34;The	sanddollar	has	a	little	star	on	it.&#34;	&lt;&lt;	endl;</text>
<text top="719" left="54" width="704" height="14" font="5">				cout	&lt;&lt;	&#34;You	might	be	able	to	trade	it	for	something.&#34;	&lt;&lt;		endl;</text>
<text top="739" left="54" width="31" height="14" font="5">		}</text>
<text top="760" left="54" width="124" height="14" font="5">		return	0;	</text>
<text top="780" left="54" width="10" height="14" font="5">}</text>
<text top="813" left="54" width="50" height="22" font="8"><b>Note</b></text>
<text top="851" left="54" width="687" height="20" font="2">Note	that	the	preceding	code	only	goes	in	one	of	the	three	separate	ways!	In	an	</text>
<text top="856" left="741" width="21" height="14" font="5">if</text>
<text top="851" left="762" width="11" height="20" font="2">,	</text>
<text top="856" left="772" width="41" height="14" font="5">else</text>
<text top="882" left="54" width="21" height="14" font="5">if</text>
<text top="877" left="75" width="47" height="20" font="2">,	and	</text>
<text top="882" left="122" width="73" height="14" font="5">else	if</text>
<text top="877" left="195" width="598" height="20" font="2">	series	of	checks,	we	will	only	ever	go	into	one	of	the	blocks	of	code.</text>
</page>
<page number="137" position="absolute" top="0" left="0" height="1262" width="892">
<text top="59" left="54" width="89" height="22" font="8"><b>Exercise</b></text>
<text top="97" left="54" width="746" height="20" font="2">Use	C++	program	to	answer	the	questions	that	follow.	Be	sure	to	try	these	exercises	in</text>
<text top="123" left="54" width="440" height="20" font="2">order	to	gain	fluency	with	these	equality	operators.</text>
<text top="167" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="187" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="208" left="54" width="104" height="14" font="5">int	main()</text>
<text top="228" left="54" width="10" height="14" font="5">{</text>
<text top="249" left="54" width="83" height="14" font="5">		int	x;</text>
<text top="269" left="54" width="83" height="14" font="5">		int	y;</text>
<text top="290" left="54" width="518" height="14" font="5">		cout	&lt;&lt;	&#34;Enter	an	integer	value	for	x:&#34;	&lt;&lt;	endl;</text>
<text top="310" left="54" width="590" height="14" font="5">		cin	&gt;&gt;	x;	//	This	will	read	in	a	value	from	the	console</text>
<text top="331" left="54" width="549" height="14" font="5">		//	The	read	in	value	will	be	stored	in	the	integer	</text>
<text top="351" left="54" width="590" height="14" font="5">		//	variable	x,	so	the	typed	value	better	be	an	integer!</text>
<text top="372" left="54" width="518" height="14" font="5">		cout	&lt;&lt;	&#34;Enter	an	integer	value	for	y:&#34;	&lt;&lt;	endl;</text>
<text top="392" left="54" width="114" height="14" font="5">		cin	&gt;&gt;	y;</text>
<text top="413" left="54" width="487" height="14" font="5">		cout	&lt;&lt;	&#34;x	=	&#34;	&lt;&lt;	x	&lt;&lt;	&#34;,	y	=	&#34;	&lt;&lt;	y	&lt;&lt;	endl;</text>
<text top="433" left="54" width="383" height="14" font="5">		//	***	Write	new	lines	of	code	here</text>
<text top="454" left="54" width="10" height="14" font="5">}</text>
<text top="485" left="54" width="443" height="20" font="2">Write	some	new	lines	of	code	at	the	spot	that	says	(</text>
<text top="490" left="497" width="176" height="14" font="5">//	***	Write	new…</text>
<text top="485" left="673" width="13" height="20" font="2">):</text>
<text top="522" left="69" width="164" height="20" font="2">1.	 Check	whether	</text>
<text top="526" left="233" width="10" height="14" font="5">x</text>
<text top="522" left="243" width="42" height="20" font="2">	and	</text>
<text top="526" left="285" width="10" height="14" font="5">y</text>
<text top="522" left="295" width="292" height="20" font="2">	are	equal.	If	they	are	equal,	print	</text>
<text top="526" left="588" width="176" height="14" font="5">x	and	y	are	equal</text>
<text top="522" left="764" width="5" height="20" font="2">.</text>
<text top="548" left="97" width="146" height="20" font="2">Otherwise,	print	</text>
<text top="552" left="243" width="218" height="14" font="5">x	and	y	are	not	equal</text>
<text top="548" left="460" width="5" height="20" font="2">.</text>
<text top="574" left="69" width="404" height="20" font="2">2.	 An	exercise	on	inequalities:	check	whether	</text>
<text top="578" left="474" width="10" height="14" font="5">x</text>
<text top="574" left="484" width="133" height="20" font="2">	is	greater	than	</text>
<text top="578" left="617" width="10" height="14" font="5">y</text>
<text top="574" left="627" width="119" height="20" font="2">.	If	it	is,	print	</text>
<text top="578" left="747" width="41" height="14" font="5">x	is</text>
<text top="604" left="97" width="145" height="14" font="5">greater	than	y</text>
<text top="600" left="242" width="156" height="20" font="2">.	Otherwise,	print	</text>
<text top="604" left="399" width="197" height="14" font="5">y	is	greater	than	x</text>
<text top="600" left="595" width="5" height="20" font="2">.</text>
<text top="659" left="54" width="88" height="22" font="8"><b>Solution</b></text>
<text top="698" left="54" width="405" height="20" font="2">To	evaluate	equality,	insert	the	following	code:</text>
<text top="741" left="54" width="124" height="14" font="5">if(	x	==	y	)</text>
<text top="762" left="54" width="10" height="14" font="5">{</text>
<text top="782" left="54" width="394" height="14" font="5">		cout	&lt;&lt;	&#34;x	and	y	are	equal&#34;	&lt;&lt;	endl;</text>
<text top="803" left="54" width="10" height="14" font="5">}</text>
<text top="823" left="54" width="41" height="14" font="5">else</text>
<text top="844" left="54" width="10" height="14" font="5">{</text>
<text top="864" left="54" width="435" height="14" font="5">		cout	&lt;&lt;	&#34;x	and	y	are	not	equal&#34;	&lt;&lt;	endl;</text>
<text top="885" left="54" width="10" height="14" font="5">}</text>
<text top="916" left="54" width="500" height="20" font="2">To	check	which	value	is	greater	insert	the	following	code:</text>
<text top="959" left="54" width="114" height="14" font="5">if(	x	&gt;	y	)</text>
<text top="980" left="54" width="10" height="14" font="5">{</text>
<text top="1001" left="54" width="414" height="14" font="5">		cout	&lt;&lt;	&#34;x	is	greater	than	y&#34;	&lt;&lt;	endl;</text>
<text top="1021" left="54" width="10" height="14" font="5">}</text>
<text top="1042" left="54" width="166" height="14" font="5">else	if(	x	&lt;	y	)</text>
<text top="1062" left="54" width="10" height="14" font="5">{</text>
<text top="1083" left="54" width="414" height="14" font="5">		cout	&lt;&lt;	&#34;y	is	greater	than	x&#34;	&lt;&lt;	endl;</text>
<text top="1103" left="54" width="10" height="14" font="5">}</text>
<text top="1124" left="54" width="456" height="14" font="5">else	//	in	this	case	neither	x	&gt;	y	nor	y	&gt;	x</text>
<text top="1144" left="54" width="10" height="14" font="5">{</text>
<text top="1165" left="54" width="394" height="14" font="5">		cout	&lt;&lt;	&#34;x	and	y	are	equal&#34;	&lt;&lt;	endl;</text>
<text top="1185" left="54" width="10" height="14" font="5">}</text>
</page>
<page number="138" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="322" height="32" font="7"><b>The	switch	statement</b></text>
<text top="110" left="54" width="39" height="20" font="2">The	</text>
<text top="115" left="93" width="62" height="14" font="5">switch</text>
<text top="110" left="155" width="571" height="20" font="2">	statement	allows	your	code	to	branch	in	multiple	ways.	What	the	</text>
<text top="115" left="726" width="62" height="14" font="5">switch</text>
<text top="136" left="54" width="756" height="20" font="2">statement	will	do	is	look	at	the	value	of	a	variable,	and	depending	on	its	value,	the	code</text>
<text top="162" left="54" width="265" height="20" font="2">will	go	in	a	different	direction.</text>
<text top="199" left="54" width="212" height="20" font="2">We’ll	also	introduce	the	</text>
<text top="203" left="266" width="41" height="14" font="5">enum</text>
<text top="199" left="307" width="133" height="20" font="2">	construct	here:</text>
<text top="242" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="263" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="283" left="54" width="518" height="14" font="5">enum	Food		//	enums	define	a	new	type	of	variable!</text>
<text top="304" left="54" width="10" height="14" font="5">{</text>
<text top="324" left="54" width="590" height="14" font="5">		//	a	variable	of	type	Food	can	have	any	of	these	values</text>
<text top="345" left="54" width="73" height="14" font="5">		Fish,</text>
<text top="365" left="54" width="83" height="14" font="5">		Bread,</text>
<text top="386" left="54" width="83" height="14" font="5">		Apple,</text>
<text top="406" left="54" width="83" height="14" font="5">		Orange</text>
<text top="427" left="54" width="21" height="14" font="5">};</text>
<text top="447" left="54" width="104" height="14" font="5">int	main()</text>
<text top="468" left="54" width="10" height="14" font="5">{</text>
<text top="488" left="54" width="456" height="14" font="5">		Food	food	=	Bread;	//	Change	the	food	here</text>
<text top="509" left="54" width="166" height="14" font="5">		switch(	food	)</text>
<text top="530" left="54" width="31" height="14" font="5">		{</text>
<text top="550" left="54" width="145" height="14" font="5">				case	Fish:</text>
<text top="571" left="54" width="487" height="14" font="5">						cout	&lt;&lt;	&#34;Here	fishy	fishy	fishy&#34;	&lt;&lt;	endl;</text>
<text top="591" left="54" width="124" height="14" font="5">						break;</text>
<text top="612" left="54" width="155" height="14" font="5">				case	Bread:</text>
<text top="632" left="54" width="497" height="14" font="5">						cout	&lt;&lt;	&#34;Chomp!	Delicious	bread!&#34;	&lt;&lt;	endl;</text>
<text top="653" left="54" width="124" height="14" font="5">						break;</text>
<text top="673" left="54" width="155" height="14" font="5">				case	Apple:</text>
<text top="694" left="54" width="528" height="14" font="5">						cout	&lt;&lt;	&#34;Mm	fruits	are	good	for	you&#34;	&lt;&lt;	endl;</text>
<text top="714" left="54" width="124" height="14" font="5">						break;</text>
<text top="735" left="54" width="166" height="14" font="5">				case	Orange:</text>
<text top="755" left="54" width="621" height="14" font="5">						cout	&lt;&lt;	&#34;Orange	you	glad	I	didn't	say	banana&#34;	&lt;&lt;	endl;</text>
<text top="776" left="54" width="124" height="14" font="5">						break;</text>
<text top="796" left="54" width="518" height="14" font="5">				default:		//	This	is	where	you	go	in	case	none</text>
<text top="817" left="54" width="435" height="14" font="5">														//	of	the	cases	above	caught</text>
<text top="837" left="54" width="383" height="14" font="5">						cout	&lt;&lt;	&#34;Invalid	food&#34;	&lt;&lt;	endl;</text>
<text top="858" left="54" width="124" height="14" font="5">						break;</text>
<text top="878" left="54" width="31" height="14" font="5">		}</text>
<text top="899" left="54" width="114" height="14" font="5">		return	0;</text>
<text top="920" left="54" width="10" height="14" font="5">}</text>
<text top="951" left="54" width="772" height="20" font="2">Switches	are	like	coin	sorters.	When	you	drop	25	cent	into	the	coin	sorter,	it	finds	its	way</text>
<text top="977" left="54" width="287" height="20" font="2">into	the	25	cent	pile.	Similarly,	a	</text>
<text top="981" left="341" width="62" height="14" font="5">switch</text>
<text top="977" left="403" width="394" height="20" font="2">	statement	will	simply	allow	the	code	to	jump</text>
<text top="1003" left="54" width="702" height="20" font="2">down	to	the	appropriate	section.	The	example	of	sorting	the	coins	is	shown	in	the</text>
<text top="1029" left="54" width="147" height="20" font="2">following	figure:</text>
</page>
<page number="139" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="756" height="696" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-139_1.jpg"/>
<image top="902" left="54" width="540" height="277" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-139_2.jpg"/>
<text top="818" left="54" width="174" height="20" font="2">The	code	inside	the	</text>
<text top="822" left="228" width="62" height="14" font="5">switch</text>
<text top="818" left="290" width="462" height="20" font="2">	statement	will	continue	to	run	(line	by	line)	until	the	</text>
<text top="822" left="752" width="62" height="14" font="5">break;</text>
<text top="844" left="54" width="180" height="20" font="2">statement	is	hit.	The	</text>
<text top="848" left="234" width="52" height="14" font="5">break</text>
<text top="844" left="286" width="278" height="20" font="2">	statement	jumps	you	out	of	the	</text>
<text top="848" left="564" width="62" height="14" font="5">switch</text>
<text top="844" left="626" width="199" height="20" font="2">	statement.	Take	a	look</text>
<text top="870" left="54" width="535" height="20" font="2">at	the	following	diagram	to	understand	how	the	switch	works:</text>
</page>
<page number="140" position="absolute" top="0" left="0" height="1262" width="892">
<text top="90" left="69" width="110" height="20" font="2">1.	 First,	the	</text>
<text top="94" left="179" width="41" height="14" font="5">Food</text>
<text top="90" left="221" width="574" height="20" font="2">	variable	is	inspected.	What	value	does	it	have?	In	this	case,	it	has	</text>
<text top="94" left="795" width="41" height="14" font="5">Fish</text>
<text top="116" left="97" width="74" height="20" font="2">inside	it.</text>
<text top="142" left="69" width="67" height="20" font="2">2.	 The	</text>
<text top="146" left="136" width="62" height="14" font="5">switch</text>
<text top="142" left="198" width="625" height="20" font="2">	command	jumps	down	to	the	correct	case	label.	(If	there	is	no	matching</text>
<text top="168" left="97" width="370" height="20" font="2">case	label,	the	switch	will	just	be	skipped).</text>
<text top="194" left="69" width="67" height="20" font="2">3.	 The	</text>
<text top="198" left="136" width="41" height="14" font="5">cout</text>
<text top="194" left="178" width="189" height="20" font="2">	statement	is	run,	and	</text>
<text top="198" left="367" width="228" height="14" font="5">Here	fishy	fishy	fishy</text>
<text top="194" left="595" width="207" height="20" font="2">	appears	on	the	console.</text>
<text top="219" left="69" width="737" height="20" font="2">4.	 After	inspecting	the	variable	and	printing	the	user	response,	the	break	statement	is</text>
<text top="245" left="97" width="715" height="20" font="2">hit.	This	makes	us	stop	running	lines	of	code	in	the	switch	and	exit	the	switch.	The</text>
<text top="271" left="97" width="716" height="20" font="2">next	line	of	code	that	is	run	is	just	what	would	otherwise	have	been	the	next	line	of</text>
<text top="297" left="97" width="699" height="20" font="2">code	in	the	program	if	the	switch	had	not	been	there	at	all	(after	the	closing	curly</text>
<text top="323" left="97" width="694" height="20" font="2">brace	of	the	switch	statement).	It	is	the	print	statement	at	the	bottom,	which	says</text>
<text top="349" left="97" width="144" height="20" font="2">“End	of	switch”.</text>
<text top="409" left="54" width="167" height="22" font="8"><b>Switch	versus	if</b></text>
<text top="447" left="54" width="185" height="20" font="2">Switches	are	like	the	</text>
<text top="452" left="239" width="21" height="14" font="5">if</text>
<text top="447" left="259" width="17" height="20" font="2">	/	</text>
<text top="452" left="276" width="73" height="14" font="5">else	if</text>
<text top="447" left="349" width="17" height="20" font="2">	/	</text>
<text top="452" left="365" width="41" height="14" font="5">else</text>
<text top="447" left="407" width="377" height="20" font="2">	chains	from	earlier.	However,	switches	can</text>
<text top="473" left="54" width="221" height="20" font="2">generate	code	faster	than	</text>
<text top="478" left="275" width="21" height="14" font="5">if</text>
<text top="473" left="295" width="17" height="20" font="2">	/	</text>
<text top="478" left="312" width="73" height="14" font="5">else	if</text>
<text top="473" left="385" width="17" height="20" font="2">	/	</text>
<text top="478" left="401" width="73" height="14" font="5">else	if</text>
<text top="473" left="474" width="17" height="20" font="2">	/	</text>
<text top="478" left="491" width="41" height="14" font="5">else</text>
<text top="473" left="532" width="289" height="20" font="2">	chains.	Intuitively,	switches	only</text>
<text top="499" left="54" width="724" height="20" font="2">jump	to	the	appropriate	section	of	the	code	to	execute.	If	/	else	if	/	else	chains	might</text>
<text top="525" left="54" width="780" height="20" font="2">involve	more	complicated	comparisons	(including	logical	comparisons),	which	might	take</text>
<text top="551" left="54" width="438" height="20" font="2">more	CPU	time.	The	main	reason	you	will	use	the	</text>
<text top="555" left="492" width="21" height="14" font="5">if</text>
<text top="551" left="513" width="304" height="20" font="2">	statements	is	to	do	more	with	your</text>
<text top="577" left="54" width="391" height="20" font="2">own	custom	comparisons	inside	the	brackets.</text>
<text top="615" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="654" left="54" width="560" height="20" font="2">An	enum	is	really	an	int.	To	verify	this,	print	the	following	code:</text>
<text top="697" left="54" width="290" height="14" font="5">cout	&lt;&lt;		&#34;Fish=&#34;	&lt;&lt;	Fish	&lt;&lt;	</text>
<text top="718" left="54" width="321" height="14" font="5">									&#34;	Bread=&#34;	&lt;&lt;	Bread	&lt;&lt;	</text>
<text top="738" left="54" width="321" height="14" font="5">									&#34;	Apple=&#34;	&lt;&lt;	Apple	&lt;&lt;	</text>
<text top="759" left="54" width="394" height="14" font="5">									&#34;	Orange=&#34;	&lt;&lt;	Orange	&lt;&lt;	endl;</text>
<text top="790" left="54" width="546" height="20" font="2">You	will	see	the	integer	values	of	the	enum—just	so	you	know.</text>
<text top="827" left="54" width="688" height="20" font="2">Sometimes,	programmers	want	to	group	multiple	values	under	the	same	switch	</text>
<text top="831" left="742" width="41" height="14" font="5">case</text>
<text top="827" left="784" width="53" height="20" font="2">	label.</text>
<text top="852" left="54" width="144" height="20" font="2">Say,	we	have	an	</text>
<text top="857" left="198" width="41" height="14" font="5">enum</text>
<text top="852" left="240" width="163" height="20" font="2">,	object	as	follows:</text>
<text top="896" left="54" width="580" height="14" font="5">enum	Vegetables	{	Potato,	Cabbage,	Broccoli,	Zucchini	};</text>
<text top="927" left="54" width="590" height="20" font="2">A	programmer	wants	to	group	all	the	greens	together,	so	he	writes	a	</text>
<text top="931" left="644" width="62" height="14" font="5">switch</text>
<text top="927" left="706" width="111" height="20" font="2">	statement	as</text>
<text top="953" left="54" width="71" height="20" font="2">follows:</text>
<text top="996" left="54" width="135" height="14" font="5">switch(	veg	)</text>
<text top="1017" left="54" width="10" height="14" font="5">{</text>
<text top="1037" left="54" width="601" height="14" font="5">case	Zucchini:	 //	zucchini	falls	through	because	no	break</text>
<text top="1058" left="54" width="363" height="14" font="5">case	Broccoli:	 //	was	written	here</text>
<text top="1078" left="54" width="290" height="14" font="5">		cout	&lt;&lt;	&#34;Greens!&#34;	&lt;&lt;	endl;</text>
<text top="1099" left="54" width="83" height="14" font="5">		break;</text>
<text top="1119" left="54" width="83" height="14" font="5">default:</text>
<text top="1140" left="54" width="331" height="14" font="5">		cout	&lt;&lt;	&#34;Not	greens!&#34;	&lt;&lt;	endl;</text>
<text top="1160" left="54" width="83" height="14" font="5">		break;</text>
<text top="1181" left="54" width="10" height="14" font="5">}</text>
</page>
<page number="141" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="108" height="20" font="2">In	this	case,	</text>
<text top="62" left="162" width="83" height="14" font="5">Zucchini</text>
<text top="57" left="245" width="388" height="20" font="2">	falls	through	and	executes	the	same	code	as	</text>
<text top="62" left="633" width="83" height="14" font="5">Broccoli</text>
<text top="57" left="715" width="89" height="20" font="2">.	The	non-</text>
<text top="83" left="54" width="236" height="20" font="2">green	vegetables	are	in	the	</text>
<text top="88" left="290" width="73" height="14" font="5">default</text>
<text top="83" left="362" width="426" height="20" font="2">	case	label.	To	prevent	a	fall	through,	you	have	to</text>
<text top="109" left="54" width="264" height="20" font="2">remember	to	insert	an	explicit	</text>
<text top="114" left="318" width="52" height="14" font="5">break</text>
<text top="109" left="370" width="183" height="20" font="2">	statement	after	each	</text>
<text top="114" left="553" width="41" height="14" font="5">case</text>
<text top="109" left="595" width="53" height="20" font="2">	label.</text>
<text top="146" left="54" width="783" height="20" font="2">We	can	write	another	version	of	the	same	switch	that	does	not	let	Zucchini	fall	through,	by</text>
<text top="172" left="54" width="272" height="20" font="2">the	explicit	use	of	the	keyword	</text>
<text top="176" left="326" width="52" height="14" font="5">break</text>
<text top="172" left="378" width="122" height="20" font="2">	in	the	switch:</text>
<text top="215" left="54" width="135" height="14" font="5">switch(	veg	)</text>
<text top="236" left="54" width="10" height="14" font="5">{</text>
<text top="256" left="54" width="580" height="14" font="5">case	Zucchini:	 //	zucchini	no	longer	falls	due	to	break</text>
<text top="277" left="54" width="414" height="14" font="5">		cout	&lt;&lt;	&#34;Zucchini	is	a	green&#34;	&lt;&lt;	endl;</text>
<text top="297" left="54" width="528" height="14" font="5">		break;//	stops	case	zucchini	from	falling	through</text>
<text top="318" left="54" width="363" height="14" font="5">case	Broccoli:	 //	was	written	here</text>
<text top="338" left="54" width="414" height="14" font="5">		cout	&lt;&lt;	&#34;Broccoli	is	a	green&#34;	&lt;&lt;	endl;</text>
<text top="359" left="54" width="83" height="14" font="5">		break;</text>
<text top="379" left="54" width="83" height="14" font="5">default:</text>
<text top="400" left="54" width="331" height="14" font="5">		cout	&lt;&lt;	&#34;Not	greens!&#34;	&lt;&lt;	endl;</text>
<text top="420" left="54" width="83" height="14" font="5">		break;</text>
<text top="441" left="54" width="10" height="14" font="5">}</text>
<text top="472" left="54" width="390" height="20" font="2">Note	that	it	is	good	programming	practice	to	</text>
<text top="477" left="444" width="52" height="14" font="5">break</text>
<text top="472" left="495" width="37" height="20" font="2">	the	</text>
<text top="477" left="533" width="73" height="14" font="5">default</text>
<text top="472" left="605" width="225" height="20" font="2">	case	as	well,	even	though</text>
<text top="498" left="54" width="104" height="20" font="2">it	is	the	last	</text>
<text top="503" left="158" width="41" height="14" font="5">case</text>
<text top="498" left="200" width="58" height="20" font="2">	listed.</text>
<text top="536" left="54" width="89" height="22" font="8"><b>Exercise</b></text>
<text top="575" left="54" width="412" height="20" font="2">Complete	the	following	program,	which	has	an	</text>
<text top="579" left="466" width="41" height="14" font="5">enum</text>
<text top="575" left="508" width="286" height="20" font="2">	object	with	a	series	of	mounts	to</text>
<text top="601" left="54" width="187" height="20" font="2">choose	from.	Write	a	</text>
<text top="605" left="241" width="62" height="14" font="5">switch</text>
<text top="601" left="303" width="511" height="20" font="2">	statement	that	prints	the	following	messages	for	the	mount</text>
<text top="627" left="54" width="76" height="20" font="2">selected:</text>
<text top="677" left="59" width="39" height="15" font="10">Horse</text>
<text top="677" left="125" width="203" height="15" font="10">The	steed	is	valiant	and	mighty</text>
<text top="719" left="59" width="34" height="15" font="10">Mare</text>
<text top="719" left="125" width="209" height="15" font="10">This	mare	is	white	and	beautiful</text>
<text top="761" left="59" width="34" height="15" font="10">Mule</text>
<text top="761" left="125" width="293" height="15" font="10">You	are	given	a	mule	to	ride.	You	resent	that.</text>
<text top="803" left="59" width="40" height="15" font="10">Sheep</text>
<text top="803" left="125" width="310" height="15" font="10">Baa!	The	sheep	can	barely	support	your	weight.</text>
<text top="845" left="59" width="130" height="15" font="10">Chocobo Chocobo!</text>
<text top="889" left="54" width="130" height="20" font="2">Remember,	an	</text>
<text top="894" left="184" width="41" height="14" font="5">enum</text>
<text top="889" left="226" width="164" height="20" font="2">	object	is	really	an	</text>
<text top="894" left="389" width="31" height="14" font="5">int</text>
<text top="889" left="421" width="276" height="20" font="2">	statement.	The	first	entry	in	an	</text>
<text top="894" left="696" width="41" height="14" font="5">enum</text>
<text top="889" left="738" width="78" height="20" font="2">	object	is</text>
<text top="915" left="54" width="294" height="20" font="2">by	default	0,	but	you	can	give	the	</text>
<text top="920" left="348" width="41" height="14" font="5">enum</text>
<text top="915" left="390" width="402" height="20" font="2">	object	any	starting	value	you	wish	using	the	=</text>
<text top="941" left="54" width="301" height="20" font="2">operator.	Subsequent	values	in	the	</text>
<text top="945" left="355" width="41" height="14" font="5">enum</text>
<text top="941" left="396" width="95" height="20" font="2">	object	are	</text>
<text top="945" left="492" width="41" height="14" font="5">ints</text>
<text top="941" left="533" width="158" height="20" font="2">	arranged	in	order.</text>
<text top="979" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="1018" left="54" width="154" height="19" font="3"><b>Bit-shifted	enum</b></text>
<text top="1054" left="54" width="248" height="20" font="2">A	common	thing	to	do	in	an	</text>
<text top="1059" left="302" width="41" height="14" font="5">enum</text>
<text top="1054" left="343" width="444" height="20" font="2">	object	is	to	assign	a	bit-shifted	value	to	each	entry:</text>
<text top="1098" left="54" width="218" height="14" font="5">enum	WindowProperties</text>
<text top="1118" left="54" width="10" height="14" font="5">{</text>
<text top="1139" left="54" width="383" height="14" font="5">		Bordered				=	1	&lt;&lt;	0,	//	binary	001</text>
<text top="1159" left="54" width="383" height="14" font="5">		Transparent	=	1	&lt;&lt;	1,	//	binary	010</text>
<text top="1180" left="54" width="383" height="14" font="5">		Modal							=	1	&lt;&lt;	2		//	binary	100</text>
</page>
<page number="142" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="21" height="14" font="5">};</text>
<text top="89" left="54" width="762" height="20" font="2">The	bit-shifted	values	should	be	able	to	combine	the	window	properties.	This	is	how	the</text>
<text top="115" left="54" width="186" height="20" font="2">assignment	will	look:</text>
<text top="158" left="54" width="342" height="14" font="5">//	bitwise	OR	combines	properties</text>
<text top="178" left="54" width="404" height="14" font="5">WindowProperties	wp	=	Bordered	|	Modal;</text>
<text top="210" left="54" width="146" height="20" font="2">Checking	which	</text>
<text top="214" left="200" width="166" height="14" font="5">WindowProperties</text>
<text top="210" left="366" width="329" height="20" font="2">	have	been	set	involves	a	check	using	</text>
<text top="214" left="695" width="114" height="14" font="5">bitwise	AND</text>
<text top="210" left="808" width="6" height="20" font="2">:</text>
<text top="253" left="54" width="445" height="14" font="5">//	bitwise	AND	checks	to	see	if	wp	is	Modal</text>
<text top="274" left="54" width="166" height="14" font="5">if(	wp	&amp;	Modal	)</text>
<text top="294" left="54" width="10" height="14" font="5">{</text>
<text top="315" left="54" width="539" height="14" font="5">cout	&lt;&lt;	&#34;You	are	looking	at	a	modal	window&#34;	&lt;&lt;	endl;</text>
<text top="335" left="54" width="10" height="14" font="5">}</text>
<text top="366" left="54" width="761" height="20" font="2">Bit	shifting	is	a	technique	that	is	slightly	beyond	the	scope	of	this	text,	but	I’ve	included</text>
<text top="392" left="54" width="288" height="20" font="2">this	tip	just	so	you	know	about	it.</text>
<text top="430" left="54" width="88" height="22" font="8"><b>Solution</b></text>
<text top="469" left="54" width="607" height="20" font="2">The	solution	of	the	preceding	exercise	is	shown	in	the	following	code:</text>
<text top="512" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="533" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="553" left="54" width="104" height="14" font="5">enum	Mount</text>
<text top="574" left="54" width="10" height="14" font="5">{</text>
<text top="594" left="54" width="383" height="14" font="5">		Horse=1,	Mare,	Mule,	Sheep,	Chocobo</text>
<text top="615" left="54" width="611" height="14" font="5">		//	Since	Horse=1,	Mare=2,	Mule=3,	Sheep=4,	and	Chocobo=5.</text>
<text top="635" left="54" width="21" height="14" font="5">};</text>
<text top="656" left="54" width="104" height="14" font="5">int	main()</text>
<text top="676" left="54" width="10" height="14" font="5">{</text>
<text top="697" left="54" width="539" height="14" font="5">		int	mount;		//	We'll	use	an	int	variable	for	mount</text>
<text top="718" left="54" width="300" height="14" font="5">														//	so	cin	works</text>
<text top="738" left="54" width="404" height="14" font="5">		cout	&lt;&lt;	&#34;Choose	your	mount:&#34;	&lt;&lt;	endl;</text>
<text top="759" left="54" width="373" height="14" font="5">		cout	&lt;&lt;	Horse	&lt;&lt;	&#34;	Horse&#34;	&lt;&lt;	endl;</text>
<text top="779" left="54" width="352" height="14" font="5">		cout	&lt;&lt;	Mare	&lt;&lt;	&#34;	Mare&#34;	&lt;&lt;	endl;</text>
<text top="800" left="54" width="352" height="14" font="5">		cout	&lt;&lt;	Mule	&lt;&lt;	&#34;	Mule&#34;	&lt;&lt;	endl;</text>
<text top="820" left="54" width="373" height="14" font="5">		cout	&lt;&lt;	Sheep	&lt;&lt;	&#34;	Sheep&#34;	&lt;&lt;	endl;</text>
<text top="841" left="54" width="414" height="14" font="5">		cout	&lt;&lt;	Chocobo	&lt;&lt;	&#34;	Chocobo&#34;	&lt;&lt;	endl;</text>
<text top="861" left="54" width="673" height="14" font="5">		cout	&lt;&lt;	&#34;Enter	a	number	from	1	to	5	to	choose	a	mount&#34;	&lt;&lt;	endl;</text>
<text top="882" left="54" width="155" height="14" font="5">		cin	&gt;&gt;	mount;</text>
<text top="902" left="54" width="539" height="14" font="5">				//	Write	your	switch	here.	Describe	what	happens</text>
<text top="923" left="54" width="549" height="14" font="5">				//	when	you	mount	each	animal	in	the	switch	below</text>
<text top="943" left="54" width="176" height="14" font="5">		switch(	mount	)</text>
<text top="964" left="54" width="31" height="14" font="5">		{</text>
<text top="984" left="54" width="124" height="14" font="5">				default:</text>
<text top="1005" left="54" width="394" height="14" font="5">						cout	&lt;&lt;	&#34;Invalid	mount&#34;	&lt;&lt;	endl;</text>
<text top="1025" left="54" width="124" height="14" font="5">						break;</text>
<text top="1046" left="54" width="31" height="14" font="5">		}</text>
<text top="1066" left="54" width="93" height="14" font="5">return	0;</text>
<text top="1087" left="54" width="10" height="14" font="5">}</text>
</page>
<page number="143" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="144" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="182" height="39" font="0"><b>Summary</b></text>
<text top="120" left="54" width="759" height="20" font="2">In	this	chapter,	you	learned	how	to	branch	the	code.	Branching	makes	it	possible	for	the</text>
<text top="146" left="54" width="562" height="20" font="2">code	to	go	in	a	different	direction	instead	of	going	straight	down.</text>
<text top="183" left="54" width="776" height="20" font="2">In	the	next	chapter,	we	will	move	on	to	a	different	kind	of	control	flow	statement	that	will</text>
<text top="209" left="54" width="767" height="20" font="2">allow	you	to	go	back	and	repeat	a	line	of	code	a	certain	number	of	times.	The	sections	of</text>
<text top="235" left="54" width="316" height="20" font="2">code	that	repeat	will	be	called	loops.</text>
</page>
<page number="145" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="146" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="361" height="39" font="0"><b>Chapter	4.	Looping</b></text>
<text top="120" left="54" width="359" height="20" font="2">In	the	previous	chapter,	we	discussed	the	</text>
<text top="124" left="413" width="21" height="14" font="5">if</text>
<text top="120" left="434" width="138" height="20" font="2">	statement.	The	</text>
<text top="124" left="571" width="21" height="14" font="5">if</text>
<text top="120" left="592" width="218" height="20" font="2">	statement	enables	you	to</text>
<text top="146" left="54" width="444" height="20" font="2">put	a	condition	on	the	execution	of	a	block	of	code.</text>
<text top="183" left="54" width="783" height="20" font="2">In	this	chapter,	we	will	explore	loops,	which	are	code	structures	that	enable	you	to	repeat	a</text>
<text top="209" left="54" width="736" height="20" font="2">block	of	code	under	certain	conditions.	We	stop	repeating	that	block	of	code	once	the</text>
<text top="235" left="54" width="214" height="20" font="2">condition	becomes	false.</text>
<text top="271" left="54" width="452" height="20" font="2">In	this	chapter,	we	will	explore	the	following	topics:</text>
<text top="308" left="97" width="105" height="20" font="2">While	loops</text>
<text top="334" left="97" width="132" height="20" font="2">Do/while	loops</text>
<text top="360" left="97" width="82" height="20" font="2">For	loops</text>
<text top="386" left="97" width="509" height="20" font="2">A	simple	example	of	a	practical	loop	within	Unreal	Engine</text>
</page>
<page number="147" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="271" height="39" font="0"><b>The	while	loop</b></text>
<text top="120" left="54" width="39" height="20" font="2">The	</text>
<text top="124" left="93" width="52" height="14" font="5">while</text>
<text top="120" left="145" width="686" height="20" font="2">	loop	is	used	to	run	a	section	of	the	code	repeatedly.	This	is	useful	if	you	have	a</text>
<text top="146" left="54" width="743" height="20" font="2">set	of	actions	that	must	be	done	repeatedly	to	accomplish	some	goal.	For	example,	the</text>
<text top="176" left="54" width="52" height="14" font="5">while</text>
<text top="172" left="106" width="602" height="20" font="2">	loop	in	the	following	code	repeatedly	prints	the	value	of	the	variable	</text>
<text top="176" left="708" width="10" height="14" font="5">x</text>
<text top="172" left="719" width="61" height="20" font="2">	as	it	is</text>
<text top="198" left="54" width="215" height="20" font="2">incremented	from	1	to	5:</text>
<text top="241" left="54" width="104" height="14" font="5">int	x	=	1;</text>
<text top="262" left="54" width="673" height="14" font="5">while(	x	&lt;=	5	)	//	may	only	enter	the	body	of	the	while	when	x&lt;=5</text>
<text top="282" left="54" width="10" height="14" font="5">{</text>
<text top="303" left="54" width="321" height="14" font="5">		cout	&lt;&lt;	&#34;x	is	&#34;	&lt;&lt;	x	&lt;&lt;	endl;</text>
<text top="323" left="54" width="62" height="14" font="5">		x++;</text>
<text top="344" left="54" width="10" height="14" font="5">}</text>
<text top="364" left="54" width="280" height="14" font="5">cout	&lt;&lt;	&#34;Finished&#34;	&lt;&lt;	endl;</text>
<text top="396" left="54" width="381" height="20" font="2">This	is	the	output	of	the	preceding	program:</text>
<text top="439" left="54" width="62" height="14" font="5">x	is	1</text>
<text top="459" left="54" width="62" height="14" font="5">x	is	2</text>
<text top="480" left="54" width="62" height="14" font="5">x	is	3</text>
<text top="500" left="54" width="62" height="14" font="5">x	is	4</text>
<text top="521" left="54" width="62" height="14" font="5">x	is	5</text>
<text top="541" left="54" width="83" height="14" font="5">Finished</text>
<text top="573" left="54" width="374" height="20" font="2">In	the	first	line	of	code,	an	integer	variable	</text>
<text top="577" left="428" width="10" height="14" font="5">x</text>
<text top="573" left="438" width="347" height="20" font="2">	is	created	and	set	to	1.	Then,	we	go	the	</text>
<text top="577" left="785" width="52" height="14" font="5">while</text>
<text top="599" left="54" width="131" height="20" font="2">condition.	The	</text>
<text top="603" left="185" width="52" height="14" font="5">while</text>
<text top="599" left="237" width="226" height="20" font="2">	condition	says	that	while	</text>
<text top="603" left="463" width="10" height="14" font="5">x</text>
<text top="599" left="473" width="345" height="20" font="2">	is	less	than	or	equal	to	5,	you	must	stay</text>
<text top="625" left="54" width="285" height="20" font="2">in	the	block	of	code	that	follows.</text>
<text top="661" left="54" width="739" height="20" font="2">Each	iteration	of	the	loop	(an	iteration	means	going	once	around	the	loop)	gets	a	little</text>
<text top="687" left="54" width="704" height="20" font="2">more	done	from	the	task	(of	printing	the	numbers	1	to	5).	We	program	the	loop	to</text>
<text top="713" left="54" width="405" height="20" font="2">automatically	exit	once	the	task	is	done	(when	</text>
<text top="718" left="459" width="62" height="14" font="5">x	&lt;=	5</text>
<text top="713" left="521" width="159" height="20" font="2">	is	no	longer	true).</text>
<text top="750" left="54" width="123" height="20" font="2">Similar	to	the	</text>
<text top="754" left="177" width="21" height="14" font="5">if</text>
<text top="750" left="198" width="566" height="20" font="2">	statement	of	the	previous	chapter,	entry	into	the	block	below	the	</text>
<text top="754" left="763" width="52" height="14" font="5">while</text>
<text top="776" left="54" width="628" height="20" font="2">loop	is	only	allowed	if	you	meet	the	condition	within	the	brackets	of	the	</text>
<text top="780" left="682" width="52" height="14" font="5">while</text>
<text top="776" left="734" width="73" height="20" font="2">	loop	(in</text>
<text top="802" left="54" width="206" height="20" font="2">the	preceding	example,	</text>
<text top="806" left="260" width="62" height="14" font="5">x	&lt;=	5</text>
<text top="802" left="322" width="304" height="20" font="2">).	You	can	try	mentally	subbing	an	</text>
<text top="806" left="626" width="21" height="14" font="5">if</text>
<text top="802" left="647" width="172" height="20" font="2">	loop	in	the	place	of</text>
<text top="828" left="54" width="32" height="20" font="2">the	</text>
<text top="832" left="86" width="52" height="14" font="5">while</text>
<text top="828" left="138" width="330" height="20" font="2">	loop,	as	shown	in	the	following	code:</text>
<text top="871" left="54" width="104" height="14" font="5">int	x	=	1;</text>
<text top="891" left="54" width="621" height="14" font="5">if(	x	&lt;=	5	)	//	you	may	only	enter	the	block	below	when	x&lt;=5</text>
<text top="912" left="54" width="10" height="14" font="5">{</text>
<text top="932" left="54" width="321" height="14" font="5">		cout	&lt;&lt;	&#34;x	is	&#34;	&lt;&lt;	x	&lt;&lt;	endl;</text>
<text top="953" left="54" width="62" height="14" font="5">		x++;</text>
<text top="974" left="54" width="10" height="14" font="5">}</text>
<text top="994" left="54" width="342" height="14" font="5">cout	&lt;&lt;	&#34;End	of	program&#34;	&lt;&lt;	endl;</text>
<text top="1025" left="54" width="371" height="20" font="2">The	preceding	code	sample	will	only	print	</text>
<text top="1030" left="425" width="62" height="14" font="5">x	is	1</text>
<text top="1025" left="487" width="59" height="20" font="2">.	So,	a	</text>
<text top="1030" left="547" width="52" height="14" font="5">while</text>
<text top="1025" left="598" width="200" height="20" font="2">	loop	is	exactly	like	an	</text>
<text top="1030" left="799" width="21" height="14" font="5">if</text>
<text top="1051" left="54" width="721" height="20" font="2">statement,	only	it	has	this	special	property	of	automatically	repeating	itself	until	the</text>
<text top="1077" left="54" width="328" height="20" font="2">condition	between	the	brackets	of	the	</text>
<text top="1082" left="382" width="52" height="14" font="5">while</text>
<text top="1077" left="434" width="130" height="20" font="2">	loop	becomes	</text>
<text top="1082" left="564" width="52" height="14" font="5">false</text>
<text top="1077" left="616" width="5" height="20" font="2">.</text>
<text top="1115" left="54" width="50" height="22" font="8"><b>Note</b></text>
<text top="1154" left="54" width="334" height="20" font="2">I’d	like	to	explain	the	repetition	of	the	</text>
<text top="1158" left="388" width="52" height="14" font="5">while</text>
<text top="1154" left="440" width="383" height="20" font="2">	loop	using	a	video	game.	If	you	don’t	know</text>
<text top="1180" left="54" width="631" height="20" font="2">Valve’s	<i>Portal</i>,	you	should	play	it,	if	only	to	understand	loops.	Check	out</text>
</page>
<page number="148" position="absolute" top="0" left="0" height="1262" width="892">
<image top="152" left="54" width="432" height="317" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-148_1.jpg"/>
<text top="57" left="54" width="447" height="20" font="1"><a href="https://www.youtube.com/watch?v=TluRVBhmf8w">https://www.youtube.com/watch?v=TluRVBhmf8w</a></text>
<text top="57" left="501" width="158" height="20" font="2"><a href="https://www.youtube.com/watch?v=TluRVBhmf8w">	</a>for	a	demo	video.</text>
<text top="94" left="54" width="39" height="20" font="2">The	</text>
<text top="99" left="93" width="52" height="14" font="5">while</text>
<text top="94" left="145" width="631" height="20" font="2">	loops	have	a	kind	of	magic	<i>portal</i>	at	the	bottom,	which	cause	the	loop	to</text>
<text top="120" left="54" width="490" height="20" font="2">repeat.	The	following	screenshot	illustrates	what	I	mean:</text>
<text top="506" left="96" width="701" height="20" font="4"><i>There	is	a	portal	at	the	end	of	the	while	loop	that	takes	you	back	to	the	beginning</i></text>
<text top="575" left="54" width="765" height="20" font="2">In	the	preceding	screenshot,	we	loop	back	from	the	orange	portal	(marked	<b>O</b>)	to	the	blue</text>
<text top="601" left="54" width="780" height="20" font="2">portal	(marked	<b>B</b>).	This	is	our	first	time	of	being	able	to	go	back	in	the	code.	It	is	like	time</text>
<text top="627" left="54" width="342" height="20" font="2">travel,	only	for	the	code.	How	exciting!</text>
<text top="663" left="54" width="179" height="20" font="2">The	only	way	past	a	</text>
<text top="668" left="233" width="52" height="14" font="5">while</text>
<text top="663" left="285" width="539" height="20" font="2">	loop	block	is	to	not	meet	the	entry	condition.	In	the	preceding</text>
<text top="689" left="54" width="237" height="20" font="2">example,	once	the	value	of	</text>
<text top="694" left="291" width="10" height="14" font="5">x</text>
<text top="689" left="302" width="140" height="20" font="2">	becomes	6	(so,	</text>
<text top="694" left="441" width="62" height="14" font="5">x	&lt;=	5</text>
<text top="689" left="504" width="322" height="20" font="2">	becomes	false),	we	will	not	enter	the</text>
<text top="720" left="54" width="52" height="14" font="5">while</text>
<text top="715" left="106" width="732" height="20" font="2">	loop	again.	Since	the	orange	portal	is	inside	the	loop,	we’ll	be	able	to	get	to	finished</text>
<text top="741" left="54" width="46" height="20" font="2">once	</text>
<text top="746" left="100" width="10" height="14" font="5">x</text>
<text top="741" left="111" width="103" height="20" font="2">	becomes	6.</text>
</page>
<page number="149" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="201" height="32" font="7"><b>Infinite	loops</b></text>
<text top="110" left="54" width="738" height="20" font="2">You	can	get	stuck	inside	the	same	loop	forever.	Consider	the	modified	program	in	the</text>
<text top="136" left="54" width="556" height="20" font="2">following	block	of	code	(what	do	you	think	will	be	the	output?):</text>
<text top="180" left="54" width="104" height="14" font="5">int	x	=	1;</text>
<text top="200" left="54" width="673" height="14" font="5">while(	x	&lt;=	5	)	//	may	only	enter	the	body	of	the	while	when	x&lt;=5</text>
<text top="221" left="54" width="10" height="14" font="5">{</text>
<text top="241" left="54" width="321" height="14" font="5">		cout	&lt;&lt;	&#34;x	is	&#34;	&lt;&lt;	x	&lt;&lt;	endl;</text>
<text top="262" left="54" width="10" height="14" font="5">}</text>
<text top="282" left="54" width="342" height="14" font="5">cout	&lt;&lt;	&#34;End	of	program&#34;	&lt;&lt;	endl;</text>
<text top="313" left="54" width="282" height="20" font="2">This	is	how	the	output	will	look:</text>
<text top="357" left="54" width="62" height="14" font="5">x	is	1</text>
<text top="377" left="54" width="62" height="14" font="5">x	is	1</text>
<text top="398" left="54" width="73" height="14" font="5">x	is	1…</text>
<text top="418" left="54" width="176" height="14" font="5">(repeats	forever)</text>
<text top="450" left="54" width="764" height="20" font="2">The	loop	repeats	forever	because	we	removed	the	line	of	code	that	changed	the	value	of	</text>
<text top="454" left="818" width="10" height="14" font="5">x</text>
<text top="450" left="828" width="5" height="20" font="2">.</text>
<text top="475" left="54" width="127" height="20" font="2">If	the	value	of	</text>
<text top="480" left="181" width="10" height="14" font="5">x</text>
<text top="475" left="191" width="632" height="20" font="2">	stays	the	same	and	is	not	allowed	to	increase,	we	will	be	stuck	inside	the</text>
<text top="501" left="54" width="104" height="20" font="2">body	of	the	</text>
<text top="506" left="158" width="52" height="14" font="5">while</text>
<text top="501" left="210" width="521" height="20" font="2">	loop.	This	is	because	the	loop’s	exit	condition	(the	value	of	</text>
<text top="506" left="730" width="10" height="14" font="5">x</text>
<text top="501" left="741" width="81" height="20" font="2">	becomes</text>
<text top="527" left="54" width="168" height="20" font="2">6)	cannot	be	met	if	</text>
<text top="532" left="222" width="10" height="14" font="5">x</text>
<text top="527" left="233" width="330" height="20" font="2">	does	not	change	inside	the	loop	body.</text>
<text top="564" left="54" width="762" height="20" font="2">The	following	exercises	will	use	all	the	concepts	from	the	previous	chapters,	such	as	the</text>
<text top="594" left="54" width="21" height="14" font="5">+=</text>
<text top="590" left="75" width="703" height="20" font="2">	and	decrement	OPS.	If	you’ve	forgotten	something,	go	back	and	reread	the</text>
<text top="616" left="54" width="155" height="20" font="2">previous	sections.</text>
</page>
<page number="150" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="142" height="32" font="7"><b>Exercises</b></text>
<text top="110" left="69" width="97" height="20" font="2">1.	 Write	a	</text>
<text top="115" left="166" width="52" height="14" font="5">while</text>
<text top="110" left="218" width="396" height="20" font="2">	loop	that	will	print	the	numbers	from	1	to	10.</text>
<text top="136" left="69" width="97" height="20" font="2">2.	 Write	a	</text>
<text top="141" left="166" width="52" height="14" font="5">while</text>
<text top="136" left="218" width="508" height="20" font="2">	loop	that	will	print	the	numbers	from	10	to	1	(backwards).</text>
<text top="162" left="69" width="97" height="20" font="2">3.	 Write	a	</text>
<text top="167" left="166" width="52" height="14" font="5">while</text>
<text top="162" left="218" width="617" height="20" font="2">	loop	that	will	print	numbers	2	to	20,	incrementing	by	2	(for	example	2,</text>
<text top="188" left="97" width="103" height="20" font="2">4,	6,	and	8).</text>
<text top="214" left="69" width="97" height="20" font="2">4.	 Write	a	</text>
<text top="218" left="166" width="52" height="14" font="5">while</text>
<text top="214" left="218" width="610" height="20" font="2">	loop	that	will	print	the	numbers	1	to	16	and	their	squares	beside	them.</text>
<text top="272" left="54" width="539" height="20" font="2">The	following	is	an	example	program	output	of	the	exercise	4:</text>
<text top="323" left="59" width="23" height="15" font="10">1 1</text>
<text top="365" left="59" width="23" height="15" font="10">2 4</text>
<text top="407" left="59" width="23" height="15" font="10">3 9</text>
<text top="449" left="59" width="31" height="15" font="10">4 16</text>
<text top="491" left="59" width="31" height="15" font="10">5 25</text>
</page>
<page number="151" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="141" height="32" font="7"><b>Solutions</b></text>
<text top="110" left="54" width="524" height="20" font="2">The	code	solutions	of	the	preceding	exercises	are	as	follows:</text>
<text top="147" left="69" width="197" height="20" font="2">1.	 The	solution	of	the	</text>
<text top="151" left="266" width="52" height="14" font="5">while</text>
<text top="147" left="318" width="480" height="20" font="2">	loop	that	prints	the	numbers	from	1	to	10	is	as	follows:</text>
<text top="190" left="97" width="104" height="14" font="5">int	x	=	1;</text>
<text top="211" left="97" width="166" height="14" font="5">while(	x	&lt;=	10	)</text>
<text top="231" left="97" width="10" height="14" font="5">{</text>
<text top="252" left="97" width="207" height="14" font="5">		cout	&lt;&lt;	x	&lt;&lt;	endl;</text>
<text top="272" left="97" width="62" height="14" font="5">		x++;</text>
<text top="293" left="97" width="10" height="14" font="5">}</text>
<text top="324" left="69" width="197" height="20" font="2">2.	 The	solution	of	the	</text>
<text top="329" left="266" width="52" height="14" font="5">while</text>
<text top="324" left="318" width="500" height="20" font="2">	loop	that	prints	the	numbers	from	10	to	1	in	backwards	is</text>
<text top="350" left="97" width="94" height="20" font="2">as	follows:</text>
<text top="393" left="97" width="280" height="14" font="5">int	x	=	10;	//	start	x	high</text>
<text top="414" left="97" width="487" height="14" font="5">while(	x	&gt;=	1	)	//	go	until	x	becomes	0	or	less</text>
<text top="434" left="97" width="10" height="14" font="5">{</text>
<text top="455" left="97" width="207" height="14" font="5">		cout	&lt;&lt;	x	&lt;&lt;	endl;</text>
<text top="476" left="97" width="269" height="14" font="5">		x--;	//	take	x	down	by	1</text>
<text top="496" left="97" width="10" height="14" font="5">}</text>
<text top="527" left="69" width="197" height="20" font="2">3.	 The	solution	of	the	</text>
<text top="532" left="266" width="52" height="14" font="5">while</text>
<text top="527" left="318" width="507" height="20" font="2">	loop	that	prints	the	numbers	from	2	to	20	incrementing	by</text>
<text top="553" left="97" width="130" height="20" font="2">2	is	as	follows:</text>
<text top="597" left="97" width="104" height="14" font="5">int	x	=	2;</text>
<text top="617" left="97" width="166" height="14" font="5">while(	x	&lt;=	20	)</text>
<text top="638" left="97" width="10" height="14" font="5">{</text>
<text top="658" left="97" width="207" height="14" font="5">		cout	&lt;&lt;	x	&lt;&lt;	endl;</text>
<text top="679" left="97" width="290" height="14" font="5">		x+=2;	//	increase	x	by	2's</text>
<text top="699" left="97" width="10" height="14" font="5">}</text>
<text top="730" left="69" width="197" height="20" font="2">4.	 The	solution	of	the	</text>
<text top="735" left="266" width="52" height="14" font="5">while</text>
<text top="730" left="318" width="519" height="20" font="2">	loop	that	prints	the	numbers	from	1	to	16	with	their	squares</text>
<text top="756" left="97" width="114" height="20" font="2">is	as	follows:</text>
<text top="800" left="97" width="104" height="14" font="5">int	x	=	1;</text>
<text top="820" left="97" width="166" height="14" font="5">while(	x	&lt;=	16	)</text>
<text top="841" left="97" width="10" height="14" font="5">{</text>
<text top="861" left="97" width="663" height="14" font="5">		cout	&lt;&lt;	x	&lt;&lt;	&#34;			&#34;	&lt;&lt;	x*x	&lt;&lt;	endl;	//	print	x	and	it's		square</text>
<text top="882" left="97" width="62" height="14" font="5">		x++;</text>
<text top="902" left="97" width="10" height="14" font="5">}</text>
</page>
<page number="152" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="153" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="329" height="39" font="0"><b>The	do/while	loop</b></text>
<text top="120" left="54" width="39" height="20" font="2">The	</text>
<text top="124" left="93" width="83" height="14" font="5">do/while</text>
<text top="120" left="176" width="266" height="20" font="2">	loop	is	almost	identical	to	the	</text>
<text top="124" left="441" width="52" height="14" font="5">while</text>
<text top="120" left="493" width="259" height="20" font="2">	loop.	Here’s	an	example	of	a	</text>
<text top="124" left="752" width="83" height="14" font="5">do/while</text>
<text top="146" left="54" width="291" height="20" font="2">loop	that	is	equivalent	to	the	first	</text>
<text top="150" left="345" width="52" height="14" font="5">while</text>
<text top="146" left="397" width="207" height="20" font="2">	loop	that	we	examined:</text>
<text top="189" left="54" width="104" height="14" font="5">int	x	=	1;</text>
<text top="210" left="54" width="21" height="14" font="5">do</text>
<text top="230" left="54" width="10" height="14" font="5">{</text>
<text top="251" left="54" width="321" height="14" font="5">		cout	&lt;&lt;	&#34;x	is	&#34;	&lt;&lt;	x	&lt;&lt;	endl;</text>
<text top="271" left="54" width="62" height="14" font="5">		x++;</text>
<text top="292" left="54" width="518" height="14" font="5">}	while(	x	&lt;=	5	);	//	may	only	loop	back	when	x&lt;=5</text>
<text top="312" left="54" width="342" height="14" font="5">cout	&lt;&lt;	&#34;End	of	program&#34;	&lt;&lt;	endl;</text>
<text top="344" left="54" width="512" height="20" font="2">The	only	difference	here	is	that	we	don’t	have	to	check	the	</text>
<text top="348" left="566" width="52" height="14" font="5">while</text>
<text top="344" left="618" width="188" height="20" font="2">	condition	on	our	first</text>
<text top="370" left="54" width="343" height="20" font="2">entry	into	the	loop.	This	means	that	the	</text>
<text top="374" left="397" width="83" height="14" font="5">do/while</text>
<text top="370" left="480" width="340" height="20" font="2">	loop’s	body	is	always	executed	at	least</text>
<text top="396" left="54" width="126" height="20" font="2">once	(where	a	</text>
<text top="400" left="180" width="52" height="14" font="5">while</text>
<text top="396" left="232" width="494" height="20" font="2">	loop	can	be	skipped	entirely	if	the	condition	to	enter	the	</text>
<text top="400" left="726" width="52" height="14" font="5">while</text>
<text top="396" left="778" width="44" height="20" font="2">	loop</text>
<text top="421" left="54" width="20" height="20" font="2">is	</text>
<text top="426" left="74" width="52" height="14" font="5">false</text>
<text top="421" left="126" width="294" height="20" font="2">	when	you	hit	it	for	the	first	time).</text>
</page>
<page number="154" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="155" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="227" height="39" font="0"><b>The	for	loop</b></text>
<text top="120" left="54" width="39" height="20" font="2">The	</text>
<text top="124" left="93" width="31" height="14" font="5">for</text>
<text top="120" left="124" width="402" height="20" font="2">	loop	has	a	slightly	different	anatomy	than	the	</text>
<text top="124" left="526" width="52" height="14" font="5">while</text>
<text top="120" left="578" width="201" height="20" font="2">	loop,	but	both	are	very</text>
<text top="146" left="54" width="64" height="20" font="2">similar.</text>
<text top="183" left="54" width="277" height="20" font="2">Let’s	examine	the	anatomy	of	a	</text>
<text top="187" left="331" width="31" height="14" font="5">for</text>
<text top="183" left="362" width="306" height="20" font="2">	loop	as	compared	to	an	equivalent	</text>
<text top="187" left="668" width="52" height="14" font="5">while</text>
<text top="183" left="720" width="96" height="20" font="2">	loop.	Take</text>
<text top="209" left="54" width="372" height="20" font="2">an	example	of	the	following	code	snippets:</text>
<text top="259" left="59" width="85" height="14" font="9"><b>The	for	loop</b></text>
<text top="259" left="292" width="171" height="14" font="9"><b>An	equivalent	while	loop</b></text>
<text top="322" left="59" width="225" height="10" font="11">for(	int	x	=	1;	x	&lt;=	5;	x++	)</text>
<text top="337" left="59" width="8" height="10" font="11">{</text>
<text top="352" left="59" width="155" height="10" font="11">		cout	&lt;&lt;	x	&lt;&lt;	endl;</text>
<text top="367" left="59" width="8" height="10" font="11">}</text>
<text top="306" left="292" width="78" height="10" font="11">int	x	=	1;</text>
<text top="322" left="292" width="116" height="10" font="11">while(	x	&lt;=	5	)</text>
<text top="337" left="292" width="8" height="10" font="11">{</text>
<text top="352" left="292" width="155" height="10" font="11">		cout	&lt;&lt;	x	&lt;&lt;	endl;</text>
<text top="367" left="292" width="47" height="10" font="11">		x++;</text>
<text top="382" left="292" width="8" height="10" font="11">}</text>
<text top="426" left="54" width="39" height="20" font="2">The	</text>
<text top="430" left="93" width="31" height="14" font="5">for</text>
<text top="426" left="124" width="641" height="20" font="2">	loop	has	three	statements	inside	its	brackets.	Let’s	examine	them	in	order.</text>
<text top="463" left="54" width="222" height="20" font="2">The	first	statement	of	the	</text>
<text top="467" left="276" width="31" height="14" font="5">for</text>
<text top="463" left="307" width="56" height="20" font="2">	loop	(</text>
<text top="467" left="364" width="93" height="14" font="5">int	x	=	1</text>
<text top="463" left="457" width="354" height="20" font="2">;)	only	gets	executed	once,	when	we	first</text>
<text top="488" left="54" width="184" height="20" font="2">enter	the	body	of	the	</text>
<text top="493" left="238" width="31" height="14" font="5">for</text>
<text top="488" left="269" width="514" height="20" font="2">	loop.	It	is	typically	used	to	initialize	the	value	of	the	loop’s</text>
<text top="514" left="54" width="366" height="20" font="2">counter	variable	(in	this	case,	the	variable	</text>
<text top="519" left="420" width="10" height="14" font="5">x</text>
<text top="514" left="430" width="299" height="20" font="2">).	The	second	statement	inside	the	</text>
<text top="519" left="729" width="31" height="14" font="5">for</text>
<text top="514" left="760" width="56" height="20" font="2">	loop	(</text>
<text top="519" left="816" width="10" height="14" font="5">x</text>
<text top="545" left="54" width="41" height="14" font="5">&lt;=	5</text>
<text top="540" left="95" width="375" height="20" font="2">;)	is	the	loop’s	repeat	condition.	As	long	as	</text>
<text top="545" left="471" width="62" height="14" font="5">x	&lt;=	5</text>
<text top="540" left="533" width="282" height="20" font="2">,	we	must	continue	to	stay	inside</text>
<text top="566" left="54" width="135" height="20" font="2">the	body	of	the	</text>
<text top="571" left="189" width="31" height="14" font="5">for</text>
<text top="566" left="221" width="438" height="20" font="2">	loop.	The	last	statement	inside	the	brackets	of	the	</text>
<text top="571" left="659" width="31" height="14" font="5">for</text>
<text top="566" left="690" width="56" height="20" font="2">	loop	(</text>
<text top="571" left="746" width="31" height="14" font="5">x++</text>
<text top="566" left="777" width="53" height="20" font="2">;)	gets</text>
<text top="592" left="54" width="378" height="20" font="2">executed	after	we	complete	the	body	of	the	</text>
<text top="597" left="432" width="31" height="14" font="5">for</text>
<text top="592" left="463" width="138" height="20" font="2">	loop	each	time.</text>
<text top="629" left="54" width="583" height="20" font="2">The	following	sequence	of	diagrams	explain	the	progression	of	the	</text>
<text top="633" left="637" width="31" height="14" font="5">for</text>
<text top="629" left="668" width="50" height="20" font="2">	loop:</text>
</page>
<page number="156" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="756" height="621" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-156_1.jpg"/>
</page>
<page number="157" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="142" height="32" font="7"><b>Exercises</b></text>
<text top="110" left="69" width="97" height="20" font="2">1.	 Write	a	</text>
<text top="115" left="166" width="31" height="14" font="5">for</text>
<text top="110" left="197" width="506" height="20" font="2">	loop	that	will	gather	the	sum	of	the	numbers	from	1	to	10.</text>
<text top="136" left="69" width="97" height="20" font="2">2.	 Write	a	</text>
<text top="141" left="166" width="31" height="14" font="5">for</text>
<text top="136" left="197" width="604" height="20" font="2">	loop	that	will	print	the	multiples	of	6,	from	6	to	30	(6,	12,	18,	24,	and</text>
<text top="162" left="97" width="34" height="20" font="2">30).</text>
<text top="188" left="69" width="97" height="20" font="2">3.	 Write	a	</text>
<text top="192" left="166" width="31" height="14" font="5">for</text>
<text top="188" left="197" width="635" height="20" font="2">	loop	that	will	print	numbers	2	to	100	in	multiples	of	2	(for	example,	2,	4,</text>
<text top="214" left="97" width="139" height="20" font="2">6,	8,	and	so	on).</text>
<text top="240" left="69" width="97" height="20" font="2">4.	 Write	a	</text>
<text top="244" left="166" width="31" height="14" font="5">for</text>
<text top="240" left="197" width="578" height="20" font="2">	loop	that	will	print	numbers	1	to	16	and	their	squares	beside	them.</text>
</page>
<page number="158" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="141" height="32" font="7"><b>Solutions</b></text>
<text top="110" left="54" width="432" height="20" font="2">Here	are	the	solutions	for	the	preceding	exercises:</text>
<text top="147" left="69" width="204" height="20" font="2">1.	 The	solution	for	the	</text>
<text top="151" left="273" width="31" height="14" font="5">for</text>
<text top="147" left="304" width="512" height="20" font="2">	loop	for	printing	the	sum	of	the	numbers	from	1	to	10	is	as</text>
<text top="173" left="97" width="71" height="20" font="2">follows:</text>
<text top="216" left="97" width="124" height="14" font="5">int	sum	=	0;</text>
<text top="237" left="97" width="311" height="14" font="5">for(	int	x	=	1;	x	&lt;=	10;	x++	)</text>
<text top="257" left="97" width="10" height="14" font="5">{</text>
<text top="278" left="97" width="114" height="14" font="5">		sum	+=	x;</text>
<text top="298" left="97" width="207" height="14" font="5">		cout	&lt;&lt;	x	&lt;&lt;	endl;</text>
<text top="319" left="97" width="10" height="14" font="5">}</text>
<text top="350" left="69" width="204" height="20" font="2">2.	 The	solution	for	the	</text>
<text top="355" left="273" width="31" height="14" font="5">for</text>
<text top="350" left="304" width="467" height="20" font="2">	loop	for	printing	multiples	of	6	from	30	is	as	follows:</text>
<text top="393" left="97" width="342" height="14" font="5">for(	int	x	=	6;	x	&lt;=	30;	x	+=	6	)</text>
<text top="414" left="97" width="10" height="14" font="5">{</text>
<text top="434" left="97" width="207" height="14" font="5">		cout	&lt;&lt;	x	&lt;&lt;	endl;</text>
<text top="455" left="97" width="10" height="14" font="5">}</text>
<text top="486" left="69" width="204" height="20" font="2">3.	 The	solution	for	the	</text>
<text top="491" left="273" width="31" height="14" font="5">for</text>
<text top="486" left="304" width="519" height="20" font="2">	loop	for	printing	numbers	from	2	to	100	in	multiples	of	2	is</text>
<text top="512" left="97" width="94" height="20" font="2">as	follows:</text>
<text top="555" left="97" width="352" height="14" font="5">for(	int	x	=	2;	x	&lt;=	100;	x	+=	2	)</text>
<text top="576" left="97" width="10" height="14" font="5">{</text>
<text top="597" left="97" width="207" height="14" font="5">		cout	&lt;&lt;	x	&lt;&lt;	endl;</text>
<text top="617" left="97" width="10" height="14" font="5">}</text>
<text top="648" left="69" width="204" height="20" font="2">4.	 The	solution	for	the	</text>
<text top="653" left="273" width="31" height="14" font="5">for</text>
<text top="648" left="304" width="523" height="20" font="2">	loop	that	prints	numbers	from	1	to	16	and	their	squares	is	as</text>
<text top="674" left="97" width="71" height="20" font="2">follows:</text>
<text top="718" left="97" width="311" height="14" font="5">for(	int	x	=	1;	x	&lt;=	16;	x++	)</text>
<text top="738" left="97" width="10" height="14" font="5">{</text>
<text top="759" left="97" width="352" height="14" font="5">		cout	&lt;&lt;	x	&lt;&lt;	&#34;	&#34;	&lt;&lt;	x*x	&lt;&lt;	endl;</text>
<text top="779" left="97" width="10" height="14" font="5">}</text>
</page>
<page number="159" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="160" position="absolute" top="0" left="0" height="1262" width="892">
<image top="267" left="54" width="639" height="274" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-160_1.jpg"/>
<text top="64" left="54" width="523" height="39" font="0"><b>Looping	with	Unreal	Engine</b></text>
<text top="120" left="54" width="507" height="20" font="2">In	your	code	editor,	open	your	Unreal	Puzzle	project	from	</text>
<text top="120" left="561" width="85" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#110">Chapter	3</a></text>
<text top="120" left="645" width="183" height="20" font="2">,	<i>If,	Else,	and	Switch</i>.</text>
<text top="157" left="54" width="729" height="20" font="2">There	are	several	ways	to	open	your	Unreal	project.	The	simplest	way	is	probably	to</text>
<text top="183" left="54" width="132" height="20" font="2">navigate	to	the	</text>
<text top="187" left="186" width="155" height="14" font="5">Unreal	Projects</text>
<text top="183" left="342" width="339" height="20" font="2">	folder	(which	is	present	in	your	user’s	</text>
<text top="187" left="681" width="93" height="14" font="5">Documents</text>
<text top="183" left="774" width="57" height="20" font="2">	folder</text>
<text top="209" left="54" width="422" height="20" font="2">on	Windows	by	default)	and	double-click	on	the	</text>
<text top="213" left="476" width="41" height="14" font="5">.sln</text>
<text top="209" left="518" width="264" height="20" font="2">	file	in	<b>Windows	Explorer</b>,	as</text>
<text top="235" left="54" width="302" height="20" font="2">shown	in	the	following	screenshot:</text>
<text top="578" left="213" width="467" height="20" font="4"><i>On	Windows,	open	the	.sln	file	to	edit	the	project	code</i></text>
<text top="647" left="54" width="131" height="20" font="2">Now,	open	the	</text>
<text top="652" left="185" width="197" height="14" font="5">PuzzleBlockGrid.cpp</text>
<text top="647" left="381" width="439" height="20" font="2">	file.	Inside	this	file,	scroll	down	to	the	section	that</text>
<text top="673" left="54" width="315" height="20" font="2">begins	with	the	following	statement:</text>
<text top="716" left="54" width="352" height="14" font="5">void	APuzzleBlockGrid::BeginPlay()</text>
<text top="748" left="54" width="184" height="20" font="2">Notice	that	there	is	a	</text>
<text top="752" left="238" width="31" height="14" font="5">for</text>
<text top="748" left="269" width="505" height="20" font="2">	loop	here	to	spawn	the	initial	nine	blocks,	as	shown	in	the</text>
<text top="774" left="54" width="136" height="20" font="2">following	code:</text>
<text top="817" left="54" width="280" height="14" font="5">//	Loop	to	spawn	each	block</text>
<text top="837" left="54" width="653" height="14" font="5">for(	int32	BlockIndex=0;	BlockIndex	&lt;	NumBlocks;	BlockIndex++	)</text>
<text top="858" left="54" width="10" height="14" font="5">{</text>
<text top="878" left="54" width="83" height="14" font="5">		//	...</text>
<text top="899" left="54" width="10" height="14" font="5">}</text>
<text top="930" left="54" width="53" height="20" font="2">Since	</text>
<text top="935" left="107" width="93" height="14" font="5">NumBlocks</text>
<text top="930" left="201" width="596" height="20" font="2">	(which	is	used	to	determine	when	to	stop	the	loop)	gets	computed	as</text>
<text top="961" left="54" width="93" height="14" font="5">Size*Size</text>
<text top="956" left="147" width="662" height="20" font="2">,	we	can	easily	change	the	number	of	blocks	that	get	spawned	by	altering	the</text>
<text top="982" left="54" width="107" height="20" font="2">value	of	the	</text>
<text top="986" left="161" width="41" height="14" font="5">Size</text>
<text top="982" left="203" width="228" height="20" font="2">	variable.	Go	to	line	23	of	</text>
<text top="986" left="431" width="197" height="14" font="5">PuzzleBlockGrid.cpp</text>
<text top="982" left="627" width="210" height="20" font="2">	and	change	the	value	of</text>
<text top="1008" left="54" width="32" height="20" font="2">the	</text>
<text top="1012" left="86" width="41" height="14" font="5">Size</text>
<text top="1008" left="127" width="431" height="20" font="2">	variable	to	four	or	five.	Then,	run	the	code	again.</text>
<text top="1045" left="54" width="748" height="20" font="2">You	should	see	the	number	of	blocks	on	the	screen	increase,	as	shown	in	the	following</text>
<text top="1071" left="54" width="97" height="20" font="2">screenshot:</text>
</page>
<page number="161" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="432" height="417" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-161_1.jpg"/>
<text top="507" left="243" width="407" height="20" font="4"><i>Setting	the	size	to	14	creates	many	more	blocks</i></text>
</page>
<page number="162" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="163" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="182" height="39" font="0"><b>Summary</b></text>
<text top="120" left="54" width="713" height="20" font="2">In	this	chapter,	you	learned	how	to	repeat	lines	of	code	by	looping	the	code,	which</text>
<text top="146" left="54" width="776" height="20" font="2">allowed	you	to	go	back	into	it.	This	can	be	used	to	repeatedly	use	the	same	line	of	code	in</text>
<text top="172" left="54" width="761" height="20" font="2">order	to	achieve	a	task.	Imagine	printing	the	numbers	from	1	to	10	without	using	a	loop.</text>
<text top="209" left="54" width="768" height="20" font="2">In	the	next	chapter,	we	will	explore	functions,	which	are	the	basic	units	of	reusable	code.</text>
</page>
<page number="164" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="165" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="619" height="39" font="0"><b>Chapter	5.	Functions	and	Macros</b></text>
</page>
<page number="166" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="182" height="39" font="0"><b>Functions</b></text>
<text top="120" left="54" width="777" height="20" font="2">Some	things	needs	to	be	repeated.	Code	is	not	one	of	them.	A	function	is	a	bundle	of	code</text>
<text top="146" left="54" width="508" height="20" font="2">that	can	get	called	any	number	of	times,	as	often	you	wish.</text>
<text top="183" left="54" width="753" height="20" font="2">Analogies	are	good.	Let’s	explore	an	analogy	that	deals	with	waiters,	chefs,	pizzas,	and</text>
<text top="209" left="54" width="728" height="20" font="2">functions.	In	English,	when	we	say	a	person	has	a	function,	we	mean	that	the	person</text>
<text top="235" left="54" width="751" height="20" font="2">performs	some	very	specific	(usually,	very	important)	task.	They	can	do	this	task	again</text>
<text top="260" left="54" width="468" height="20" font="2">and	again	and	whenever	they	are	called	upon	to	do	so.</text>
<text top="297" left="54" width="727" height="20" font="2">The	following	comic	strip	shows	the	interaction	between	a	waiter	(caller)	and	a	chef</text>
<text top="323" left="54" width="770" height="20" font="2">(callee).	The	waiter	wants	food	for	his	table,	so	he	calls	upon	the	chef	to	prepare	the	food</text>
<text top="349" left="54" width="254" height="20" font="2">required	by	the	waiting	table.</text>
<text top="386" left="54" width="578" height="20" font="2">The	chef	prepares	the	food	and	then	returns	the	result	to	the	waiter.</text>
</page>
<page number="167" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="756" height="830" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-167_1.jpg"/>
<text top="952" left="54" width="756" height="20" font="2">Here,	the	chef	performs	his	function	of	cooking	food.	The	chef	accepted	the	parameters</text>
<text top="978" left="54" width="758" height="20" font="2">about	what	type	of	food	to	cook	(three	pepperoni	pan	pizzas).	The	chef	then	went	away,</text>
<text top="1004" left="54" width="749" height="20" font="2">did	some	work,	and	returned	with	three	pizzas.	Note	that	the	waiter	does	not	know	and</text>
<text top="1030" left="54" width="767" height="20" font="2">does	not	care	about	how	the	chef	goes	about	cooking	the	pizzas.	The	chef	abstracts	away</text>
<text top="1056" left="54" width="782" height="20" font="2">the	process	of	cooking	pizzas	for	the	waiter,	so	cooking	a	pizza	is	just	a	simple,	single-line</text>
<text top="1082" left="54" width="771" height="20" font="2">command	for	the	waiter.	The	waiter	just	wants	his	request	to	be	completed	and	the	pizzas</text>
<text top="1107" left="54" width="138" height="20" font="2">returned	to	him.</text>
<text top="1144" left="54" width="770" height="20" font="2">When	a	function	(chef)	gets	called	with	some	arguments	(types	of	pizzas	to	be	prepared),</text>
<text top="1170" left="54" width="761" height="20" font="2">the	function	performs	some	actions	(preparing	the	pizzas)	and	optionally	returns	a	result</text>
</page>
<page number="168" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="237" height="20" font="2">(the	actual	finished	pizzas).</text>
</page>
<page number="169" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="170" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="778" height="39" font="0"><b>An	example	of	a	&lt;cmath&gt;	library	function</b></text>
<text top="116" left="54" width="135" height="39" font="0"><b>–	sqrt()</b></text>
<text top="172" left="54" width="697" height="20" font="2">Now,	let’s	talk	about	a	more	practical	example	and	relate	it	to	the	pizza	example.</text>
<text top="209" left="54" width="222" height="20" font="2">There	is	a	function	in	the	</text>
<text top="213" left="276" width="73" height="14" font="5">&lt;cmath&gt;</text>
<text top="209" left="348" width="157" height="20" font="2">	library	called	the	</text>
<text top="213" left="505" width="62" height="14" font="5">sqrt()</text>
<text top="209" left="567" width="219" height="20" font="2">	function.	Let	me	quickly</text>
<text top="235" left="54" width="421" height="20" font="2">illustrate	its	use,	as	shown	in	the	following	code:</text>
<text top="278" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="298" left="54" width="166" height="14" font="5">#include	&lt;cmath&gt;</text>
<text top="319" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="339" left="54" width="104" height="14" font="5">int	main()</text>
<text top="360" left="54" width="10" height="14" font="5">{</text>
<text top="380" left="54" width="704" height="14" font="5">		double	rootOf5	=	sqrt(	5	);	//	function	call	to	the	sqrt		function</text>
<text top="401" left="54" width="280" height="14" font="5">		cout	&lt;&lt;	rootOf5		&lt;&lt;	endl;</text>
<text top="422" left="54" width="10" height="14" font="5">}</text>
<text top="453" left="54" width="34" height="20" font="2">So,	</text>
<text top="457" left="88" width="62" height="14" font="5">sqrt()</text>
<text top="453" left="150" width="560" height="20" font="2">	can	find	the	mathematical	square	root	of	any	number	given	to	it.</text>
<text top="490" left="54" width="770" height="20" font="2">Do	you	know	how	to	find	the	square	root	of	a	tough	number	such	as	5?	It’s	not	simple.	A</text>
<text top="515" left="54" width="740" height="20" font="2">clever	soul	sat	down	and	wrote	a	function	that	can	find	the	square	roots	of	all	types	of</text>
<text top="541" left="54" width="776" height="20" font="2">numbers.	Do	you	have	to	understand	the	math	behind	how	the	square	root	of	5	is	found	to</text>
<text top="567" left="54" width="66" height="20" font="2">use	the	</text>
<text top="572" left="120" width="73" height="14" font="5">sqrt(5)</text>
<text top="567" left="192" width="624" height="20" font="2">	function	call?	Heck,	no!	So,	just	as	the	waiter	didn’t	have	to	understand</text>
<text top="593" left="54" width="710" height="20" font="2">how	to	cook	a	pizza	in	order	to	get	a	pizza	as	the	result,	the	caller	of	a	C++	library</text>
<text top="619" left="54" width="754" height="20" font="2">function	does	not	have	to	fully	understand	how	that	library	function	works	internally	to</text>
<text top="645" left="54" width="147" height="20" font="2">use	it	effectively.</text>
<text top="682" left="54" width="455" height="20" font="2">The	following	are	the	advantages	of	using	functions:</text>
<text top="719" left="69" width="743" height="20" font="2">1.	 Functions	abstract	away	a	complex	task	into	a	simple,	callable	routine.	This	makes</text>
<text top="744" left="97" width="703" height="20" font="2">the	code	required	to	<i>cook	a	pizza</i>,	for	instance,	just	a	single-line	command	for	the</text>
<text top="770" left="97" width="377" height="20" font="2">caller	(the	caller	is	typically	your	program).</text>
<text top="796" left="69" width="767" height="20" font="2">2.	 Functions	avoid	the	repetition	of	code	where	it	is	not	necessary.	Say	we	have	20	or	so</text>
<text top="822" left="97" width="719" height="20" font="2">lines	of	code	that	can	find	the	square	root	of	a	double	value.	We	wrap	these	lines	of</text>
<text top="848" left="97" width="738" height="20" font="2">code	into	a	callable	function;	instead	of	repeatedly	copying	and	pasting	these	20	lines</text>
<text top="874" left="97" width="238" height="20" font="2">of	code,	we	simply	call	the	</text>
<text top="878" left="335" width="41" height="14" font="5">sqrt</text>
<text top="874" left="377" width="378" height="20" font="2">	function	(with	the	number	to	root)	function</text>
<text top="900" left="97" width="221" height="20" font="2">whenever	we	need	a	root.</text>
<text top="958" left="54" width="597" height="20" font="2">The	following	illustration	shows	the	process	of	finding	a	square	root:</text>
</page>
<page number="171" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="432" height="602" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-171_1.jpg"/>
</page>
<page number="172" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="173" position="absolute" top="0" left="0" height="1262" width="892">
<image top="601" left="54" width="378" height="246" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-173_1.jpg"/>
<text top="64" left="54" width="489" height="39" font="0"><b>Writing	our	own	functions</b></text>
<text top="120" left="54" width="674" height="20" font="2">Say,	we	want	to	write	some	code	that	prints	out	a	strip	of	road,	as	shown	here:</text>
<text top="163" left="54" width="249" height="14" font="5">cout	&lt;&lt;	&#34;*			*&#34;	&lt;&lt;	endl;</text>
<text top="184" left="54" width="249" height="14" font="5">cout	&lt;&lt;	&#34;*	|	*&#34;	&lt;&lt;	endl;</text>
<text top="204" left="54" width="249" height="14" font="5">cout	&lt;&lt;	&#34;*	|	*&#34;	&lt;&lt;	endl;</text>
<text top="225" left="54" width="249" height="14" font="5">cout	&lt;&lt;	&#34;*			*&#34;	&lt;&lt;	endl;</text>
<text top="256" left="54" width="763" height="20" font="2">Now,	say	we	want	to	print	two	strips	of	road,	in	a	row,	or	three	strips	of	road.	Or,	say	we</text>
<text top="282" left="54" width="754" height="20" font="2">want	to	print	any	number	of	strips	of	road.	We	will	have	to	repeat	the	four	lines	of	code</text>
<text top="308" left="54" width="665" height="20" font="2">that	produce	the	first	strip	of	road	once	per	strip	of	road	we’re	trying	to	print.</text>
<text top="345" left="54" width="762" height="20" font="2">What	if	we	introduced	our	own	C++	command	that	allowed	us	to	print	a	strip	of	road	on</text>
<text top="371" left="54" width="463" height="20" font="2">being	called	the	command.	Here’s	how	that	will	look:</text>
<text top="414" left="54" width="166" height="14" font="5">void	printRoad()</text>
<text top="434" left="54" width="10" height="14" font="5">{</text>
<text top="455" left="54" width="269" height="14" font="5">		cout	&lt;&lt;	&#34;*			*&#34;	&lt;&lt;	endl;</text>
<text top="476" left="54" width="269" height="14" font="5">		cout	&lt;&lt;	&#34;*	|	*&#34;	&lt;&lt;	endl;</text>
<text top="496" left="54" width="269" height="14" font="5">		cout	&lt;&lt;	&#34;*	|	*&#34;	&lt;&lt;	endl;</text>
<text top="517" left="54" width="269" height="14" font="5">		cout	&lt;&lt;	&#34;*			*&#34;	&lt;&lt;	endl;</text>
<text top="537" left="54" width="10" height="14" font="5">}</text>
<text top="568" left="54" width="683" height="20" font="2">This	is	the	definition	of	a	function.	A	C++	function	has	the	following	anatomy:</text>
<text top="916" left="54" width="757" height="20" font="2">Using	a	function	is	simple:	we	simply	invoke	the	function	we	want	to	execute	by	name,</text>
<text top="942" left="54" width="520" height="20" font="2">followed	by	two	round	brackets<i>	</i>().	For	example,	calling	the	</text>
<text top="947" left="574" width="114" height="14" font="5">printRoad()</text>
<text top="942" left="688" width="116" height="20" font="2">	function	will</text>
<text top="968" left="54" width="85" height="20" font="2">cause	the	</text>
<text top="972" left="139" width="114" height="14" font="5">printRoad()</text>
<text top="968" left="253" width="486" height="20" font="2">	function	to	run.	Let’s	trace	an	example	program	to	fully</text>
<text top="994" left="54" width="245" height="20" font="2">understand	what	this	means.</text>
</page>
<page number="174" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="368" height="32" font="7"><b>A	sample	program	trace</b></text>
<text top="110" left="54" width="493" height="20" font="2">Here’s	a	complete	example	of	how	a	function	call	works:</text>
<text top="154" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="174" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="195" left="54" width="166" height="14" font="5">void	printRoad()</text>
<text top="215" left="54" width="10" height="14" font="5">{</text>
<text top="236" left="54" width="269" height="14" font="5">		cout	&lt;&lt;	&#34;*			*&#34;	&lt;&lt;	endl;</text>
<text top="256" left="54" width="269" height="14" font="5">		cout	&lt;&lt;	&#34;*	|	*&#34;	&lt;&lt;	endl;</text>
<text top="277" left="54" width="269" height="14" font="5">		cout	&lt;&lt;	&#34;*	|	*&#34;	&lt;&lt;	endl;</text>
<text top="297" left="54" width="269" height="14" font="5">		cout	&lt;&lt;	&#34;*			*&#34;	&lt;&lt;	endl;</text>
<text top="318" left="54" width="10" height="14" font="5">}</text>
<text top="338" left="54" width="104" height="14" font="5">int	main()</text>
<text top="359" left="54" width="10" height="14" font="5">{</text>
<text top="379" left="54" width="363" height="14" font="5">		cout	&lt;&lt;	&#34;Program	begin!&#34;	&lt;&lt;	endl;</text>
<text top="400" left="54" width="145" height="14" font="5">		printRoad();</text>
<text top="420" left="54" width="331" height="14" font="5">		cout	&lt;&lt;	&#34;Program	end&#34;	&lt;&lt;	endl;</text>
<text top="441" left="54" width="114" height="14" font="5">		return	0;</text>
<text top="461" left="54" width="10" height="14" font="5">}</text>
<text top="493" left="54" width="747" height="20" font="2">Let’s	trace	the	program’s	execution	from	beginning	to	end.	Remember	that	for	all	C++</text>
<text top="519" left="54" width="403" height="20" font="2">programs,	execution	begins	on	the	first	line	of	</text>
<text top="523" left="457" width="62" height="14" font="5">main()</text>
<text top="519" left="520" width="5" height="20" font="2">.</text>
<text top="557" left="54" width="50" height="22" font="8"><b>Note</b></text>
<text top="600" left="54" width="62" height="14" font="5">main()</text>
<text top="595" left="116" width="631" height="20" font="2">	is	also	a	function.	It	oversees	the	execution	of	the	whole	program.	Once	</text>
<text top="600" left="747" width="62" height="14" font="5">main()</text>
<text top="621" left="54" width="111" height="20" font="2">executes	the	</text>
<text top="626" left="165" width="62" height="14" font="5">return</text>
<text top="621" left="228" width="267" height="20" font="2">	statement,	your	program	ends.</text>
<text top="658" left="54" width="217" height="20" font="2">When	the	last	line	of	the	</text>
<text top="662" left="271" width="62" height="14" font="5">main()</text>
<text top="658" left="333" width="336" height="20" font="2">	function	is	reached,	the	program	ends.</text>
<text top="695" left="54" width="718" height="20" font="2">A	line-by-line	trace	of	the	execution	of	the	preceding	program	is	shown	as	follows:</text>
<text top="738" left="54" width="166" height="14" font="5">void	printRoad()</text>
<text top="759" left="54" width="10" height="14" font="5">{</text>
<text top="779" left="54" width="642" height="14" font="5">		cout	&lt;&lt;	&#34;*			*&#34;	&lt;&lt;	endl;										//	3:	then	we	jump	up	here</text>
<text top="800" left="54" width="518" height="14" font="5">		cout	&lt;&lt;	&#34;*	|	*&#34;	&lt;&lt;	endl;										//	4:	run	this</text>
<text top="820" left="54" width="518" height="14" font="5">		cout	&lt;&lt;	&#34;*	|	*&#34;	&lt;&lt;	endl;										//	5:	and	this</text>
<text top="841" left="54" width="518" height="14" font="5">		cout	&lt;&lt;	&#34;*			*&#34;	&lt;&lt;	endl;										//	6:	and	this</text>
<text top="861" left="54" width="10" height="14" font="5">}</text>
<text top="882" left="54" width="104" height="14" font="5">int	main()</text>
<text top="902" left="54" width="10" height="14" font="5">{</text>
<text top="923" left="54" width="653" height="14" font="5">		cout	&lt;&lt;	&#34;Program	begin!&#34;	&lt;&lt;	endl;	//	1:	first	line	to	execute</text>
<text top="943" left="54" width="570" height="14" font="5">		printRoad();																						//	2:	second	line..</text>
<text top="964" left="54" width="621" height="14" font="5">		cout	&lt;&lt;	&#34;Program	end&#34;	&lt;&lt;	endl;				//	7:	finally,	last	line</text>
<text top="984" left="54" width="611" height="14" font="5">		return	0;																									//	8:	and	return	to	o/s</text>
<text top="1005" left="54" width="10" height="14" font="5">}</text>
<text top="1036" left="54" width="420" height="20" font="2">This	is	how	the	output	of	this	program	will	look:</text>
<text top="1079" left="54" width="145" height="14" font="5">Program	begin!</text>
<text top="1100" left="54" width="52" height="14" font="5">*			*</text>
<text top="1120" left="54" width="52" height="14" font="5">*	|	*</text>
<text top="1141" left="54" width="52" height="14" font="5">*	|	*</text>
<text top="1161" left="54" width="52" height="14" font="5">*			*</text>
<text top="1182" left="54" width="114" height="14" font="5">Program	end</text>
</page>
<page number="175" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="494" height="20" font="2">Here’s	an	explanation	of	the	preceding	code,	line	by	line:</text>
<text top="94" left="69" width="471" height="20" font="2">1.	 The	program’s	execution	begins	on	the	first	line	of	</text>
<text top="99" left="540" width="62" height="14" font="5">main()</text>
<text top="94" left="602" width="138" height="20" font="2">,	which	outputs	</text>
<text top="99" left="740" width="73" height="14" font="5">program</text>
<text top="124" left="97" width="73" height="14" font="5">begin!.</text>
<text top="146" left="69" width="419" height="20" font="2">2.	 The	next	line	of	code	that	is	run	is	the	call	to	</text>
<text top="150" left="488" width="114" height="14" font="5">printRoad()</text>
<text top="146" left="602" width="234" height="20" font="2">.	What	this	does	is	it	jumps</text>
<text top="172" left="97" width="336" height="20" font="2">the	program	counter	to	the	first	line	of	</text>
<text top="176" left="433" width="114" height="14" font="5">printRoad()</text>
<text top="172" left="547" width="145" height="20" font="2">.	All	the	lines	of	</text>
<text top="176" left="692" width="114" height="14" font="5">printRoad()</text>
<text top="198" left="97" width="288" height="20" font="2">then	execute	in	order	(steps	3–6).</text>
<text top="224" left="69" width="311" height="20" font="2">3.	 Finally,	after	the	function	call	to	</text>
<text top="228" left="380" width="114" height="14" font="5">printRoad()</text>
<text top="224" left="494" width="296" height="20" font="2">	is	complete,	control	returns	to	the</text>
<text top="254" left="97" width="62" height="14" font="5">main()</text>
<text top="250" left="159" width="208" height="20" font="2">	statement.	We	then	see	</text>
<text top="254" left="367" width="114" height="14" font="5">Program	end</text>
<text top="250" left="481" width="72" height="20" font="2">	printed.</text>
<text top="309" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="348" left="54" width="434" height="20" font="2">Don’t	forget	the	brackets	after	the	function	call	to	</text>
<text top="352" left="488" width="114" height="14" font="5">printRoad()</text>
<text top="348" left="602" width="186" height="20" font="2">.	A	function	call	must</text>
<text top="374" left="54" width="784" height="20" font="2">always	be	followed	by	round	brackets	(),	otherwise	the	function	call	will	not	work	and	you</text>
<text top="400" left="54" width="214" height="20" font="2">will	get	a	compiler	error.</text>
<text top="437" left="54" width="469" height="20" font="2">The	following	code	is	used	to	print	four	strips	of	road:</text>
<text top="480" left="54" width="104" height="14" font="5">int	main()</text>
<text top="500" left="54" width="10" height="14" font="5">{</text>
<text top="521" left="54" width="10" height="14" font="5">	</text>
<text top="521" left="137" width="124" height="14" font="5">printRoad();</text>
<text top="541" left="54" width="10" height="14" font="5">	</text>
<text top="541" left="137" width="124" height="14" font="5">printRoad();</text>
<text top="562" left="54" width="10" height="14" font="5">	</text>
<text top="562" left="137" width="124" height="14" font="5">printRoad();</text>
<text top="582" left="54" width="10" height="14" font="5">	</text>
<text top="582" left="137" width="124" height="14" font="5">printRoad();</text>
<text top="603" left="54" width="10" height="14" font="5">}</text>
<text top="634" left="54" width="439" height="20" font="2">Alternatively,	you	can	also	use	the	following	code:</text>
<text top="678" left="54" width="290" height="14" font="5">for(	int	i	=	0;	i	&lt;	4;	i++	)</text>
<text top="698" left="54" width="124" height="14" font="5">printRoad();</text>
<text top="729" left="54" width="352" height="20" font="2">So,	instead	of	repeating	the	four	lines	of	</text>
<text top="734" left="406" width="41" height="14" font="5">cout</text>
<text top="729" left="447" width="373" height="20" font="2">	every	time	a	box	is	printed,	we	simply	call</text>
<text top="755" left="54" width="32" height="20" font="2">the	</text>
<text top="760" left="86" width="114" height="14" font="5">printRoad()</text>
<text top="755" left="200" width="625" height="20" font="2">	function	to	make	it	print.	Also,	if	we	want	to	change	how	a	printed	road</text>
<text top="781" left="54" width="516" height="20" font="2">looks,	we	have	to	simply	modify	the	implementation	of	the	</text>
<text top="786" left="570" width="114" height="14" font="5">printRoad()</text>
<text top="781" left="684" width="83" height="20" font="2">	function.</text>
<text top="818" left="54" width="759" height="20" font="2">Calling	a	function	entails	running	the	entire	body	of	that	function,	line	by	line.	After	the</text>
<text top="844" left="54" width="726" height="20" font="2">function	call	is	complete,	the	control	of	the	program	then	resumes	at	the	point	of	the</text>
<text top="870" left="54" width="114" height="20" font="2">function	call.</text>
</page>
<page number="176" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="128" height="32" font="7"><b>Exercise</b></text>
<text top="110" left="54" width="549" height="20" font="2">As	an	exercise,	find	out	what	is	wrong	with	the	following	code:</text>
<text top="154" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="174" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="195" left="54" width="176" height="14" font="5">void	myFunction()</text>
<text top="215" left="54" width="10" height="14" font="5">{</text>
<text top="236" left="54" width="342" height="14" font="5">			cout	&lt;&lt;	&#34;You	called?&#34;	&lt;&lt;	endl;</text>
<text top="256" left="54" width="10" height="14" font="5">}</text>
<text top="277" left="54" width="104" height="14" font="5">int	main()</text>
<text top="297" left="54" width="10" height="14" font="5">{</text>
<text top="318" left="54" width="570" height="14" font="5">			cout	&lt;&lt;	&#34;I'm	going	to	call	myFunction	now.&#34;	&lt;&lt;	endl;</text>
<text top="338" left="54" width="145" height="14" font="5">			myFunction;</text>
<text top="359" left="54" width="10" height="14" font="5">}</text>
</page>
<page number="177" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="127" height="32" font="7"><b>Solution</b></text>
<text top="110" left="54" width="455" height="20" font="2">The	correct	answer	to	this	problem	is	that	the	call	to	</text>
<text top="115" left="509" width="104" height="14" font="5">myFunction</text>
<text top="110" left="612" width="158" height="20" font="2">	(in	the	last	line	of</text>
<text top="141" left="54" width="62" height="14" font="5">main()</text>
<text top="136" left="116" width="701" height="20" font="2">)	is	not	followed	by	round	brackets.	All	function	calls	must	be	followed	by	round</text>
<text top="162" left="54" width="218" height="20" font="2">brackets.	The	last	line	of	</text>
<text top="167" left="272" width="62" height="14" font="5">main()</text>
<text top="162" left="334" width="111" height="20" font="2">	should	read	</text>
<text top="167" left="445" width="135" height="14" font="5">myFunction();</text>
<text top="162" left="580" width="80" height="20" font="2">,	not	just	</text>
<text top="167" left="660" width="104" height="14" font="5">myFunction</text>
<text top="162" left="764" width="5" height="20" font="2">.</text>
</page>
<page number="178" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="179" position="absolute" top="0" left="0" height="1262" width="892">
<image top="521" left="54" width="216" height="83" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-179_1.jpg"/>
<image top="832" left="54" width="540" height="118" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-179_2.jpg"/>
<text top="64" left="54" width="482" height="39" font="0"><b>Functions	with	arguments</b></text>
<text top="120" left="54" width="208" height="20" font="2">How	can	we	extend	the	</text>
<text top="124" left="262" width="114" height="14" font="5">printRoad()</text>
<text top="120" left="376" width="422" height="20" font="2">	function	to	print	a	road	with	a	certain	number	of</text>
<text top="146" left="54" width="417" height="20" font="2">segments?	The	answer	is	simple.	We	can	let	the	</text>
<text top="150" left="471" width="114" height="14" font="5">printRoad()</text>
<text top="146" left="585" width="249" height="20" font="2">	function	accept	a	parameter,</text>
<text top="172" left="54" width="57" height="20" font="2">called	</text>
<text top="176" left="111" width="114" height="14" font="5">numSegments</text>
<text top="172" left="225" width="382" height="20" font="2">,	to	print	a	certain	number	of	road	segments.</text>
<text top="209" left="54" width="465" height="20" font="2">The	following	code	snippet	shows	how	that	will	look:</text>
<text top="252" left="54" width="321" height="14" font="5">void	printRoad(int	numSegments)</text>
<text top="272" left="54" width="10" height="14" font="5">{</text>
<text top="293" left="54" width="559" height="14" font="5">		//	use	a	for	loop	to	print	numSegments	road	segments</text>
<text top="313" left="54" width="404" height="14" font="5">		for(	int	i	=	0;	i	&lt;	numSegments;	i++)</text>
<text top="334" left="54" width="31" height="14" font="5">		{</text>
<text top="355" left="54" width="290" height="14" font="5">				cout	&lt;&lt;	&#34;*			*&#34;	&lt;&lt;	endl;</text>
<text top="375" left="54" width="290" height="14" font="5">				cout	&lt;&lt;	&#34;*	|	*&#34;	&lt;&lt;	endl;</text>
<text top="396" left="54" width="290" height="14" font="5">				cout	&lt;&lt;	&#34;*	|	*&#34;	&lt;&lt;	endl;</text>
<text top="416" left="54" width="290" height="14" font="5">				cout	&lt;&lt;	&#34;*			*&#34;	&lt;&lt;	endl;</text>
<text top="437" left="54" width="31" height="14" font="5">		}</text>
<text top="457" left="54" width="10" height="14" font="5">}</text>
<text top="488" left="54" width="731" height="20" font="2">The	following	screenshot	shows	the	anatomy	of	a	function	that	accepts	an	argument:</text>
<text top="673" left="54" width="212" height="20" font="2">Call	this	new	version	of	</text>
<text top="678" left="266" width="114" height="14" font="5">printRoad()</text>
<text top="673" left="380" width="385" height="20" font="2">,	asking	it	to	print	four	segments,	as	follows:</text>
<text top="716" left="54" width="363" height="14" font="5">printRoad(	4	);				//	function	call</text>
<text top="748" left="54" width="297" height="20" font="2">The	4	between	the	brackets	of	the	</text>
<text top="752" left="351" width="135" height="14" font="5">function	call</text>
<text top="748" left="485" width="352" height="20" font="2">	in	the	preceding	statement	gets	assigned</text>
<text top="774" left="54" width="54" height="20" font="2">to	the	</text>
<text top="778" left="108" width="114" height="14" font="5">numSegments</text>
<text top="774" left="222" width="135" height="20" font="2">	variable	of	the	</text>
<text top="778" left="357" width="269" height="14" font="5">printRoad(int	numSegments)</text>
<text top="774" left="627" width="189" height="20" font="2">	function.	This	is	how</text>
<text top="800" left="54" width="225" height="20" font="2">the	value	4	gets	passed	to	</text>
<text top="804" left="279" width="114" height="14" font="5">numSegments</text>
<text top="800" left="393" width="6" height="20" font="2">:</text>
<text top="986" left="66" width="761" height="20" font="4"><i>An	illustration	of	how	printRoad(4)	will	assign	the	value	4	to	the	numSegments	variable</i></text>
<text top="1056" left="54" width="34" height="20" font="2">So,	</text>
<text top="1060" left="88" width="114" height="14" font="5">numSegments</text>
<text top="1056" left="202" width="566" height="20" font="2">	gets	assigned	the	value	passed	between	the	brackets	in	the	call	to</text>
<text top="1086" left="54" width="114" height="14" font="5">printRoad()</text>
<text top="1082" left="168" width="5" height="20" font="2">.</text>
</page>
<page number="180" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="181" position="absolute" top="0" left="0" height="1262" width="892">
<image top="629" left="54" width="324" height="189" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-181_1.jpg"/>
<text top="64" left="54" width="523" height="39" font="0"><b>Functions	that	return	values</b></text>
<text top="120" left="54" width="448" height="20" font="2">An	example	of	a	function	that	returns	a	value	is	the	</text>
<text top="124" left="502" width="62" height="14" font="5">sqrt()</text>
<text top="120" left="564" width="127" height="20" font="2">	function.	The	</text>
<text top="124" left="691" width="62" height="14" font="5">sqrt()</text>
<text top="120" left="753" width="77" height="20" font="2">	function</text>
<text top="146" left="54" width="778" height="20" font="2">accepts	a	single	parameter	between	its	brackets	(the	number	to	root)	and	returns	the	actual</text>
<text top="172" left="54" width="165" height="20" font="2">root	of	the	number.</text>
<text top="209" left="54" width="276" height="20" font="2">Here’s	an	example	usage	of	the	</text>
<text top="213" left="330" width="41" height="14" font="5">sqrt</text>
<text top="209" left="371" width="83" height="20" font="2">	function:</text>
<text top="252" left="54" width="269" height="14" font="5">cout	&lt;&lt;	sqrt(	4	)	&lt;&lt;	endl;</text>
<text top="283" left="54" width="39" height="20" font="2">The	</text>
<text top="288" left="93" width="62" height="14" font="5">sqrt()</text>
<text top="283" left="155" width="659" height="20" font="2">	function	does	something	analogous	to	what	the	chef	did	when	preparing	the</text>
<text top="309" left="54" width="59" height="20" font="2">pizzas.</text>
<text top="346" left="54" width="734" height="20" font="2">As	a	caller	of	the	function,	you	do	not	care	about	what	goes	on	inside	the	body	of	the</text>
<text top="376" left="54" width="62" height="14" font="5">sqrt()</text>
<text top="372" left="116" width="720" height="20" font="2">	function;	that	information	is	irrelevant	since	all	you	want	is	the	result	of	the	square</text>
<text top="398" left="54" width="344" height="20" font="2">root	of	the	number	that	you	are	passing.</text>
<text top="434" left="54" width="784" height="20" font="2">Let’s	declare	our	own	simple	function	that	returns	a	value,	as	shown	in	the	following	code:</text>
<text top="478" left="54" width="218" height="14" font="5">int	sum(int	a,	int	b)</text>
<text top="498" left="54" width="10" height="14" font="5">{</text>
<text top="519" left="54" width="155" height="14" font="5">		return	a	+	b;</text>
<text top="539" left="54" width="10" height="14" font="5">}</text>
<text top="571" left="54" width="779" height="20" font="2">The	following	screenshot	shows	the	anatomy	of	a	function	with	parameters	and	a	returned</text>
<text top="596" left="54" width="53" height="20" font="2">value:</text>
<text top="887" left="54" width="39" height="20" font="2">The	</text>
<text top="891" left="93" width="31" height="14" font="5">sum</text>
<text top="887" left="124" width="396" height="20" font="2">	function	is	very	basic.	All	it	does	is	take	two	</text>
<text top="891" left="520" width="31" height="14" font="5">int</text>
<text top="887" left="551" width="85" height="20" font="2">	numbers	</text>
<text top="891" left="636" width="10" height="14" font="5">a</text>
<text top="887" left="646" width="42" height="20" font="2">	and	</text>
<text top="891" left="688" width="10" height="14" font="5">b</text>
<text top="887" left="699" width="131" height="20" font="2">,	sums	them	up</text>
<text top="913" left="54" width="750" height="20" font="2">together,	and	returns	a	result.	You	might	say	that	we	don’t	even	need	an	entire	function</text>
<text top="939" left="54" width="750" height="20" font="2">just	to	add	two	numbers.	You’re	right,	but	bear	with	me	for	a	moment.	We	will	use	this</text>
<text top="965" left="54" width="497" height="20" font="2">simple	function	to	explain	the	concept	of	returned	values.</text>
<text top="1002" left="54" width="145" height="20" font="2">You	will	use	the	</text>
<text top="1006" left="199" width="31" height="14" font="5">sum</text>
<text top="1002" left="230" width="237" height="20" font="2">	function	in	this	way	(from	</text>
<text top="1006" left="468" width="62" height="14" font="5">main()</text>
<text top="1002" left="530" width="13" height="20" font="2">):</text>
<text top="1045" left="54" width="238" height="14" font="5">int	sum(	int	a,	int	b	)</text>
<text top="1065" left="54" width="10" height="14" font="5">{</text>
<text top="1086" left="54" width="155" height="14" font="5">		return	a	+	b;</text>
<text top="1106" left="54" width="10" height="14" font="5">}</text>
<text top="1127" left="54" width="104" height="14" font="5">int	main()</text>
<text top="1147" left="54" width="10" height="14" font="5">{</text>
<text top="1168" left="54" width="601" height="14" font="5">		cout	&lt;&lt;	&#34;The	sum	of	5	and	6	is	&#34;	&lt;&lt;	sum(	5,6	)	&lt;&lt;	endl;	</text>
<text top="1189" left="54" width="10" height="14" font="5">}</text>
</page>
<page number="182" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="67" height="20" font="2">For	the	</text>
<text top="62" left="121" width="41" height="14" font="5">cout</text>
<text top="57" left="163" width="240" height="20" font="2">	command	to	complete,	the	</text>
<text top="62" left="402" width="104" height="14" font="5">sum(	5,6	)</text>
<text top="57" left="506" width="307" height="20" font="2">	function	call	must	be	evaluated.	At</text>
<text top="83" left="54" width="171" height="20" font="2">the	point	where	the	</text>
<text top="88" left="225" width="104" height="14" font="5">sum(	5,6	)</text>
<text top="83" left="329" width="395" height="20" font="2">	function	call	occurs,	the	returned	value	from	</text>
<text top="88" left="724" width="104" height="14" font="5">sum(	5,6	)</text>
<text top="109" left="54" width="147" height="20" font="2">is	put	right	there.</text>
<text top="146" left="54" width="370" height="20" font="2">In	other	words,	this	is	the	line	of	code	that	</text>
<text top="150" left="424" width="41" height="14" font="5">cout</text>
<text top="146" left="465" width="292" height="20" font="2">	actually	sees	after	evaluating	the	</text>
<text top="150" left="758" width="41" height="14" font="5">sum(</text>
<text top="176" left="54" width="52" height="14" font="5">5,6	)</text>
<text top="172" left="106" width="120" height="20" font="2">	function	call:</text>
<text top="215" left="54" width="497" height="14" font="5">cout	&lt;&lt;	&#34;The	sum	of	5	and	6	is	&#34;	&lt;&lt;	11	&lt;&lt;	endl;	</text>
<text top="246" left="54" width="216" height="20" font="2">The	returned	value	from	</text>
<text top="251" left="270" width="104" height="14" font="5">sum(	5,6	)</text>
<text top="246" left="373" width="404" height="20" font="2">	is	effectively	cut	and	pasted	at	the	point	of	the</text>
<text top="272" left="54" width="114" height="20" font="2">function	call.</text>
<text top="309" left="54" width="777" height="20" font="2">A	value	must	always	be	returned	by	a	function	that	promises	to	do	so	(if	the	return	type	of</text>
<text top="335" left="54" width="302" height="20" font="2">the	function	is	anything	other	than	</text>
<text top="339" left="356" width="41" height="14" font="5">void</text>
<text top="335" left="398" width="13" height="20" font="2">).</text>
</page>
<page number="183" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="142" height="32" font="7"><b>Exercises</b></text>
<text top="110" left="69" width="108" height="20" font="2">1.	 Write	an	</text>
<text top="115" left="177" width="104" height="14" font="5">isPositive</text>
<text top="110" left="280" width="186" height="20" font="2">	function	that	returns	</text>
<text top="115" left="466" width="41" height="14" font="5">true</text>
<text top="110" left="507" width="325" height="20" font="2">	when	the	double	parameter	passed	to</text>
<text top="136" left="97" width="174" height="20" font="2">it	is	indeed	positive.</text>
<text top="162" left="69" width="406" height="20" font="2">2.	 Complete	the	following	function	definition:</text>
<text top="205" left="97" width="518" height="14" font="5">//	function	returns	true	when	the	magnitude	of	'a'</text>
<text top="226" left="97" width="539" height="14" font="5">//	is	equal	to	the	magnitude	of	'b'	(absolute	value)</text>
<text top="247" left="97" width="290" height="14" font="5">bool	absEqual(int	a,	int	b){</text>
<text top="267" left="97" width="497" height="14" font="5">				//	to	complete	this	exercise,	try	to	not	use</text>
<text top="288" left="97" width="311" height="14" font="5">				//	cmath	library	functions</text>
<text top="308" left="97" width="10" height="14" font="5">}</text>
<text top="339" left="69" width="97" height="20" font="2">3.	 Write	a	</text>
<text top="344" left="166" width="104" height="14" font="5">getGrade()</text>
<text top="339" left="269" width="530" height="20" font="2">	function	that	accepts	an	integer	value	(marks	out	of	100)	and</text>
<text top="365" left="97" width="363" height="20" font="2">returns	the	grade	(either	A,	B,	C,	D,	or	F).</text>
<text top="391" left="69" width="369" height="20" font="2">4.	 A	mathematical	function	is	of	the	form	</text>
<text top="396" left="438" width="135" height="14" font="5">f(x)	=	3x	+	4</text>
<text top="391" left="573" width="233" height="20" font="2">.	Write	a	C++	function	that</text>
<text top="417" left="97" width="156" height="20" font="2">returns	values	for	</text>
<text top="422" left="254" width="41" height="14" font="5">f(x)</text>
<text top="417" left="295" width="5" height="20" font="2">.</text>
</page>
<page number="184" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="141" height="32" font="7"><b>Solutions</b></text>
<text top="110" left="69" width="67" height="20" font="2">1.	 The	</text>
<text top="115" left="136" width="104" height="14" font="5">isPositive</text>
<text top="110" left="240" width="566" height="20" font="2">	function	accepts	a	double	parameter	and	returns	a	boolean	value:</text>
<text top="154" left="97" width="321" height="14" font="5">bool	isPositive(	double	value	)</text>
<text top="174" left="97" width="10" height="14" font="5">{</text>
<text top="195" left="97" width="197" height="14" font="5">		return	value	&gt;	0;</text>
<text top="215" left="97" width="10" height="14" font="5">}</text>
<text top="246" left="69" width="303" height="20" font="2">2.	 The	following	is	the	completed	</text>
<text top="251" left="372" width="83" height="14" font="5">absEqual</text>
<text top="246" left="455" width="83" height="20" font="2">	function:</text>
<text top="290" left="97" width="300" height="14" font="5">bool	absEqual(	int	a,	int	b	)</text>
<text top="310" left="97" width="10" height="14" font="5">{</text>
<text top="331" left="97" width="269" height="14" font="5">		//	Make	a	and	b	positive</text>
<text top="351" left="97" width="114" height="14" font="5">if(	a	&lt;	0	)</text>
<text top="372" left="97" width="114" height="14" font="5">				a	=	-a;</text>
<text top="392" left="97" width="135" height="14" font="5">		if(	b	&lt;	0	)</text>
<text top="413" left="97" width="114" height="14" font="5">				b	=	-b;</text>
<text top="433" left="97" width="331" height="14" font="5">		//	now	since	they're	both	+ve,</text>
<text top="454" left="97" width="590" height="14" font="5">		//	we	just	have	to	compare	equality	of	a	and	b	together</text>
<text top="474" left="97" width="166" height="14" font="5">		return	a	==	b;</text>
<text top="495" left="97" width="10" height="14" font="5">}</text>
<text top="526" left="69" width="67" height="20" font="2">3.	 The	</text>
<text top="531" left="136" width="104" height="14" font="5">getGrade()</text>
<text top="526" left="240" width="346" height="20" font="2">	function	is	given	in	the	following	code:</text>
<text top="570" left="97" width="269" height="14" font="5">char	getGrade(	int	grade	)</text>
<text top="590" left="97" width="10" height="14" font="5">{</text>
<text top="611" left="97" width="197" height="14" font="5">		if(	grade	&gt;=	80	)</text>
<text top="631" left="97" width="155" height="14" font="5">				return	'A';</text>
<text top="652" left="97" width="249" height="14" font="5">		else	if(	grade	&gt;=	70	)</text>
<text top="672" left="97" width="155" height="14" font="5">				return	'B';</text>
<text top="693" left="97" width="249" height="14" font="5">		else	if(	grade	&gt;=	60	)</text>
<text top="713" left="97" width="155" height="14" font="5">				return	'C';</text>
<text top="734" left="97" width="249" height="14" font="5">		else	if(	grade	&gt;=	50	)</text>
<text top="754" left="97" width="155" height="14" font="5">				return	'D';</text>
<text top="775" left="97" width="62" height="14" font="5">		else</text>
<text top="795" left="97" width="155" height="14" font="5">				return	'F';</text>
<text top="816" left="97" width="10" height="14" font="5">}</text>
<text top="847" left="69" width="660" height="20" font="2">4.	 This	program	is	a	simple	one	that	should	entertain	you.	The	origin	of	the	</text>
<text top="851" left="730" width="41" height="14" font="5">name</text>
<text top="873" left="97" width="732" height="20" font="2">function	in	C++	actually	came	from	the	math	world,	as	shown	in	the	following	code:</text>
<text top="916" left="97" width="207" height="14" font="5">double	f(	double	x	)</text>
<text top="937" left="97" width="10" height="14" font="5">{</text>
<text top="957" left="97" width="176" height="14" font="5">		return	3*x	+	4;</text>
<text top="978" left="97" width="10" height="14" font="5">}</text>
</page>
<page number="185" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="186" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="353" height="39" font="0"><b>Variables,	revisited</b></text>
<text top="120" left="54" width="747" height="20" font="2">It’s	always	nice	to	revisit	a	topic	you’ve	covered	before,	now	that	you	understand	C++</text>
<text top="146" left="54" width="243" height="20" font="2">coding	much	more	in	depth.</text>
</page>
<page number="187" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="250" height="32" font="7"><b>Global	variables</b></text>
<text top="110" left="54" width="767" height="20" font="2">Now	that	we’ve	introduced	the	concept	of	functions,	the	concept	of	a	global	variable	can</text>
<text top="136" left="54" width="123" height="20" font="2">be	introduced.</text>
<text top="173" left="54" width="762" height="20" font="2">What	is	a	global	variable?	A	global	variable	is	any	variable	that	is	made	accessible	to	all</text>
<text top="199" left="54" width="738" height="20" font="2">the	functions	of	the	program.	How	can	we	make	a	variable	that	is	accessible	to	all	the</text>
<text top="225" left="54" width="782" height="20" font="2">functions	of	the	program?	We	simply	declare	the	global	variable	at	the	top	of	the	code	file,</text>
<text top="251" left="54" width="210" height="20" font="2">usually	after	or	near	the	</text>
<text top="255" left="264" width="83" height="14" font="5">#include</text>
<text top="251" left="347" width="102" height="20" font="2">	statements.</text>
<text top="288" left="54" width="483" height="20" font="2">Here’s	an	example	program	with	some	global	variables:</text>
<text top="331" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="351" left="54" width="176" height="14" font="5">#include	&lt;string&gt;</text>
<text top="372" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="413" left="54" width="176" height="14" font="5">string	g_string;	</text>
<text top="413" left="303" width="269" height="14" font="5">//	global	string	variable,</text>
<text top="433" left="54" width="508" height="14" font="5">//	accessible	to	all	functions	within	the	program</text>
<text top="454" left="54" width="559" height="14" font="5">//	(because	it	is	declared	before	any	of	the	functions</text>
<text top="474" left="54" width="104" height="14" font="5">//	below!)</text>
<text top="515" left="54" width="321" height="14" font="5">void	addA(){	g_string	+=	&#34;A&#34;;	}</text>
<text top="536" left="54" width="321" height="14" font="5">void	addB(){	g_string	+=	&#34;B&#34;;	}</text>
<text top="557" left="54" width="321" height="14" font="5">void	addC(){	g_string	+=	&#34;C&#34;;	}</text>
<text top="598" left="54" width="104" height="14" font="5">int	main()</text>
<text top="618" left="54" width="10" height="14" font="5">{</text>
<text top="639" left="54" width="93" height="14" font="5">		addA();</text>
<text top="659" left="54" width="93" height="14" font="5">		addB();</text>
<text top="680" left="54" width="280" height="14" font="5">		cout	&lt;&lt;	g_string	&lt;&lt;	endl;</text>
<text top="700" left="54" width="93" height="14" font="5">		addC();</text>
<text top="721" left="54" width="280" height="14" font="5">		cout	&lt;&lt;	g_string	&lt;&lt;	endl;</text>
<text top="741" left="54" width="10" height="14" font="5">}</text>
<text top="773" left="54" width="134" height="20" font="2">Here,	the	same	</text>
<text top="777" left="188" width="83" height="14" font="5">g_string</text>
<text top="773" left="271" width="509" height="20" font="2">	global	variable	is	accessible	to	all	the	four	functions	in	the</text>
<text top="798" left="54" width="86" height="20" font="2">program	(</text>
<text top="803" left="140" width="62" height="14" font="5">addA()</text>
<text top="798" left="202" width="11" height="20" font="2">,	</text>
<text top="803" left="213" width="62" height="14" font="5">addB()</text>
<text top="798" left="275" width="11" height="20" font="2">,	</text>
<text top="803" left="286" width="62" height="14" font="5">addC()</text>
<text top="798" left="348" width="47" height="20" font="2">,	and	</text>
<text top="803" left="395" width="62" height="14" font="5">main()</text>
<text top="798" left="457" width="361" height="20" font="2">).	Global	variables	live	for	the	duration	of</text>
<text top="824" left="54" width="110" height="20" font="2">the	program.</text>
<text top="863" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="901" left="54" width="484" height="20" font="2">People	sometimes	prefer	to	prefix	global	variables	with	</text>
<text top="905" left="538" width="21" height="14" font="5">g_</text>
<text top="901" left="559" width="230" height="20" font="2">,	but	prefixing	the	variable</text>
<text top="927" left="54" width="96" height="20" font="2">name	with	</text>
<text top="931" left="150" width="21" height="14" font="5">g_</text>
<text top="927" left="171" width="411" height="20" font="2">	is	not	a	requirement	for	a	variable	to	be	global.</text>
</page>
<page number="188" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="232" height="32" font="7"><b>Local	variables</b></text>
<text top="110" left="54" width="776" height="20" font="2">A	local	variable	is	a	variable	that	is	defined	within	a	block	of	code.	Local	variables	go	out</text>
<text top="136" left="54" width="783" height="20" font="2">of	the	scope	at	the	end	of	the	block	in	which	they	are	declared.	Some	examples	will	follow</text>
<text top="162" left="54" width="376" height="20" font="2">in	the	next	section,	<i>The</i>	<i>scope	of	a	variable</i>.</text>
</page>
<page number="189" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="350" height="32" font="7"><b>The	scope	of	a	variable</b></text>
<text top="110" left="54" width="763" height="20" font="2">The	scope	of	a	variable	is	the	area	of	code	where	that	variable	can	be	used.	The	scope	of</text>
<text top="136" left="54" width="770" height="20" font="2">any	variable	is	basically	the	block	in	which	it	is	defined.	We	can	demonstrate	a	variable’s</text>
<text top="162" left="54" width="492" height="20" font="2">scope	using	an	example,	as	shown	in	the	following	code:</text>
<text top="205" left="54" width="549" height="14" font="5">int	g_int;	//	global	int,	has	scope	until	end	of	file</text>
<text top="226" left="54" width="207" height="14" font="5">void	func(	int	arg	)</text>
<text top="247" left="54" width="10" height="14" font="5">{</text>
<text top="267" left="54" width="93" height="14" font="5">		int	fx;</text>
<text top="288" left="54" width="290" height="14" font="5">}	//	&lt;/fx&gt;	dies,	&lt;/arg&gt;	dies</text>
<text top="329" left="54" width="104" height="14" font="5">int	main()</text>
<text top="349" left="54" width="10" height="14" font="5">{</text>
<text top="370" left="54" width="518" height="14" font="5">		int	x;	//	variable	&lt;x&gt;	has	scope	starting	here..</text>
<text top="390" left="54" width="363" height="14" font="5">									//	until	the	end	of	main()</text>
<text top="411" left="54" width="145" height="14" font="5">		if(	x	==	0	)</text>
<text top="431" left="54" width="31" height="14" font="5">		{</text>
<text top="452" left="54" width="539" height="14" font="5">				int	y;		//	variable	&lt;y&gt;	has	scope	starting	here,</text>
<text top="472" left="54" width="414" height="14" font="5">												//	until	closing	brace	below</text>
<text top="493" left="54" width="166" height="14" font="5">		}	//	&lt;/y&gt;	dies</text>
<text top="513" left="54" width="663" height="14" font="5">		if(	int	x2	=	x	)	//	variable	&lt;x2&gt;	created	and	set	equal	to	&lt;x&gt;</text>
<text top="534" left="54" width="31" height="14" font="5">		{</text>
<text top="554" left="54" width="363" height="14" font="5">				//	enter	here	if	x2	was	nonzero</text>
<text top="575" left="54" width="176" height="14" font="5">		}	//	&lt;/x2&gt;	dies</text>
<text top="616" left="54" width="539" height="14" font="5">for(	int	c	=	0;	c	&lt;	5;	c++	)	//	c	is	created	and	has</text>
<text top="636" left="54" width="539" height="14" font="5">		{	//	scope	inside	the	curly	braces	of	the	for	loop</text>
<text top="657" left="54" width="228" height="14" font="5">				cout	&lt;&lt;	c	&lt;&lt;	endl;</text>
<text top="678" left="54" width="445" height="14" font="5">		}	//	&lt;/c&gt;	dies	only	when	we	exit	the	loop</text>
<text top="698" left="54" width="145" height="14" font="5">}	//	&lt;/x&gt;	dies</text>
<text top="729" left="54" width="731" height="20" font="2">The	main	thing	that	defines	a	variable’s	scope	is	a	block.	Let’s	discuss	the	scope	of	a</text>
<text top="755" left="54" width="541" height="20" font="2">couple	of	the	variables	defined	in	the	preceding	code	example:</text>
<text top="796" left="97" width="52" height="14" font="5">g_int</text>
<text top="792" left="149" width="686" height="20" font="2">:	This	is	a	global	integer	with	a	scope	that	ranges	from	the	point	it	was	declared</text>
<text top="818" left="97" width="379" height="20" font="2">until	the	end	of	the	code	file.	That	is	to	say,	</text>
<text top="822" left="476" width="52" height="14" font="5">g_int</text>
<text top="818" left="528" width="168" height="20" font="2">	can	be	used	inside	</text>
<text top="822" left="697" width="62" height="14" font="5">func()</text>
<text top="818" left="759" width="37" height="20" font="2">	and</text>
<text top="848" left="97" width="62" height="14" font="5">main()</text>
<text top="844" left="159" width="673" height="20" font="2">,	but	it	cannot	be	used	in	other	code	files.	To	have	a	single	global	variable	that</text>
<text top="870" left="97" width="594" height="20" font="2">is	used	across	multiple	code	files,	you	will	need	an	external	variable.</text>
<text top="900" left="97" width="31" height="14" font="5">arg</text>
<text top="896" left="128" width="154" height="20" font="2">	(the	argument	of	</text>
<text top="900" left="283" width="62" height="14" font="5">func()</text>
<text top="896" left="345" width="349" height="20" font="2">):	This	can	be	used	from	the	first	line	of	</text>
<text top="900" left="694" width="62" height="14" font="5">func()</text>
<text top="896" left="756" width="52" height="20" font="2">	(after</text>
<text top="922" left="97" width="382" height="20" font="2">the	opening	curly	brace	{)	to	the	last	line	of	</text>
<text top="926" left="479" width="62" height="14" font="5">func()</text>
<text top="922" left="541" width="282" height="20" font="2">	(until	the	closing	curly	brace	}).</text>
<text top="952" left="97" width="21" height="14" font="5">fx</text>
<text top="948" left="118" width="308" height="20" font="2">:	This	can	be	used	anywhere	inside	</text>
<text top="952" left="425" width="62" height="14" font="5">func()</text>
<text top="948" left="488" width="270" height="20" font="2">	until	the	closing	curly	brace	of</text>
<text top="978" left="97" width="62" height="14" font="5">func()</text>
<text top="973" left="159" width="16" height="20" font="2">}.</text>
<text top="1004" left="97" width="62" height="14" font="5">main()</text>
<text top="999" left="159" width="147" height="20" font="2">(variables	inside	</text>
<text top="1004" left="307" width="62" height="14" font="5">main()</text>
<text top="999" left="369" width="410" height="20" font="2">):	This	can	be	used	as	marked	in	the	comments.</text>
<text top="1036" left="54" width="781" height="20" font="2">Notice	how	variables	declared	inside	the	brackets	of	a	function’s	argument	list	can	only	be</text>
<text top="1062" left="54" width="632" height="20" font="2">used	inside	the	block	below	that	function’s	declaration.	For	example,	the	</text>
<text top="1066" left="686" width="31" height="14" font="5">arg</text>
<text top="1062" left="717" width="75" height="20" font="2">	variable</text>
<text top="1088" left="54" width="85" height="20" font="2">passed	to	</text>
<text top="1092" left="139" width="62" height="14" font="5">func()</text>
<text top="1088" left="201" width="6" height="20" font="2">:</text>
<text top="1131" left="54" width="207" height="14" font="5">void	func(	int	arg	)</text>
<text top="1152" left="54" width="10" height="14" font="5">{</text>
<text top="1172" left="54" width="93" height="14" font="5">		int	fx;</text>
<text top="1193" left="54" width="290" height="14" font="5">}	//	&lt;/fx&gt;	dies,	&lt;/arg&gt;	dies</text>
</page>
<page number="190" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="39" height="20" font="2">The	</text>
<text top="62" left="93" width="31" height="14" font="5">arg</text>
<text top="57" left="124" width="405" height="20" font="2">	variable	will	die	after	the	closing	curly	brace	(</text>
<text top="62" left="529" width="10" height="14" font="5">}</text>
<text top="57" left="539" width="68" height="20" font="2">)	of	the	</text>
<text top="62" left="607" width="62" height="14" font="5">func()</text>
<text top="57" left="669" width="146" height="20" font="2">	function.	This	is</text>
<text top="83" left="54" width="764" height="20" font="2">counterintuitive	as	the	round	brackets	are	technically	outside	the	curly	braces	that	define</text>
<text top="109" left="54" width="32" height="20" font="2">the	</text>
<text top="114" left="86" width="10" height="14" font="5">{</text>
<text top="109" left="96" width="59" height="20" font="2">	block	</text>
<text top="114" left="155" width="10" height="14" font="5">}</text>
<text top="109" left="165" width="5" height="20" font="2">.</text>
<text top="146" left="54" width="586" height="20" font="2">The	same	goes	for	variables	declared	inside	the	round	brackets	of	a	</text>
<text top="150" left="640" width="31" height="14" font="5">for</text>
<text top="146" left="671" width="145" height="20" font="2">	loop.	Take	as	an</text>
<text top="172" left="54" width="200" height="20" font="2">example	the	following	</text>
<text top="176" left="254" width="31" height="14" font="5">for</text>
<text top="172" left="285" width="50" height="20" font="2">	loop:</text>
<text top="215" left="54" width="290" height="14" font="5">for(	int	c	=	0;	c	&lt;	5;	c++	)</text>
<text top="236" left="54" width="10" height="14" font="5">{</text>
<text top="256" left="54" width="207" height="14" font="5">		cout	&lt;&lt;	c	&lt;&lt;	endl;</text>
<text top="277" left="54" width="166" height="14" font="5">}	//	c	dies	here</text>
<text top="308" left="54" width="39" height="20" font="2">The	</text>
<text top="312" left="93" width="52" height="14" font="5">int	c</text>
<text top="308" left="145" width="463" height="20" font="2">	variable	can	be	used	inside	the	round	brackets	of	the	</text>
<text top="312" left="608" width="31" height="14" font="5">for</text>
<text top="308" left="639" width="168" height="20" font="2">	loop	declaration	or</text>
<text top="334" left="54" width="232" height="20" font="2">inside	the	block	below	the	</text>
<text top="338" left="286" width="31" height="14" font="5">for</text>
<text top="334" left="317" width="195" height="20" font="2">	loop	declaration.	The	</text>
<text top="338" left="512" width="10" height="14" font="5">c</text>
<text top="334" left="522" width="313" height="20" font="2">	variable	will	die	after	the	closing	of</text>
<text top="360" left="54" width="189" height="20" font="2">the	curly	brace	of	the	</text>
<text top="364" left="243" width="31" height="14" font="5">for</text>
<text top="360" left="274" width="329" height="20" font="2">	loop	it	is	declared	in.	If	you	want	the	</text>
<text top="364" left="603" width="10" height="14" font="5">c</text>
<text top="360" left="613" width="207" height="20" font="2">	variable	to	live	on	after</text>
<text top="386" left="54" width="216" height="20" font="2">the	brace	brackets	of	the	</text>
<text top="390" left="270" width="31" height="14" font="5">for</text>
<text top="386" left="301" width="260" height="20" font="2">	loop,	you	need	to	declare	the	</text>
<text top="390" left="562" width="10" height="14" font="5">c</text>
<text top="386" left="572" width="173" height="20" font="2">	variable	before	the	</text>
<text top="390" left="745" width="31" height="14" font="5">for</text>
<text top="386" left="776" width="49" height="20" font="2">	loop,</text>
<text top="412" left="54" width="128" height="20" font="2">as	shown	here:</text>
<text top="455" left="54" width="62" height="14" font="5">int	c;</text>
<text top="476" left="54" width="249" height="14" font="5">for(	c	=	0;	c	&lt;	5;	c++	)</text>
<text top="496" left="54" width="10" height="14" font="5">{</text>
<text top="517" left="54" width="207" height="14" font="5">		cout	&lt;&lt;	c	&lt;&lt;	endl;</text>
<text top="537" left="54" width="249" height="14" font="5">}	//	c	does	not	die	here</text>
</page>
<page number="191" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="315" height="32" font="7"><b>Static	local	variables</b></text>
<text top="110" left="54" width="39" height="20" font="2">The	</text>
<text top="115" left="93" width="62" height="14" font="5">static</text>
<text top="110" left="155" width="671" height="20" font="2">	local	variables	are	exactly	like	global	variables,	only	they	have	a	local	scope,</text>
<text top="136" left="54" width="275" height="20" font="2">as	shown	in	the	following	code:</text>
<text top="180" left="54" width="155" height="14" font="5">void	testFunc()</text>
<text top="200" left="54" width="10" height="14" font="5">{</text>
<text top="221" left="54" width="601" height="14" font="5">		static	int	runCount	=	0;	//	this	only	runs	ONCE,	even	on</text>
<text top="241" left="54" width="373" height="14" font="5">		//	subsequent	calls	to	testFunc()!</text>
<text top="262" left="54" width="673" height="14" font="5">		cout	&lt;&lt;	&#34;Ran	this	function	&#34;	&lt;&lt;	++runCount	&lt;&lt;	&#34;	times&#34;	&lt;&lt;	endl;</text>
<text top="282" left="54" width="590" height="14" font="5">}	//	runCount	stops	being	in	scope,	but	does	not	die	here</text>
<text top="323" left="54" width="104" height="14" font="5">int	main()</text>
<text top="344" left="54" width="10" height="14" font="5">{</text>
<text top="364" left="54" width="300" height="14" font="5">		testFunc();		//	says	1	time</text>
<text top="385" left="54" width="321" height="14" font="5">		testFunc();		//	says	2	times!</text>
<text top="405" left="54" width="10" height="14" font="5">}</text>
<text top="437" left="54" width="169" height="20" font="2">With	the	use	of	the	</text>
<text top="441" left="223" width="62" height="14" font="5">static</text>
<text top="437" left="285" width="143" height="20" font="2">	keyword	inside	</text>
<text top="441" left="428" width="104" height="14" font="5">testFunc()</text>
<text top="437" left="532" width="43" height="20" font="2">,	the	</text>
<text top="441" left="574" width="83" height="14" font="5">runCount</text>
<text top="437" left="657" width="176" height="20" font="2">	variable	remembers</text>
<text top="463" left="54" width="224" height="20" font="2">its	value	between	calls	of	</text>
<text top="467" left="278" width="104" height="14" font="5">testFunc()</text>
<text top="463" left="381" width="457" height="20" font="2">.	So,	the	output	of	the	two	separate	preceding	runs	of</text>
<text top="493" left="54" width="104" height="14" font="5">testFunc()</text>
<text top="488" left="158" width="26" height="20" font="2">	is:</text>
<text top="532" left="54" width="259" height="14" font="5">Ran	this	function	1	times</text>
<text top="552" left="54" width="259" height="14" font="5">Ran	this	function	2	times</text>
<text top="583" left="54" width="755" height="20" font="2">That’s	because	static	variables	are	only	created	and	initialized	once	(the	first	time	when</text>
<text top="609" left="54" width="738" height="20" font="2">the	function	they	are	declared	in	runs),	and	after	that,	the	static	variable	retains	its	old</text>
<text top="635" left="54" width="198" height="20" font="2">value.	Say,	we	declare	</text>
<text top="640" left="252" width="83" height="14" font="5">runCount</text>
<text top="635" left="334" width="326" height="20" font="2">	as	a	regular,	local,	nonstatic	variable:</text>
<text top="679" left="54" width="621" height="14" font="5">int	runCount	=	0;	//	if	declared	this	way,	runCount	is	local</text>
<text top="710" left="54" width="330" height="20" font="2">Then,	this	is	how	the	output	will	look:</text>
<text top="753" left="54" width="259" height="14" font="5">Ran	this	function	1	times</text>
<text top="774" left="54" width="259" height="14" font="5">Ran	this	function	1	times</text>
<text top="805" left="54" width="116" height="20" font="2">Here,	we	see	</text>
<text top="809" left="170" width="83" height="14" font="5">testFunc</text>
<text top="805" left="253" width="67" height="20" font="2">	saying	</text>
<text top="809" left="320" width="249" height="14" font="5">Ran	this	function	1	time</text>
<text top="805" left="569" width="225" height="20" font="2">	both	the	times.	As	a	local</text>
<text top="831" left="54" width="188" height="20" font="2">variable,	the	value	of	</text>
<text top="835" left="242" width="83" height="14" font="5">runCount</text>
<text top="831" left="324" width="333" height="20" font="2">	is	not	retained	between	function	calls.</text>
<text top="868" left="54" width="780" height="20" font="2">You	should	not	overuse	static	local	variables.	In	general,	you	should	only	use	a	static	local</text>
<text top="894" left="54" width="346" height="20" font="2">variable	when	it	is	absolutely	necessary.</text>
</page>
<page number="192" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="236" height="32" font="7"><b>Const	variables</b></text>
<text top="110" left="54" width="21" height="20" font="2">A	</text>
<text top="115" left="75" width="52" height="14" font="5">const</text>
<text top="110" left="127" width="690" height="20" font="2">	variable	is	a	variable	whose	value	you	promise	the	compiler	not	to	change	after</text>
<text top="136" left="54" width="686" height="20" font="2">the	first	initialization.	We	can	declare	one	simply,	for	example,	for	the	value	of	</text>
<text top="141" left="740" width="21" height="14" font="5">pi</text>
<text top="136" left="760" width="6" height="20" font="2">:</text>
<text top="180" left="54" width="269" height="14" font="5">const	double	pi	=	3.14159;</text>
<text top="211" left="54" width="53" height="20" font="2">Since	</text>
<text top="215" left="107" width="21" height="14" font="5">pi</text>
<text top="211" left="128" width="673" height="20" font="2">	is	a	universal	constant	(one	of	the	few	things	you	can	rely	on	to	be	the	same),</text>
<text top="237" left="54" width="299" height="20" font="2">there	should	be	no	need	to	change	</text>
<text top="241" left="353" width="21" height="14" font="5">pi</text>
<text top="237" left="374" width="334" height="20" font="2">	after	initialization.	In	fact,	changes	to	</text>
<text top="241" left="708" width="21" height="14" font="5">pi</text>
<text top="237" left="728" width="89" height="20" font="2">	should	be</text>
<text top="263" left="54" width="470" height="20" font="2">forbidden	by	the	compiler.	Try,	for	example,	to	assign	</text>
<text top="267" left="524" width="21" height="14" font="5">pi</text>
<text top="263" left="545" width="114" height="20" font="2">	a	new	value:</text>
<text top="306" left="54" width="83" height="14" font="5">pi	*=	2;</text>
<text top="337" left="54" width="355" height="20" font="2">We	will	get	the	following	compiler	error:</text>
<text top="380" left="54" width="673" height="14" font="5">error	C3892:	'pi'	:	you	cannot	assign	to	a	variable	that	is	const</text>
<text top="412" left="54" width="771" height="20" font="2">This	error	makes	perfect	sense,	because	besides	the	initial	initialization,	we	should	not	be</text>
<text top="438" left="54" width="237" height="20" font="2">able	to	change	the	value	of	</text>
<text top="442" left="291" width="21" height="14" font="5">pi</text>
<text top="438" left="312" width="252" height="20" font="2">—	a	variable	that	is	constant.</text>
</page>
<page number="193" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="307" height="32" font="7"><b>Function	prototypes</b></text>
<text top="110" left="54" width="766" height="20" font="2">A	function	prototype	is	the	signature	of	the	function	without	the	body.	For	example,	let’s</text>
<text top="136" left="54" width="120" height="20" font="2">prototype	the	</text>
<text top="141" left="174" width="104" height="14" font="5">isPositive</text>
<text top="136" left="277" width="11" height="20" font="2">,	</text>
<text top="141" left="288" width="83" height="14" font="5">absEqual</text>
<text top="136" left="371" width="47" height="20" font="2">,	and	</text>
<text top="141" left="419" width="83" height="14" font="5">getGrade</text>
<text top="136" left="501" width="254" height="20" font="2">	functions	from	the	following</text>
<text top="162" left="54" width="85" height="20" font="2">exercises:</text>
<text top="205" left="54" width="331" height="14" font="5">bool	isPositive(	double	value	);</text>
<text top="226" left="54" width="311" height="14" font="5">bool	absEqual(	int	a,	int	b	);</text>
<text top="247" left="54" width="280" height="14" font="5">char	getGrade(	int	grade	);</text>
<text top="278" left="54" width="769" height="20" font="2">Notice	how	the	function	prototypes	are	just	the	return	type,	function	name,	and	argument</text>
<text top="304" left="54" width="725" height="20" font="2">list	that	the	function	requires.	Function	prototypes	don’t	get	a	body.	The	body	of	the</text>
<text top="330" left="54" width="265" height="20" font="2">function	is	typically	put	in	the	</text>
<text top="334" left="319" width="41" height="14" font="5">.cpp</text>
<text top="330" left="360" width="40" height="20" font="2">	file.</text>
</page>
<page number="194" position="absolute" top="0" left="0" height="1262" width="892">
<image top="231" left="54" width="785" height="366" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-194_1.jpg"/>
<image top="698" left="54" width="187" height="154" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-194_2.jpg"/>
<text top="61" left="54" width="238" height="32" font="7"><b>.h	and	.cpp	files</b></text>
<text top="110" left="54" width="424" height="20" font="2">It	is	typical	to	put	your	function	prototypes	in	an	</text>
<text top="115" left="478" width="21" height="14" font="5">.h</text>
<text top="110" left="499" width="327" height="20" font="2">	file	and	the	bodies	of	the	functions	in</text>
<text top="136" left="54" width="15" height="20" font="2">a	</text>
<text top="141" left="69" width="41" height="14" font="5">.cpp</text>
<text top="136" left="110" width="420" height="20" font="2">	file.	The	reason	for	this	is	you	can	include	your	</text>
<text top="141" left="530" width="21" height="14" font="5">.h</text>
<text top="136" left="551" width="158" height="20" font="2">	file	in	a	bunch	of	</text>
<text top="141" left="709" width="41" height="14" font="5">.cpp</text>
<text top="136" left="750" width="79" height="20" font="2">	files	and</text>
<text top="162" left="54" width="287" height="20" font="2">not	get	multiple	definition	errors.</text>
<text top="199" left="54" width="465" height="20" font="2">The	following	screenshot	gives	you	a	clear	picture	of	</text>
<text top="203" left="519" width="21" height="14" font="5">.h</text>
<text top="199" left="539" width="42" height="20" font="2">	and	</text>
<text top="203" left="581" width="41" height="14" font="5">.cpp</text>
<text top="199" left="623" width="54" height="20" font="2">	files:.</text>
<text top="666" left="54" width="450" height="20" font="2">Here,	we	have	three	files	in	this	Visual	C++	project:</text>
</page>
<page number="195" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="326" height="32" font="7"><b>prototypes.h	contains</b></text>
<text top="117" left="54" width="342" height="14" font="5">//	Make	sure	these	prototypes	are</text>
<text top="137" left="54" width="373" height="14" font="5">//	only	included	in	compilation	ONCE</text>
<text top="158" left="54" width="124" height="14" font="5">#pragma	once</text>
<text top="178" left="54" width="570" height="14" font="5">extern	int	superglobal;	//	extern:	variable	&#34;prototype&#34;</text>
<text top="199" left="54" width="228" height="14" font="5">//	function	prototypes</text>
<text top="220" left="54" width="331" height="14" font="5">bool	isPositive(	double	value	);</text>
<text top="240" left="54" width="311" height="14" font="5">bool	absEqual(	int	a,	int	b	);</text>
<text top="261" left="54" width="280" height="14" font="5">char	getGrade(	int	grade	);</text>
<text top="292" left="54" width="39" height="20" font="2">The	</text>
<text top="296" left="93" width="124" height="14" font="5">prototypes.h</text>
<text top="292" left="217" width="517" height="20" font="2">	file	contains	function	prototypes.	We	will	explain	what	the	</text>
<text top="296" left="734" width="62" height="14" font="5">extern</text>
<text top="318" left="54" width="301" height="20" font="2">keyword	does	in	a	few	paragraphs.</text>
</page>
<page number="196" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="281" height="32" font="7"><b>funcs.cpp	contains</b></text>
<text top="117" left="54" width="611" height="14" font="5">#include	&#34;prototypes.h&#34;	//	every	file	that	uses	isPositive,</text>
<text top="137" left="54" width="539" height="14" font="5">//	absEqual	or	getGrade	must	#include	&#34;prototypes.h&#34;</text>
<text top="158" left="54" width="466" height="14" font="5">int	superglobal;	//	variable	&#34;implementation&#34;</text>
<text top="178" left="54" width="632" height="14" font="5">//	The	actual	function	definitions	are	here,	in	the	.cpp	file</text>
<text top="199" left="54" width="321" height="14" font="5">bool	isPositive(	double	value	)</text>
<text top="220" left="54" width="10" height="14" font="5">{</text>
<text top="240" left="54" width="197" height="14" font="5">		return	value	&gt;	0;</text>
<text top="261" left="54" width="10" height="14" font="5">}</text>
<text top="281" left="54" width="300" height="14" font="5">bool	absEqual(	int	a,	int	b	)</text>
<text top="302" left="54" width="10" height="14" font="5">{</text>
<text top="322" left="54" width="269" height="14" font="5">		//	Make	a	and	b	positive</text>
<text top="343" left="54" width="135" height="14" font="5">		if(	a	&lt;	0	)</text>
<text top="363" left="54" width="114" height="14" font="5">				a	=	-a;</text>
<text top="384" left="54" width="135" height="14" font="5">		if(	b	&lt;	0	)</text>
<text top="404" left="54" width="114" height="14" font="5">				b	=	-b;</text>
<text top="425" left="54" width="331" height="14" font="5">		//	now	since	they're	both	+ve,</text>
<text top="445" left="54" width="590" height="14" font="5">		//	we	just	have	to	compare	equality	of	a	and	b	together</text>
<text top="466" left="54" width="166" height="14" font="5">		return	a	==	b;</text>
<text top="486" left="54" width="10" height="14" font="5">}</text>
<text top="507" left="54" width="269" height="14" font="5">char	getGrade(	int	grade	)</text>
<text top="527" left="54" width="10" height="14" font="5">{</text>
<text top="548" left="54" width="197" height="14" font="5">		if(	grade	&gt;=	80	)</text>
<text top="568" left="54" width="155" height="14" font="5">				return	'A';</text>
<text top="589" left="54" width="249" height="14" font="5">		else	if(	grade	&gt;=	70	)</text>
<text top="609" left="54" width="155" height="14" font="5">				return	'B';</text>
<text top="630" left="54" width="249" height="14" font="5">		else	if(	grade	&gt;=	60	)</text>
<text top="651" left="54" width="155" height="14" font="5">				return	'C';</text>
<text top="671" left="54" width="249" height="14" font="5">		else	if(	grade	&gt;=	50	)</text>
<text top="692" left="54" width="155" height="14" font="5">				return	'D';</text>
<text top="712" left="54" width="62" height="14" font="5">		else</text>
<text top="733" left="54" width="155" height="14" font="5">				return	'F';</text>
<text top="753" left="54" width="10" height="14" font="5">}</text>
</page>
<page number="197" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="277" height="32" font="7"><b>main.cpp	contains</b></text>
<text top="117" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="137" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="158" left="54" width="611" height="14" font="5">#include	&#34;prototypes.h&#34;	//	for	use	of	isPositive,	absEqual	</text>
<text top="178" left="54" width="124" height="14" font="5">//	functions</text>
<text top="199" left="54" width="104" height="14" font="5">int	main()</text>
<text top="220" left="54" width="10" height="14" font="5">{</text>
<text top="240" left="54" width="487" height="14" font="5">		cout	&lt;&lt;	boolalpha	&lt;&lt;	isPositive(	4	)	&lt;&lt;	endl;</text>
<text top="261" left="54" width="373" height="14" font="5">		cout	&lt;&lt;	absEqual(	4,	-4	)	&lt;&lt;	endl;</text>
<text top="281" left="54" width="10" height="14" font="5">}</text>
<text top="312" left="54" width="281" height="20" font="2">When	you	split	up	the	code	into	</text>
<text top="317" left="335" width="21" height="14" font="5">.h</text>
<text top="312" left="356" width="42" height="20" font="2">	and	</text>
<text top="317" left="398" width="41" height="14" font="5">.cpp</text>
<text top="312" left="439" width="85" height="20" font="2">	files,	the	</text>
<text top="317" left="524" width="21" height="14" font="5">.h</text>
<text top="312" left="545" width="286" height="20" font="2">	file	(the	header	file)	is	called	the</text>
<text top="338" left="54" width="149" height="20" font="2">interface	and	the	</text>
<text top="343" left="203" width="41" height="14" font="5">.cpp</text>
<text top="338" left="245" width="483" height="20" font="2">	file	(the	one	with	the	actual	functions	in	it)	is	called	the</text>
<text top="364" left="54" width="141" height="20" font="2">implementation.</text>
<text top="401" left="54" width="710" height="20" font="2">The	puzzling	part	at	first	for	some	programmers	is	how	does	C++	know	where	the</text>
<text top="431" left="54" width="104" height="14" font="5">isPositive</text>
<text top="427" left="158" width="42" height="20" font="2">	and	</text>
<text top="431" left="200" width="83" height="14" font="5">getGrade</text>
<text top="427" left="282" width="275" height="20" font="2">	function	bodies	are,	if	we	only	</text>
<text top="431" left="557" width="83" height="14" font="5">#include</text>
<text top="427" left="640" width="138" height="20" font="2">	the	prototypes?</text>
<text top="453" left="54" width="121" height="20" font="2">Shouldn’t	we	</text>
<text top="457" left="175" width="83" height="14" font="5">#include</text>
<text top="453" left="258" width="37" height="20" font="2">	the	</text>
<text top="457" left="295" width="93" height="14" font="5">funcs.cpp</text>
<text top="453" left="388" width="79" height="20" font="2">	file	into	</text>
<text top="457" left="466" width="83" height="14" font="5">main.cpp</text>
<text top="453" left="549" width="43" height="20" font="2">	too?</text>
<text top="490" left="54" width="341" height="20" font="2">The	answer	is	<i>magic</i>.	You	only	need	to	</text>
<text top="494" left="395" width="83" height="14" font="5">#include</text>
<text top="490" left="478" width="37" height="20" font="2">	the	</text>
<text top="494" left="515" width="124" height="14" font="5">prototypes.h</text>
<text top="490" left="640" width="163" height="20" font="2">	header	file	in	both</text>
<text top="520" left="54" width="83" height="14" font="5">main.cpp</text>
<text top="515" left="137" width="42" height="20" font="2">	and	</text>
<text top="520" left="179" width="93" height="14" font="5">funcs.cpp</text>
<text top="515" left="272" width="151" height="20" font="2">.	As	long	as	both	</text>
<text top="520" left="423" width="41" height="14" font="5">.cpp</text>
<text top="515" left="465" width="368" height="20" font="2">	files	are	included	in	your	C++	<b>Integrated</b></text>
<text top="542" left="54" width="771" height="19" font="3"><b>Development	Environment</b>	(<b>IDE</b>)	project	(that	is,	they	appear	in	the	<b>Solution	Explorer</b></text>
<text top="567" left="54" width="773" height="20" font="2">tree	view	at	the	left-hand	side),	the	linkup	of	the	prototypes	to	the	function	bodies	is	done</text>
<text top="593" left="54" width="263" height="20" font="2">automatically	by	the	compiler.</text>
</page>
<page number="198" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="252" height="32" font="7"><b>Extern	variables</b></text>
<text top="110" left="54" width="32" height="20" font="2">An	</text>
<text top="115" left="86" width="62" height="14" font="5">extern</text>
<text top="110" left="148" width="683" height="20" font="2">	declaration	is	similar	to	a	function	prototype,	only	it	is	used	on	a	variable.	You</text>
<text top="136" left="54" width="94" height="20" font="2">can	put	an	</text>
<text top="141" left="148" width="62" height="14" font="5">extern</text>
<text top="136" left="210" width="289" height="20" font="2">	global	variable	declaration	in	an	</text>
<text top="141" left="499" width="21" height="14" font="5">.h</text>
<text top="136" left="520" width="187" height="20" font="2">	file,	and	include	this	</text>
<text top="141" left="707" width="21" height="14" font="5">.h</text>
<text top="136" left="728" width="71" height="20" font="2">	file	in	a</text>
<text top="162" left="54" width="725" height="20" font="2">whole	bunch	of	other	files.	This	way,	you	can	have	a	single	global	variable	that	gets</text>
<text top="188" left="54" width="753" height="20" font="2">shared	across	multiple	source	files,	without	getting	the	multiply	defined	symbols	found</text>
<text top="214" left="54" width="501" height="20" font="2">linker	error.	You’d	put	the	actual	variable	declaration	in	a	</text>
<text top="218" left="555" width="41" height="14" font="5">.cpp</text>
<text top="214" left="596" width="203" height="20" font="2">	file	so	that	the	variable</text>
<text top="240" left="54" width="315" height="20" font="2">only	gets	declared	once.	There	is	an	</text>
<text top="244" left="369" width="62" height="14" font="5">extern</text>
<text top="240" left="431" width="134" height="20" font="2">	variable	in	the	</text>
<text top="244" left="566" width="124" height="14" font="5">prototypes.h</text>
<text top="240" left="690" width="88" height="20" font="2">	file	in	the</text>
<text top="266" left="54" width="158" height="20" font="2">previous	example.</text>
</page>
<page number="199" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="200" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="138" height="39" font="0"><b>Macros</b></text>
<text top="120" left="54" width="703" height="20" font="2">C++	macros	are	from	a	class	of	C++	commands	called	preprocessor	directives.	A</text>
<text top="146" left="54" width="568" height="20" font="2">preprocessor	directive	is	executed	before	compilation	takes	place.</text>
<text top="183" left="54" width="156" height="20" font="2">Macros	start	with	</text>
<text top="187" left="210" width="73" height="14" font="5">#define</text>
<text top="183" left="283" width="422" height="20" font="2">.	For	example,	say	we	have	the	following	macro:</text>
<text top="226" left="54" width="186" height="14" font="5">#define	PI	3.14159</text>
<text top="257" left="54" width="749" height="20" font="2">At	the	lowest	level,	macros	are	simply	copy	and	paste	OPS	that	occur	just	before</text>
<text top="283" left="54" width="454" height="20" font="2">compile	time.	In	the	preceding	macro	statement,	the	</text>
<text top="288" left="508" width="73" height="14" font="5">3.14159</text>
<text top="283" left="581" width="220" height="20" font="2">	literal	will	be	copied	and</text>
<text top="309" left="54" width="267" height="20" font="2">pasted	everywhere	the	symbol	</text>
<text top="313" left="321" width="21" height="14" font="5">PI</text>
<text top="309" left="342" width="200" height="20" font="2">	occurs	in	the	program.</text>
<text top="346" left="54" width="343" height="20" font="2">Take	an	example	of	the	following	code:</text>
<text top="389" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="410" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="430" left="54" width="186" height="14" font="5">#define	PI	3.14159</text>
<text top="451" left="54" width="104" height="14" font="5">int	main()</text>
<text top="471" left="54" width="10" height="14" font="5">{</text>
<text top="492" left="54" width="155" height="14" font="5">		double	r	=	4;</text>
<text top="512" left="54" width="497" height="14" font="5">		cout	&lt;&lt;	&#34;Circumference	is	&#34;	&lt;&lt;	2*PI*r	&lt;&lt;	endl;</text>
<text top="533" left="54" width="10" height="14" font="5">}</text>
<text top="564" left="54" width="767" height="20" font="2">What	the	C++	preprocessor	will	do	is	first	go	through	the	code	and	look	for	any	usage	of</text>
<text top="590" left="54" width="32" height="20" font="2">the	</text>
<text top="594" left="86" width="21" height="14" font="5">PI</text>
<text top="590" left="106" width="415" height="20" font="2">	symbol.	It	will	find	one	such	usage	on	this	line:</text>
<text top="633" left="54" width="476" height="14" font="5">cout	&lt;&lt;	&#34;Circumference	is	&#34;	&lt;&lt;	2*PI*r	&lt;&lt;	endl;</text>
<text top="665" left="54" width="626" height="20" font="2">The	preceding	line	will	convert	to	the	following	just	before	compilation:</text>
<text top="708" left="54" width="528" height="14" font="5">cout	&lt;&lt;	&#34;Circumference	is	&#34;	&lt;&lt;	2*3.14159*r	&lt;&lt;	endl;</text>
<text top="739" left="54" width="233" height="20" font="2">So,	all	that	happens	with	a	</text>
<text top="743" left="287" width="73" height="14" font="5">#define</text>
<text top="739" left="360" width="437" height="20" font="2">	statement	is	that	all	the	occurrences	of	the	symbol</text>
<text top="765" left="54" width="136" height="20" font="2">used	(example,	</text>
<text top="769" left="190" width="21" height="14" font="5">PI</text>
<text top="765" left="211" width="309" height="20" font="2">)	are	replaced	by	the	literal	number	</text>
<text top="769" left="519" width="73" height="14" font="5">3.14159</text>
<text top="765" left="592" width="215" height="20" font="2">	even	before	compilation</text>
<text top="791" left="54" width="742" height="20" font="2">occurs.	The	point	of	using	macros	in	this	way	is	to	avoid	hardcoding	numbers	into	the</text>
<text top="817" left="54" width="570" height="20" font="2">code.	Symbols	are	typically	easier	to	read	than	big,	long	numbers.</text>
</page>
<page number="201" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="749" height="32" font="7"><b>Advice	–	try	to	use	const	variables	where	possible</b></text>
<text top="110" left="54" width="575" height="20" font="2">You	can	use	macros	to	define	constant	variables.	You	can	also	use	</text>
<text top="115" left="629" width="52" height="14" font="5">const</text>
<text top="110" left="681" width="75" height="20" font="2">	variable</text>
<text top="136" left="54" width="552" height="20" font="2">expressions	instead.	So,	say	we	have	the	following	line	of	code:</text>
<text top="180" left="54" width="186" height="14" font="5">#define	PI	3.14159</text>
<text top="211" left="54" width="448" height="20" font="2">We	will	be	encouraged	to	use	the	following	instead:</text>
<text top="254" left="54" width="269" height="14" font="5">const	double	PI	=	3.14159;</text>
<text top="285" left="54" width="72" height="20" font="2">Using	a	</text>
<text top="290" left="126" width="52" height="14" font="5">const</text>
<text top="285" left="178" width="628" height="20" font="2">	variable	will	be	encouraged	because	it	stores	your	value	inside	an	actual</text>
<text top="311" left="54" width="537" height="20" font="2">variable.	The	variable	is	typed,	and	typed	data	is	a	good	thing.</text>
</page>
<page number="202" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="203" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="438" height="39" font="0"><b>Macros	with	arguments</b></text>
<text top="120" left="54" width="753" height="20" font="2">We	can	also	write	macros	that	accept	arguments.	Here’s	an	example	of	a	macro	with	an</text>
<text top="146" left="54" width="87" height="20" font="2">argument:</text>
<text top="189" left="54" width="383" height="14" font="5">#define	println(X)	cout	&lt;&lt;	X	&lt;&lt;	endl;</text>
<text top="221" left="54" width="331" height="20" font="2">What	this	macro	will	do	is	every	time	</text>
<text top="225" left="385" width="218" height="14" font="5">println(&#34;Some	value&#34;)</text>
<text top="221" left="602" width="236" height="20" font="2">	is	encountered	in	the	code,</text>
<text top="246" left="54" width="279" height="20" font="2">the	code	on	the	right-hand	side	(</text>
<text top="251" left="333" width="290" height="14" font="5">cout	&lt;&lt;	&#34;Some	value&#34;	&lt;&lt;	endl</text>
<text top="246" left="623" width="171" height="20" font="2">)	will	be	copied	and</text>
<text top="272" left="54" width="738" height="20" font="2">pasted	on	the	console.	Notice	how	the	argument	between	the	brackets	is	copied	in	the</text>
<text top="298" left="54" width="74" height="20" font="2">place	of	</text>
<text top="303" left="128" width="10" height="14" font="5">X</text>
<text top="298" left="139" width="345" height="20" font="2">.	Say	we	had	the	following	line	of	code:</text>
<text top="342" left="54" width="249" height="14" font="5">println(	&#34;Hello	there&#34;	)</text>
<text top="373" left="54" width="424" height="20" font="2">This	will	be	replaced	by	the	following	statement:</text>
<text top="416" left="54" width="311" height="14" font="5">cout	&lt;&lt;	&#34;Hello	there&#34;	&lt;&lt;	endl;</text>
<text top="447" left="54" width="763" height="20" font="2">Macros	with	arguments	are	exactly	like	very	short	functions.	Macros	cannot	contain	any</text>
<text top="473" left="54" width="237" height="20" font="2">newline	characters	in	them.</text>
</page>
<page number="204" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="785" height="32" font="7"><b>Advice	–	use	inline	functions	instead	of	macros	with</b></text>
<text top="103" left="54" width="162" height="32" font="7"><b>arguments</b></text>
<text top="152" left="54" width="750" height="20" font="2">You	have	to	know	about	how	macros	with	arguments	work	because	you	will	encounter</text>
<text top="178" left="54" width="761" height="20" font="2">them	in	C++	code	a	lot.	Whenever	possible,	however,	many	C++	programmers	prefer	to</text>
<text top="204" left="54" width="425" height="20" font="2">use	inline	functions	over	macros	with	arguments.</text>
<text top="241" left="54" width="383" height="20" font="2">A	normal	function	call	execution	involves	a	</text>
<text top="245" left="437" width="41" height="14" font="5">jump</text>
<text top="241" left="478" width="340" height="20" font="2">	instruction	to	the	function	and	then	the</text>
<text top="267" left="54" width="767" height="20" font="2">execution	of	the	function.	An	inline<i>	</i>function	is	one	whose	lines	of	code	are	copied	to	the</text>
<text top="293" left="54" width="737" height="20" font="2">point	of	the	function	call	and	no	jump	is	issued.	Using	inline	functions	usually	makes</text>
<text top="319" left="54" width="769" height="20" font="2">sense	for	very	small,	simple	functions	that	don’t	have	a	lot	of	lines	of	code.	For	example,</text>
<text top="345" left="54" width="296" height="20" font="2">we	might	inline	a	simple	function	</text>
<text top="349" left="350" width="31" height="14" font="5">max</text>
<text top="345" left="381" width="301" height="20" font="2">	that	finds	the	larger	of	two	values:</text>
<text top="388" left="54" width="311" height="14" font="5">inline	int	max(	int	a,	int	b	)</text>
<text top="409" left="54" width="10" height="14" font="5">{</text>
<text top="429" left="54" width="238" height="14" font="5">		if(	a	&gt;	b	)	return	a;</text>
<text top="450" left="54" width="166" height="14" font="5">		else	return	b;</text>
<text top="470" left="54" width="10" height="14" font="5">}</text>
<text top="501" left="54" width="146" height="20" font="2">Everywhere	this	</text>
<text top="506" left="200" width="31" height="14" font="5">max</text>
<text top="501" left="231" width="578" height="20" font="2">	function	is	used,	the	code	for	the	function	body	will	be	copied	and</text>
<text top="527" left="54" width="462" height="20" font="2">pasted	at	the	point	of	the	function	call.	Not	having	to	</text>
<text top="532" left="516" width="41" height="14" font="5">jump</text>
<text top="527" left="557" width="273" height="20" font="2">	to	the	function	saves	execution</text>
<text top="553" left="54" width="512" height="20" font="2">time,	making	inline	functions	effectively	similar	to	macros.</text>
<text top="590" left="54" width="698" height="20" font="2">There	is	a	catch	to	using	inline	functions.	Inline	functions	must	have	their	bodies</text>
<text top="616" left="54" width="245" height="20" font="2">completely	contained	in	the	</text>
<text top="620" left="299" width="21" height="14" font="5">.h</text>
<text top="616" left="319" width="430" height="20" font="2">	header	file.	This	is	so	that	the	compiler	can	make</text>
<text top="642" left="54" width="739" height="20" font="2">optimizations	and	actually	inline	the	function	wherever	it	is	used.	Functions	are	made</text>
<text top="668" left="54" width="743" height="20" font="2">inline	typically	for	speed	(since	you	don’t	have	to	jump	to	another	body	of	the	code	to</text>
<text top="694" left="54" width="432" height="20" font="2">execute	the	function)	but	at	the	cost	of	code	bloat.</text>
<text top="730" left="54" width="673" height="20" font="2">The	following	are	the	reasons	why	inline	functions	are	preferred	over	macros:</text>
<text top="767" left="69" width="576" height="20" font="2">1.	 Macros	are	error	prone:	the	argument	to	the	macro	is	not	typed.</text>
<text top="793" left="69" width="692" height="20" font="2">2.	 Macros	have	to	be	written	in	one	line	or	you	will	see	them	using	use	escaped</text>
<text top="836" left="97" width="10" height="14" font="5">\</text>
<text top="857" left="97" width="207" height="14" font="5">newline	characters	\</text>
<text top="877" left="97" width="114" height="14" font="5">like	this	\</text>
<text top="898" left="97" width="218" height="14" font="5">which	is	hard	to	read</text>
<text top="929" left="69" width="745" height="20" font="2">3.	 If	the	macro	is	not	carefully	written,	it	will	result	in	difficult-to-fix	compiler	errors.</text>
<text top="955" left="97" width="706" height="20" font="2">For	example,	if	you	do	not	bracket	your	argument	properly,	your	code	will	just	be</text>
<text top="981" left="97" width="61" height="20" font="2">wrong.</text>
<text top="1007" left="69" width="307" height="20" font="2">4.	 Large	macros	are	hard	to	debug.</text>
<text top="1065" left="54" width="775" height="20" font="2">It	should	be	said	that	macros	do	allow	you	to	perform	some	preprocessor	compiler	magic.</text>
<text top="1091" left="54" width="617" height="20" font="2">UE4	makes	a	lot	of	use	of	macros	with	arguments,	as	you	will	see	later.</text>
</page>
<page number="205" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="206" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="182" height="39" font="0"><b>Summary</b></text>
<text top="120" left="54" width="739" height="20" font="2">Function	calls	allow	you	to	reuse	basic	code.	Code	reuse	is	important	for	a	number	of</text>
<text top="146" left="54" width="751" height="20" font="2">reasons:	mainly	because	programming	is	hard	and	duplicating	effort	should	be	avoided</text>
<text top="172" left="54" width="559" height="20" font="2">wherever	possible.	The	efforts	of	the	programmer	that	wrote	the	</text>
<text top="176" left="613" width="62" height="14" font="5">sqrt()</text>
<text top="172" left="675" width="137" height="20" font="2">	function	do	not</text>
<text top="198" left="54" width="692" height="20" font="2">need	to	be	repeated	by	other	programmers	who	want	to	solve	the	same	problem.</text>
</page>
<page number="207" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="208" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="596" height="39" font="0"><b>Chapter	6.	Objects,	Classes,	and</b></text>
<text top="116" left="54" width="213" height="39" font="0"><b>Inheritance</b></text>
<text top="172" left="54" width="767" height="20" font="2">In	the	previous	chapter,	we	discussed	functions	as	a	way	to	bundle	up	a	bunch	of	lines	of</text>
<text top="198" left="54" width="767" height="20" font="2">related	code.	We	talked	about	how	functions	abstracted	away	implementation	details	and</text>
<text top="224" left="54" width="74" height="20" font="2">how	the	</text>
<text top="228" left="128" width="62" height="14" font="5">sqrt()</text>
<text top="224" left="190" width="644" height="20" font="2">	function	does	not	require	you	to	understand	how	it	works	internally	to	use</text>
<text top="250" left="54" width="749" height="20" font="2">it	to	find	roots.	This	was	a	good	thing,	primarily	because	it	saved	the	programmer	time</text>
<text top="276" left="54" width="762" height="20" font="2">and	effort,	while	making	the	actual	work	of	finding	square	roots	easier.	This	principle	of</text>
<text top="302" left="54" width="534" height="20" font="4"><i>abstraction</i>	will	come	up	again	here	when	we	discuss	objects.</text>
<text top="338" left="54" width="744" height="20" font="2">In	a	nutshell,	objects	tie	together	methods	and	their	related	data	into	a	single	structure.</text>
<text top="364" left="54" width="696" height="20" font="2">This	structure	is	called	a	<i>class</i>.	The	main	idea	of	using	objects	is	to	create	a	code</text>
<text top="390" left="54" width="774" height="20" font="2">representation	for	every	thing	inside	your	game.	Every	object	represented	in	the	code	will</text>
<text top="416" left="54" width="753" height="20" font="2">have	data	and	associated	functions	that	operate	on	that	data.	So	you’d	have	an	<i>object</i>	to</text>
<text top="442" left="54" width="632" height="20" font="2">represent	your	player	instance	and	related	functions	that	make	the	player	</text>
<text top="446" left="686" width="62" height="14" font="5">jump()</text>
<text top="442" left="748" width="11" height="20" font="2">,	</text>
<text top="446" left="759" width="73" height="14" font="5">shoot()</text>
<text top="442" left="832" width="5" height="20" font="2">,</text>
<text top="468" left="54" width="37" height="20" font="2">and	</text>
<text top="472" left="91" width="124" height="14" font="5">pickupItem()</text>
<text top="468" left="215" width="555" height="20" font="2">	functions.	You’d	also	have	an	object	to	represent	every	monster</text>
<text top="494" left="54" width="331" height="20" font="2">instance	and	related	functions	such	as	</text>
<text top="498" left="385" width="73" height="14" font="5">growl()</text>
<text top="494" left="457" width="11" height="20" font="2">,	</text>
<text top="498" left="468" width="83" height="14" font="5">attack()</text>
<text top="494" left="551" width="125" height="20" font="2">,	and	possibly	</text>
<text top="498" left="676" width="83" height="14" font="5">follow()</text>
<text top="494" left="759" width="5" height="20" font="2">.</text>
<text top="531" left="54" width="742" height="20" font="2">Objects	are	types	of	variables,	though,	and	objects	will	stay	in	memory	as	long	as	you</text>
<text top="556" left="54" width="717" height="20" font="2">keep	them	there.	You	create	an	object	instance	once	when	the	thing	in	your	game	it</text>
<text top="582" left="54" width="760" height="20" font="2">represents	is	created,	and	you	destroy	the	object	instance	when	the	thing	in	your	game	it</text>
<text top="608" left="54" width="133" height="20" font="2">represents	dies.</text>
<text top="645" left="54" width="783" height="20" font="2">Objects	can	be	used	to	represent	in-game	things,	but	they	can	also	be	used	to	represent	any</text>
<text top="671" left="54" width="774" height="20" font="2">other	type	of	thing.	For	example,	you	can	store	an	image	as	an	object.	The	data	fields	will</text>
<text top="697" left="54" width="751" height="20" font="2">be	the	image’s	width	of	the	image,	its	height,	and	the	collection	of	pixels	inside	it.	C++</text>
<text top="723" left="54" width="201" height="20" font="2">strings	are	also	objects.</text>
<text top="761" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="800" left="54" width="762" height="20" font="2">This	chapter	contains	a	lot	of	keywords	that	might	be	difficult	to	grasp	at	first,	including</text>
<text top="830" left="54" width="73" height="14" font="5">virtual</text>
<text top="825" left="127" width="42" height="20" font="2">	and	</text>
<text top="830" left="168" width="83" height="14" font="5">abstract</text>
<text top="825" left="251" width="5" height="20" font="2">.</text>
<text top="862" left="54" width="773" height="20" font="2">Don’t	let	the	more	difficult	sections	of	this	chapter	bog	you	down.	I	included	descriptions</text>
<text top="888" left="54" width="773" height="20" font="2">of	many	advanced	concepts	for	completeness.	However,	bear	in	mind	that	you	don’t	need</text>
<text top="914" left="54" width="774" height="20" font="2">to	completely	understand	everything	in	this	chapter	to	write	working	C++	code	in	UE4.	It</text>
<text top="940" left="54" width="777" height="20" font="2">helps	to	understand	it,	but	if	something	doesn’t	make	sense,	don’t	get	stuck.	Give	it	a	read</text>
<text top="966" left="54" width="783" height="20" font="2">and	then	move	on.	Probably	what	will	happen	is	you	will	not	get	it	at	first,	but	remember	a</text>
<text top="992" left="54" width="769" height="20" font="2">reference	to	the	concept	in	question	when	you’re	coding.	Then,	when	you	open	this	book</text>
<text top="1018" left="54" width="321" height="20" font="2">up	again,	“voilà!”	It	will	make	sense.</text>
</page>
<page number="209" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="248" height="39" font="0"><b>struct	objects</b></text>
<text top="120" left="54" width="728" height="20" font="2">An	object	in	C++	is	basically	any	variable	type	that	is	made	up	of	a	conglomerate	of</text>
<text top="146" left="54" width="407" height="20" font="2">simpler	types.	The	most	basic	object	in	C++	is	</text>
<text top="150" left="461" width="62" height="14" font="5">struct</text>
<text top="146" left="523" width="110" height="20" font="2">.	We	use	the	</text>
<text top="150" left="633" width="62" height="14" font="5">struct</text>
<text top="146" left="695" width="103" height="20" font="2">	keyword	to</text>
<text top="172" left="54" width="731" height="20" font="2">glue	together	a	bunch	of	smaller	variables	into	one	big	variable.	If	you	recall,	we	did</text>
<text top="198" left="54" width="87" height="20" font="2">introduce	</text>
<text top="202" left="141" width="62" height="14" font="5">struct</text>
<text top="198" left="203" width="91" height="20" font="2">	briefly	in	</text>
<text top="198" left="294" width="85" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">Chapter	2</a></text>
<text top="198" left="378" width="419" height="20" font="2">,	<i>Variables	and	Memory</i>.	Let’s	revise	that	simple</text>
<text top="224" left="54" width="79" height="20" font="2">example:</text>
<text top="267" left="54" width="135" height="14" font="5">struct	Player</text>
<text top="288" left="54" width="10" height="14" font="5">{</text>
<text top="308" left="54" width="145" height="14" font="5">		string	name;</text>
<text top="329" left="54" width="93" height="14" font="5">		int	hp;</text>
<text top="349" left="54" width="21" height="14" font="5">};</text>
<text top="380" left="54" width="419" height="20" font="2">This	is	the	structure	definition	for	what	makes	a	</text>
<text top="385" left="473" width="62" height="14" font="5">Player</text>
<text top="380" left="535" width="216" height="20" font="2">	object.	The	player	has	a	</text>
<text top="385" left="751" width="62" height="14" font="5">string</text>
<text top="406" left="54" width="61" height="20" font="2">for	his	</text>
<text top="411" left="115" width="41" height="14" font="5">name</text>
<text top="406" left="157" width="194" height="20" font="2">	and	an	integer	for	his	</text>
<text top="411" left="351" width="21" height="14" font="5">hp</text>
<text top="406" left="372" width="58" height="20" font="2">	value.</text>
<text top="443" left="54" width="177" height="20" font="2">If	you’ll	recall	from<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">	</a></text>
<text top="443" left="231" width="85" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">Chapter	2</a></text>
<text top="443" left="316" width="494" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">,</a>	<i>Variables	and	Memory</i>,	the	way	we	make	an	instance	of</text>
<text top="469" left="54" width="32" height="20" font="2">the	</text>
<text top="473" left="86" width="62" height="14" font="5">Player</text>
<text top="469" left="148" width="158" height="20" font="2">	object	is	like	this:</text>
<text top="512" left="54" width="580" height="14" font="5">Player	me;				//	create	an	instance	of	Player,	called	me</text>
<text top="544" left="54" width="367" height="20" font="2">From	here,	we	can	access	the	fields	of	the	</text>
<text top="548" left="421" width="21" height="14" font="5">me</text>
<text top="544" left="442" width="126" height="20" font="2">	object	like	so:</text>
<text top="587" left="54" width="166" height="14" font="5">me.name	=	&#34;Tom&#34;;</text>
<text top="607" left="54" width="124" height="14" font="5">me.hp	=	100;</text>
</page>
<page number="210" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="279" height="32" font="7"><b>Member	functions</b></text>
<text top="110" left="54" width="601" height="20" font="2">Now,	here’s	the	exciting	part.	We	can	attach	member	functions	to	the	</text>
<text top="115" left="655" width="62" height="14" font="5">struct</text>
<text top="110" left="717" width="89" height="20" font="2">	definition</text>
<text top="136" left="54" width="383" height="20" font="2">simply	by	writing	these	functions	inside	the	</text>
<text top="141" left="437" width="135" height="14" font="5">struct	Player</text>
<text top="136" left="572" width="95" height="20" font="2">	definition.</text>
<text top="180" left="54" width="135" height="14" font="5">struct	Player</text>
<text top="200" left="54" width="10" height="14" font="5">{</text>
<text top="221" left="54" width="145" height="14" font="5">		string	name;</text>
<text top="241" left="54" width="93" height="14" font="5">		int	hp;</text>
<text top="262" left="54" width="621" height="14" font="5">		//	A	member	function	that	reduces	player	hp	by	some	amount</text>
<text top="282" left="54" width="290" height="14" font="5">		void	damage(	int	amount	)	</text>
<text top="303" left="54" width="31" height="14" font="5">		{</text>
<text top="323" left="54" width="176" height="14" font="5">				hp	-=	amount;</text>
<text top="344" left="54" width="31" height="14" font="5">		}</text>
<text top="364" left="54" width="290" height="14" font="5">		void	recover(	int	amount	)</text>
<text top="385" left="54" width="31" height="14" font="5">		{</text>
<text top="405" left="54" width="176" height="14" font="5">				hp	+=	amount;</text>
<text top="426" left="54" width="10" height="14" font="5">}</text>
<text top="446" left="54" width="21" height="14" font="5">};</text>
<text top="478" left="54" width="574" height="20" font="2">A	member	function	is	just	a	C++	function	that	is	declared	inside	a	</text>
<text top="482" left="628" width="62" height="14" font="5">struct</text>
<text top="478" left="690" width="29" height="20" font="2">	or	</text>
<text top="482" left="719" width="52" height="14" font="5">class</text>
<text top="504" left="54" width="286" height="20" font="2">definition.	Isn’t	that	a	great	idea?</text>
<text top="540" left="54" width="719" height="20" font="2">There	is	a	bit	of	a	funny	idea	here,	so	I’ll	just	come	out	and	say	it.	The	variables	of	</text>
<text top="545" left="773" width="62" height="14" font="5">struct</text>
<text top="571" left="54" width="62" height="14" font="5">Player</text>
<text top="566" left="116" width="354" height="20" font="2">	are	accessible	to	all	the	functions	inside	</text>
<text top="571" left="470" width="135" height="14" font="5">struct	Player</text>
<text top="566" left="604" width="164" height="20" font="2">.	Inside	each	of	the</text>
<text top="592" left="54" width="185" height="20" font="2">member	functions	of	</text>
<text top="597" left="239" width="135" height="14" font="5">struct	Player</text>
<text top="592" left="374" width="243" height="20" font="2">,	we	can	actually	access	the	</text>
<text top="597" left="617" width="41" height="14" font="5">name</text>
<text top="592" left="658" width="42" height="20" font="2">	and	</text>
<text top="597" left="700" width="21" height="14" font="5">hp</text>
<text top="592" left="721" width="107" height="20" font="2">	variables	as</text>
<text top="618" left="54" width="461" height="20" font="2">if	they	were	local	to	the	function.	In	other	words,	the	</text>
<text top="622" left="515" width="41" height="14" font="5">name</text>
<text top="618" left="556" width="42" height="20" font="2">	and	</text>
<text top="622" left="598" width="21" height="14" font="5">hp</text>
<text top="618" left="619" width="112" height="20" font="2">	variables	of	</text>
<text top="622" left="731" width="62" height="14" font="5">struct</text>
<text top="648" left="54" width="62" height="14" font="5">Player</text>
<text top="644" left="116" width="420" height="20" font="2">	are	shared	between	all	the	member	functions	of	</text>
<text top="648" left="536" width="135" height="14" font="5">struct	Player</text>
<text top="644" left="671" width="5" height="20" font="2">.</text>
<text top="682" left="54" width="185" height="22" font="8"><b>The	this	keyword</b></text>
<text top="721" left="54" width="635" height="20" font="2">In	some	C++	code	(in	later	chapters),	you	will	see	more	references	to	the	</text>
<text top="725" left="689" width="41" height="14" font="5">this</text>
<text top="721" left="731" width="86" height="20" font="2">	keyword.</text>
<text top="747" left="54" width="39" height="20" font="2">The	</text>
<text top="751" left="93" width="41" height="14" font="5">this</text>
<text top="747" left="134" width="548" height="20" font="2">	keyword	is	a	pointer	that	refers	to	the	current	object.	Inside	the</text>
<text top="777" left="54" width="166" height="14" font="5">Player::damage()</text>
<text top="773" left="220" width="460" height="20" font="2">	function,	for	example,	we	can	write	our	reference	to	</text>
<text top="777" left="680" width="41" height="14" font="5">this</text>
<text top="773" left="721" width="93" height="20" font="2">	explicitly:</text>
<text top="816" left="54" width="259" height="14" font="5">void	damage(	int	amount	)</text>
<text top="836" left="54" width="10" height="14" font="5">{</text>
<text top="857" left="54" width="218" height="14" font="5">		this-&gt;hp	-=	amount;</text>
<text top="877" left="54" width="10" height="14" font="5">}</text>
<text top="909" left="54" width="39" height="20" font="2">The	</text>
<text top="913" left="93" width="41" height="14" font="5">this</text>
<text top="909" left="134" width="642" height="20" font="2">	keyword	only	makes	sense	inside	a	member	function.	We	could	explicitly</text>
<text top="935" left="54" width="207" height="20" font="2">include	use	of	keyword	</text>
<text top="939" left="261" width="41" height="14" font="5">this</text>
<text top="935" left="303" width="402" height="20" font="2">	inside	member	functions,	but	without	writing	</text>
<text top="939" left="705" width="41" height="14" font="5">this</text>
<text top="935" left="746" width="43" height="20" font="2">,	it	is</text>
<text top="961" left="54" width="322" height="20" font="2">implied	that	we	are	talking	about	the	</text>
<text top="965" left="376" width="21" height="14" font="5">hp</text>
<text top="961" left="397" width="185" height="20" font="2">	of	the	current	object.</text>
</page>
<page number="211" position="absolute" top="0" left="0" height="1262" width="892">
<image top="588" left="54" width="491" height="421" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-211_1.jpg"/>
<text top="61" left="54" width="300" height="32" font="7"><b>Strings	are	objects?</b></text>
<text top="110" left="54" width="769" height="20" font="2">Yes!	Every	time	you’ve	used	a	string	variable	in	the	past,	you	were	using	an	object.	Let’s</text>
<text top="136" left="54" width="385" height="20" font="2">try	out	some	of	the	member	functions	of	the	</text>
<text top="141" left="439" width="62" height="14" font="5">string</text>
<text top="136" left="502" width="53" height="20" font="2">	class.</text>
<text top="180" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="200" left="54" width="176" height="14" font="5">#include	&lt;string&gt;</text>
<text top="221" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="241" left="54" width="104" height="14" font="5">int	main()</text>
<text top="262" left="54" width="10" height="14" font="5">{</text>
<text top="282" left="54" width="363" height="14" font="5">		string	s	=	&#34;strings	are	objects&#34;;</text>
<text top="303" left="54" width="580" height="14" font="5">		s.append(	&#34;!!&#34;	);	//	add	on	&#34;!!&#34;	to	end	of	the	string!</text>
<text top="323" left="54" width="207" height="14" font="5">		cout	&lt;&lt;	s	&lt;&lt;	endl;</text>
<text top="344" left="54" width="10" height="14" font="5">}</text>
<text top="375" left="54" width="286" height="20" font="2">What	we’ve	done	here	is	use	the	</text>
<text top="379" left="340" width="83" height="14" font="5">append()</text>
<text top="375" left="423" width="326" height="20" font="2">	member	function	to	add	on	two	extra</text>
<text top="401" left="54" width="300" height="20" font="2">characters	to	the	end	of	the	string	(</text>
<text top="405" left="354" width="21" height="14" font="5">!!</text>
<text top="401" left="375" width="445" height="20" font="2">).	Member	functions	always	apply	to	the	object	that</text>
<text top="427" left="54" width="511" height="20" font="2">calls	the	member	function	(the	object	to	the	left	of	the	dot).</text>
<text top="465" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="504" left="54" width="727" height="20" font="2">To	see	the	listing	of	members	and	member	functions	available	on	an	object,	type	the</text>
<text top="529" left="54" width="447" height="20" font="2">object’s	variable	name	in	Visual	Studio,	then	a	dot	(</text>
<text top="534" left="501" width="10" height="14" font="5">.</text>
<text top="529" left="511" width="288" height="20" font="2">),	then	press	<i>Ctrl</i>	and	spacebar.	A</text>
<text top="555" left="54" width="239" height="20" font="2">member	listing	will	pop	up.</text>
<text top="1046" left="167" width="559" height="20" font="4"><i>Pressing	Ctrl	and	spacebar	will	make	the	member	listing	appear</i></text>
</page>
<page number="212" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="434" height="32" font="7"><b>Invoking	a	member	function</b></text>
<text top="110" left="54" width="528" height="20" font="2">Member	functions	can	be	invoked	with	the	following	syntax:</text>
<text top="154" left="54" width="290" height="14" font="5">objectName.memberFunction();</text>
<text top="185" left="54" width="780" height="20" font="2">The	object	invoking	the	member	function	is	on	the	left	of	the	dot.	The	member	function	to</text>
<text top="211" left="54" width="769" height="20" font="2">call	is	on	the	right	of	the	dot.	A	member	function	invocation	is	always	followed	by	round</text>
<text top="237" left="54" width="77" height="20" font="2">brackets	</text>
<text top="241" left="131" width="21" height="14" font="5">()</text>
<text top="237" left="152" width="457" height="20" font="2">,	even	when	no	arguments	are	passed	to	the	brackets.</text>
<text top="273" left="54" width="731" height="20" font="2">So,	in	the	part	of	the	program	where	the	monster	attacks,	we	can	reduce	the	player’s	</text>
<text top="278" left="785" width="21" height="14" font="5">hp</text>
<text top="299" left="54" width="115" height="20" font="2">value	like	so:</text>
<text top="343" left="54" width="487" height="14" font="5">player.damage(	15	);		//	player	takes	15	damage</text>
<text top="374" left="54" width="437" height="20" font="2">Which	isn’t	that	more	readable	than	the	following:</text>
<text top="417" left="54" width="487" height="14" font="5">player.hp	-=	15;						//	player	takes	15	damage</text>
<text top="450" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="488" left="54" width="755" height="20" font="2">When	member	functions	and	objects	are	used	effectively,	your	code	will	read	more	like</text>
<text top="514" left="54" width="588" height="20" font="2">prose	or	poetry	than	a	bunch	of	operator	symbols	slammed	together.</text>
<text top="551" left="54" width="784" height="20" font="2">Besides	beauty	and	readability,	what	is	the	point	of	writing	member	functions?	Outside	the</text>
<text top="581" left="54" width="62" height="14" font="5">Player</text>
<text top="577" left="116" width="651" height="20" font="2">	object,	we	can	now	do	more	with	a	single	line	of	code	than	just	reduce	the	</text>
<text top="581" left="767" width="21" height="14" font="5">hp</text>
<text top="603" left="54" width="103" height="20" font="2">member	by	</text>
<text top="607" left="157" width="21" height="14" font="5">15</text>
<text top="603" left="178" width="520" height="20" font="2">.	We	can	also	do	other	things	as	we’re	reducing	the	player’s	</text>
<text top="607" left="698" width="21" height="14" font="5">hp</text>
<text top="603" left="719" width="115" height="20" font="2">,	such	as	take</text>
<text top="629" left="54" width="753" height="20" font="2">into	account	the	player’s	armor,	check	whether	the	player	is	invulnerable,	or	have	other</text>
<text top="655" left="54" width="737" height="20" font="2">effects	occur	when	the	player	is	damaged.	What	happens	when	the	player	is	damaged</text>
<text top="681" left="54" width="291" height="20" font="2">should	be	abstracted	away	by	the	</text>
<text top="685" left="345" width="83" height="14" font="5">damage()</text>
<text top="681" left="428" width="83" height="20" font="2">	function.</text>
<text top="717" left="54" width="546" height="20" font="2">Now	think	if	the	player	had	an	armor	class.	Let’s	add	a	field	to	</text>
<text top="722" left="600" width="135" height="14" font="5">struct	Player</text>
<text top="717" left="735" width="88" height="20" font="2">	for	armor</text>
<text top="743" left="54" width="48" height="20" font="2">class:</text>
<text top="787" left="54" width="135" height="14" font="5">struct	Player</text>
<text top="807" left="54" width="10" height="14" font="5">{</text>
<text top="828" left="54" width="145" height="14" font="5">		string	name;</text>
<text top="848" left="54" width="93" height="14" font="5">		int	hp;</text>
<text top="869" left="54" width="176" height="14" font="5">		int	armorClass;</text>
<text top="889" left="54" width="21" height="14" font="5">};</text>
<text top="921" left="54" width="760" height="20" font="2">We’d	need	to	reduce	the	damage	received	by	the	player	by	the	armor	class	of	the	player.</text>
<text top="946" left="54" width="336" height="20" font="2">So	we’d	type	a	formula	now	to	reduce	</text>
<text top="951" left="390" width="21" height="14" font="5">hp</text>
<text top="946" left="410" width="394" height="20" font="2">.	We	can	do	it	the	non-object-oriented	way	by</text>
<text top="972" left="54" width="270" height="20" font="2">accessing	the	data	fields	of	the	</text>
<text top="977" left="324" width="62" height="14" font="5">player</text>
<text top="972" left="386" width="135" height="20" font="2">	object	directly:</text>
<text top="1016" left="54" width="487" height="14" font="5">player.hp	-=	15	–	player.armorClass;	//	non	OOP</text>
<text top="1047" left="54" width="714" height="20" font="2">Otherwise,	we	can	do	it	the	object-oriented	way	by	writing	a	member	function	that</text>
<text top="1073" left="54" width="288" height="20" font="2">changes	the	data	members	of	the	</text>
<text top="1077" left="342" width="62" height="14" font="5">player</text>
<text top="1073" left="404" width="249" height="20" font="2">	object	as	needed.	Inside	the	</text>
<text top="1077" left="653" width="62" height="14" font="5">Player</text>
<text top="1073" left="715" width="94" height="20" font="2">	object,	we</text>
<text top="1099" left="54" width="254" height="20" font="2">can	write	a	member	function	</text>
<text top="1103" left="308" width="83" height="14" font="5">damage()</text>
<text top="1099" left="390" width="6" height="20" font="2">:</text>
<text top="1142" left="54" width="135" height="14" font="5">struct	Player</text>
<text top="1163" left="54" width="10" height="14" font="5">{</text>
<text top="1183" left="54" width="145" height="14" font="5">		string	name;</text>
</page>
<page number="213" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="93" height="14" font="5">		int	hp;</text>
<text top="78" left="54" width="186" height="14" font="5">		int	armorClass;	</text>
<text top="99" left="54" width="300" height="14" font="5">void	damage(	int	dmgAmount	)	</text>
<text top="119" left="54" width="31" height="14" font="5">		{</text>
<text top="140" left="54" width="342" height="14" font="5">				hp	-=	dmgAmount	-	armorClass;</text>
<text top="160" left="54" width="31" height="14" font="5">		}</text>
<text top="181" left="54" width="21" height="14" font="5">};</text>
<text top="213" left="54" width="99" height="22" font="8"><b>Exercises</b></text>
<text top="252" left="69" width="342" height="20" font="2">1.	 There	is	a	subtle	bug	in	the	player’s	</text>
<text top="256" left="411" width="62" height="14" font="5">damage</text>
<text top="252" left="473" width="351" height="20" font="2">	function	in	the	preceding	code.	Can	you</text>
<text top="278" left="97" width="581" height="20" font="2">find	and	fix	it?	Hint:	What	happens	if	the	damage	dealt	is	less	than	</text>
<text top="282" left="679" width="104" height="14" font="5">armorClass</text>
<text top="278" left="782" width="55" height="20" font="2">	of	the</text>
<text top="304" left="97" width="64" height="20" font="2">player?</text>
<text top="330" left="69" width="729" height="20" font="2">2.	 Having	only	a	number	for	armor	class	doesn’t	give	enough	information	about	the</text>
<text top="356" left="97" width="588" height="20" font="2">armor!	What	is	the	armor’s	name?	What	does	it	look	like?	Devise	a	</text>
<text top="360" left="685" width="62" height="14" font="5">struct</text>
<text top="356" left="747" width="77" height="20" font="2">	function</text>
<text top="381" left="97" width="672" height="20" font="2">for	the	Player’s	armor	with	fields	for	name,	armor	class,	and	durability	rating.</text>
<text top="441" left="54" width="98" height="22" font="8"><b>Solutions</b></text>
<text top="480" left="54" width="188" height="20" font="2">The	solution	is	in	the	</text>
<text top="484" left="242" width="62" height="14" font="5">struct</text>
<text top="480" left="304" width="441" height="20" font="2">	player	code	listed	in	the	next	section,	<i>Privates	and</i></text>
<text top="506" left="54" width="127" height="20" font="4"><i>encapsulation</i>.</text>
<text top="542" left="54" width="321" height="20" font="2">How	about	using	the	following	code:</text>
<text top="586" left="54" width="124" height="14" font="5">struct	Armor</text>
<text top="606" left="54" width="10" height="14" font="5">{</text>
<text top="627" left="54" width="145" height="14" font="5">		string	name;</text>
<text top="647" left="54" width="176" height="14" font="5">		int	armorClass;</text>
<text top="668" left="54" width="207" height="14" font="5">		double	durability;</text>
<text top="688" left="54" width="21" height="14" font="5">};</text>
<text top="720" left="54" width="131" height="20" font="2">An	instance	of	</text>
<text top="724" left="185" width="52" height="14" font="5">Armor</text>
<text top="720" left="237" width="231" height="20" font="2">	will	then	be	placed	inside	</text>
<text top="724" left="468" width="135" height="14" font="5">struct	Player</text>
<text top="720" left="603" width="6" height="20" font="2">:</text>
<text top="763" left="54" width="135" height="14" font="5">struct	Player</text>
<text top="783" left="54" width="10" height="14" font="5">{</text>
<text top="804" left="54" width="145" height="14" font="5">		string	name;</text>
<text top="824" left="54" width="93" height="14" font="5">		int	hp;</text>
<text top="845" left="54" width="383" height="14" font="5">		Armor	armor;	//	Player	has-an	Armor</text>
<text top="866" left="54" width="21" height="14" font="5">};</text>
<text top="897" left="54" width="612" height="20" font="2">This	means	the	player	has	an	armor.	Keep	this	in	mind—we’ll	explore	</text>
<text top="901" left="666" width="52" height="14" font="5">has-a</text>
<text top="897" left="718" width="66" height="20" font="2">	versus	</text>
<text top="901" left="784" width="41" height="14" font="5">is-a</text>
<text top="923" left="54" width="158" height="20" font="2">relationships	later.</text>
</page>
<page number="214" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="410" height="32" font="7"><b>Privates	and	encapsulation</b></text>
<text top="110" left="54" width="760" height="20" font="2">So	now	we’ve	defined	a	couple	of	member	functions,	whose	purpose	it	is	to	modify	and</text>
<text top="136" left="54" width="296" height="20" font="2">maintain	the	data	members	of	our	</text>
<text top="141" left="350" width="62" height="14" font="5">Player</text>
<text top="136" left="412" width="405" height="20" font="2">	object,	but	some	people	have	come	up	with	an</text>
<text top="162" left="54" width="87" height="20" font="2">argument.</text>
<text top="199" left="54" width="239" height="20" font="2">The	argument	is	as	follows:</text>
<text top="236" left="97" width="699" height="20" font="2">An	object’s	data	members	should	only	ever	be	accessed	only	through	its	member</text>
<text top="262" left="97" width="214" height="20" font="2">functions,	never	directly.</text>
<text top="298" left="54" width="780" height="20" font="2">This	means	that	you	should	never	access	an	object’s	data	members	from	outside	the	object</text>
<text top="324" left="54" width="385" height="20" font="2">directly,	in	other	words,	modify	the	player’s	</text>
<text top="329" left="439" width="21" height="14" font="5">hp</text>
<text top="324" left="460" width="77" height="20" font="2">	directly:</text>
<text top="367" left="54" width="673" height="14" font="5">player.hp	-=	15	–	player.armorClass;	//	bad:	direct	member	access</text>
<text top="399" left="54" width="710" height="20" font="2">This	should	be	forbidden,	and	users	of	the	class	should	be	forced	to	use	the	proper</text>
<text top="425" left="54" width="559" height="20" font="2">member	functions	instead	to	change	the	values	of	data	members:</text>
<text top="468" left="54" width="218" height="14" font="5">player.damage(	15	);	</text>
<text top="468" left="303" width="383" height="14" font="5">//	right:	access	thru	member	function</text>
<text top="499" left="54" width="730" height="20" font="2">This	principle	is	called	<i>encapsulation</i>.	Encapsulation	is	the	concept	that	every	object</text>
<text top="525" left="54" width="728" height="20" font="2">should	be	interacted	via	its	member	functions	only.	Encapsulation	says	that	raw	data</text>
<text top="551" left="54" width="377" height="20" font="2">members	should	never	be	accessed	directly.</text>
<text top="588" left="54" width="330" height="20" font="2">The	reasons	behind	encapsulation	are:</text>
<text top="625" left="97" width="699" height="19" font="3"><b>To	make	the	class	self	contained</b>:	The	primary	idea	behind	encapsulation	is	that</text>
<text top="650" left="97" width="709" height="20" font="2">objects	work	best	when	they	are	programmed	such	that	they	manage	and	maintain</text>
<text top="676" left="97" width="738" height="20" font="2">their	own	internal	state	variables	without	a	need	for	code	outside	the	class	to	examine</text>
<text top="702" left="97" width="713" height="20" font="2">that	class’	private	data.	When	objects	are	coded	this	way,	it	makes	the	object	much</text>
<text top="728" left="97" width="707" height="20" font="2">easier	to	work	with,	that	is,	easier	to	read	and	maintain.	To	make	the	player	object</text>
<text top="754" left="97" width="297" height="20" font="2">jump,	you	should	just	have	to	call	</text>
<text top="759" left="395" width="135" height="14" font="5">player.jump()</text>
<text top="754" left="529" width="300" height="20" font="2">;	let	the	player	object	manage	state</text>
<text top="780" left="97" width="123" height="20" font="2">changes	to	its	</text>
<text top="784" left="220" width="83" height="14" font="5">y-height</text>
<text top="780" left="303" width="468" height="20" font="2">	position	(making	the	player	jump!).	When	an	object’s</text>
<text top="806" left="97" width="699" height="20" font="2">internal	members	are	not	exposed,	interacting	with	that	object	is	much	easier	and</text>
<text top="832" left="97" width="728" height="20" font="2">more	efficient.	Interact	only	with	an	object’s	public	member	functions;	let	the	object</text>
<text top="858" left="97" width="481" height="20" font="2">manage	its	internal	state	(we	will	explain	the	keywords	</text>
<text top="862" left="578" width="73" height="14" font="5">private</text>
<text top="858" left="651" width="42" height="20" font="2">	and	</text>
<text top="862" left="693" width="62" height="14" font="5">public</text>
<text top="858" left="755" width="37" height="20" font="2">	in	a</text>
<text top="884" left="97" width="83" height="20" font="2">moment).</text>
<text top="910" left="97" width="691" height="19" font="3"><b>To	avoid	breaking	code</b>:	When	code	outside	of	a	class	interacts	with	that	class’</text>
<text top="936" left="97" width="716" height="20" font="2">public	member	functions	only	(the	class’	public	interface),	then	an	object’s	internal</text>
<text top="962" left="97" width="711" height="20" font="2">state	management	is	free	to	change,	without	breaking	any	of	the	calling	code.	This</text>
<text top="988" left="97" width="712" height="20" font="2">way,	if	an	object’s	internal	data	members	change	for	any	reason,	all	code	using	the</text>
<text top="1013" left="97" width="649" height="20" font="2">object	still	remains	valid	as	long	as	the	member	functions	remain	the	same.</text>
<text top="1050" left="54" width="755" height="20" font="2">So	how	can	we	prevent	the	programmer	from	doing	the	wrong	thing	and	accessing	data</text>
<text top="1076" left="54" width="778" height="20" font="2">members	directly?	C++	introduces	the	concept	of	<i>access	modifiers</i>	to	prevent	access	of	an</text>
<text top="1102" left="54" width="185" height="20" font="2">object’s	internal	data.</text>
<text top="1139" left="54" width="667" height="20" font="2">Here	is	how	we’d	use	access	modifiers	to	forbid	access	to	certain	sections	of	</text>
<text top="1143" left="721" width="62" height="14" font="5">struct</text>
<text top="1169" left="54" width="62" height="14" font="5">Player</text>
<text top="1165" left="116" width="144" height="20" font="2">	from	outside	of	</text>
<text top="1169" left="260" width="135" height="14" font="5">struct	Player</text>
<text top="1165" left="395" width="5" height="20" font="2">.</text>
</page>
<page number="215" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="481" height="20" font="2">The	first	thing	you’d	do	is	decide	which	sections	of	the	</text>
<text top="62" left="535" width="62" height="14" font="5">struct</text>
<text top="57" left="598" width="222" height="20" font="2">	definition	you	want	to	be</text>
<text top="83" left="54" width="530" height="20" font="2">accessible	outside	of	the	class.	These	section	will	be	labelled	</text>
<text top="88" left="584" width="62" height="14" font="5">public</text>
<text top="83" left="647" width="157" height="20" font="2">.	All	other	regions</text>
<text top="109" left="54" width="319" height="20" font="2">that	will	not	be	accessible	outside	of	</text>
<text top="114" left="373" width="62" height="14" font="5">struct</text>
<text top="109" left="436" width="144" height="20" font="2">	will	be	labelled	</text>
<text top="114" left="579" width="73" height="14" font="5">private</text>
<text top="109" left="652" width="105" height="20" font="2">,	as	follows:</text>
<text top="153" left="54" width="135" height="14" font="5">struct	Player</text>
<text top="173" left="54" width="10" height="14" font="5">{</text>
<text top="194" left="54" width="653" height="14" font="5">private:								//	begins	private	section..	cannot	be	accessed	</text>
<text top="214" left="54" width="435" height="14" font="5">																//	outside	the	class	until</text>
<text top="235" left="54" width="145" height="14" font="5">		string	name;</text>
<text top="255" left="54" width="104" height="14" font="5">		int	hp;	</text>
<text top="276" left="54" width="176" height="14" font="5">		int	armorClass;</text>
<text top="296" left="54" width="642" height="14" font="5">public:									//		until	HERE.	This	begins	the	public	section</text>
<text top="317" left="54" width="601" height="14" font="5">		//	This	member	function	is	accessible	outside	the	struct</text>
<text top="337" left="54" width="497" height="14" font="5">		//	because	it	is	in	the	section	marked	public:</text>
<text top="358" left="54" width="280" height="14" font="5">		void	damage(	int	amount	)</text>
<text top="378" left="54" width="31" height="14" font="5">		{</text>
<text top="399" left="54" width="414" height="14" font="5">				int	reduction	=	amount	–	armorClass;</text>
<text top="419" left="54" width="518" height="14" font="5">				if(	reduction	&lt;	0	)	//	make	sure	non-negative!</text>
<text top="440" left="54" width="207" height="14" font="5">						reduction	=	0;</text>
<text top="460" left="54" width="207" height="14" font="5">				hp	-=	reduction;</text>
<text top="481" left="54" width="31" height="14" font="5">		}</text>
<text top="501" left="54" width="21" height="14" font="5">};</text>
</page>
<page number="216" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="390" height="32" font="7"><b>Some	people	like	it	public</b></text>
<text top="110" left="54" width="292" height="20" font="2">Some	people	do	unabashedly	use	</text>
<text top="115" left="346" width="62" height="14" font="5">public</text>
<text top="110" left="408" width="373" height="20" font="2">	data	members	and	do	not	encapsulate	their</text>
<text top="136" left="54" width="691" height="20" font="2">objects.	This	is	a	matter	of	preference,	though	considered	as	bad	object-oriented</text>
<text top="162" left="54" width="197" height="20" font="2">programming	practice.</text>
<text top="199" left="54" width="283" height="20" font="2">However,	classes	in	UE4	do	use	</text>
<text top="203" left="337" width="62" height="14" font="5">public</text>
<text top="199" left="399" width="440" height="20" font="2">	members	sometimes.	It’s	a	judgment	call;	whether</text>
<text top="225" left="54" width="221" height="20" font="2">a	data	member	should	be	</text>
<text top="229" left="275" width="62" height="14" font="5">public</text>
<text top="225" left="337" width="29" height="20" font="2">	or	</text>
<text top="229" left="366" width="73" height="14" font="5">private</text>
<text top="225" left="439" width="272" height="20" font="2">	is	really	up	to	the	programmer.</text>
<text top="262" left="54" width="778" height="20" font="2">With	experience,	you	will	find	that	sometimes	you	get	into	a	situation	that	requires	quite	a</text>
<text top="288" left="54" width="426" height="20" font="2">bit	of	refactoring	when	you	make	a	data	member	</text>
<text top="292" left="480" width="62" height="14" font="5">public</text>
<text top="288" left="542" width="198" height="20" font="2">	that	should	have	been	</text>
<text top="292" left="741" width="73" height="14" font="5">private</text>
<text top="288" left="813" width="5" height="20" font="2">.</text>
</page>
<page number="217" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="218" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="333" height="39" font="0"><b>class	versus	struct</b></text>
<text top="120" left="54" width="604" height="20" font="2">You	might	have	seen	a	different	way	of	declaring	an	object,	using	the	</text>
<text top="124" left="658" width="52" height="14" font="5">class</text>
<text top="120" left="710" width="86" height="20" font="2">	keyword,</text>
<text top="146" left="54" width="90" height="20" font="2">instead	of	</text>
<text top="150" left="144" width="62" height="14" font="5">struct</text>
<text top="146" left="206" width="286" height="20" font="2">,	as	shown	in	the	following	code:</text>
<text top="189" left="54" width="549" height="14" font="5">class	Player	//	we	used	class	here	instead	of	struct!</text>
<text top="210" left="54" width="10" height="14" font="5">{</text>
<text top="230" left="54" width="145" height="14" font="5">		string	name;</text>
<text top="251" left="54" width="41" height="14" font="5">		//</text>
<text top="271" left="54" width="21" height="14" font="5">};</text>
<text top="303" left="54" width="39" height="20" font="2">The	</text>
<text top="307" left="93" width="52" height="14" font="5">class</text>
<text top="303" left="145" width="42" height="20" font="2">	and	</text>
<text top="307" left="187" width="62" height="14" font="5">struct</text>
<text top="303" left="249" width="584" height="20" font="2">	keywords	in	C++	are	almost	identical.	There	is	only	one	difference</text>
<text top="329" left="54" width="77" height="20" font="2">between	</text>
<text top="333" left="131" width="52" height="14" font="5">class</text>
<text top="329" left="183" width="42" height="20" font="2">	and	</text>
<text top="333" left="225" width="62" height="14" font="5">struct</text>
<text top="329" left="287" width="352" height="20" font="2">,	and	it	is	that	the	data	members	inside	a	</text>
<text top="333" left="639" width="62" height="14" font="5">struct</text>
<text top="329" left="701" width="120" height="20" font="2">	keyword	will</text>
<text top="354" left="54" width="104" height="20" font="2">be	declared	</text>
<text top="359" left="158" width="62" height="14" font="5">public</text>
<text top="354" left="220" width="194" height="20" font="2">	by	default,	while	in	a	</text>
<text top="359" left="414" width="52" height="14" font="5">class</text>
<text top="354" left="466" width="327" height="20" font="2">	keyword	the	data	members	inside	the</text>
<text top="380" left="54" width="191" height="20" font="2">class	will	be	declared	</text>
<text top="385" left="245" width="73" height="14" font="5">private</text>
<text top="380" left="317" width="445" height="20" font="2">	by	default.	(This	is	why	I	introduced	objects	using	</text>
<text top="385" left="763" width="62" height="14" font="5">struct</text>
<text top="380" left="825" width="6" height="20" font="2">;</text>
<text top="406" left="54" width="172" height="20" font="2">I	didn’t	want	to	put	</text>
<text top="411" left="226" width="62" height="14" font="5">public</text>
<text top="406" left="288" width="274" height="20" font="2">	inexplicably	as	the	first	line	of	</text>
<text top="411" left="562" width="52" height="14" font="5">class</text>
<text top="406" left="614" width="13" height="20" font="2">.)</text>
<text top="443" left="54" width="98" height="20" font="2">In	general,	</text>
<text top="447" left="152" width="62" height="14" font="5">struct</text>
<text top="443" left="214" width="597" height="20" font="2">	is	preferred	for	simple	types	that	don’t	use	encapsulation,	don’t	have</text>
<text top="469" left="54" width="731" height="20" font="2">many	member	functions,	and	must	be	backward	compatible	with	C.	Classes	are	used</text>
<text top="495" left="54" width="208" height="20" font="2">almost	everywhere	else.</text>
<text top="532" left="54" width="234" height="20" font="2">From	now	on,	let’s	use	the	</text>
<text top="536" left="288" width="52" height="14" font="5">class</text>
<text top="532" left="340" width="176" height="20" font="2">	keyword	instead	of	</text>
<text top="536" left="516" width="62" height="14" font="5">struct</text>
<text top="532" left="579" width="5" height="20" font="2">.</text>
</page>
<page number="219" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="220" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="13" size="15" family="Times" color="#000000"/>
<text top="64" left="54" width="348" height="39" font="0"><b>Getters	and	setters</b></text>
<text top="120" left="54" width="366" height="20" font="2">You	might	have	noticed	that	once	we	slap	</text>
<text top="124" left="420" width="73" height="14" font="5">private</text>
<text top="120" left="492" width="81" height="20" font="2">	onto	the	</text>
<text top="124" left="573" width="62" height="14" font="5">Player</text>
<text top="120" left="635" width="173" height="20" font="2">	class	definition,	we</text>
<text top="146" left="54" width="584" height="20" font="2">can	no	longer	read	or	write	the	name	of	the	player	from	outside	the	</text>
<text top="150" left="638" width="62" height="14" font="5">Player</text>
<text top="146" left="700" width="53" height="20" font="2">	class.</text>
<text top="183" left="54" width="454" height="20" font="2">If	we	try	and	read	the	name	with	the	following	code:</text>
<text top="226" left="54" width="104" height="14" font="5">Player	me;</text>
<text top="247" left="54" width="249" height="14" font="5">cout	&lt;&lt;	me.name	&lt;&lt;	endl;</text>
<text top="278" left="54" width="284" height="20" font="2">Or	write	to	the	name,	as	follows:</text>
<text top="321" left="54" width="207" height="14" font="5">me.name	=	&#34;William&#34;;</text>
<text top="352" left="54" width="89" height="20" font="2">Using	the	</text>
<text top="357" left="143" width="135" height="14" font="5">struct	Player</text>
<text top="352" left="277" width="138" height="20" font="2">	definition	with	</text>
<text top="357" left="416" width="73" height="14" font="5">private</text>
<text top="352" left="488" width="312" height="20" font="2">	members,	we	will	get	the	following</text>
<text top="378" left="54" width="48" height="20" font="2">error:</text>
<text top="421" left="54" width="766" height="15" font="13"><b>main.cpp(24)	:	error	C2248:	'Player::name'	:	cannot	access	private	member	</b></text>
<text top="442" left="54" width="269" height="15" font="13"><b>declared	in	class	'Player'</b></text>
<text top="473" left="54" width="445" height="20" font="2">This	is	just	what	we	asked	for	when	we	labeled	the	</text>
<text top="478" left="499" width="41" height="14" font="5">name</text>
<text top="473" left="541" width="50" height="20" font="2">	field	</text>
<text top="478" left="591" width="73" height="14" font="5">private</text>
<text top="473" left="664" width="109" height="20" font="2">.	We	made	it</text>
<text top="499" left="54" width="310" height="20" font="2">completely	inaccessible	outside	the	</text>
<text top="504" left="364" width="62" height="14" font="5">Player</text>
<text top="499" left="427" width="53" height="20" font="2">	class.</text>
</page>
<page number="221" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="113" height="32" font="7"><b>Getters</b></text>
<text top="110" left="54" width="766" height="20" font="2">A	getter	(also	known	as	an	accessor	function)	is	used	to	pass	back	copies	of	internal	data</text>
<text top="136" left="54" width="590" height="20" font="2">members	to	the	caller.	To	read	the	player’s	name,	we’d	deck	out	the	</text>
<text top="141" left="644" width="62" height="14" font="5">Player</text>
<text top="136" left="706" width="106" height="20" font="2">	class	with	a</text>
<text top="162" left="54" width="475" height="20" font="2">member	function	specifically	to	retrieve	a	copy	of	that	</text>
<text top="167" left="529" width="73" height="14" font="5">private</text>
<text top="162" left="602" width="123" height="20" font="2">	data	member:</text>
<text top="205" left="54" width="124" height="14" font="5">class	Player</text>
<text top="226" left="54" width="10" height="14" font="5">{</text>
<text top="247" left="54" width="83" height="14" font="5">private:</text>
<text top="267" left="54" width="528" height="14" font="5">		string	name;		//	inaccessible	outside	this	class!</text>
<text top="288" left="54" width="445" height="14" font="5">																//		rest	of	class	as	before</text>
<text top="308" left="54" width="73" height="14" font="5">public:</text>
<text top="329" left="54" width="632" height="14" font="5">		//	A	getter	function	retrieves	a	copy	of	a	variable	for	you</text>
<text top="349" left="54" width="186" height="14" font="5">		string	getName()</text>
<text top="370" left="54" width="10" height="14" font="5">{</text>
<text top="390" left="54" width="145" height="14" font="5">		return	name;</text>
<text top="411" left="54" width="10" height="14" font="5">}</text>
<text top="431" left="54" width="21" height="14" font="5">};</text>
<text top="463" left="54" width="758" height="20" font="2">So	now	it	is	possible	to	read	the	player’s	name	information.	We	can	do	this	by	using	the</text>
<text top="488" left="54" width="224" height="20" font="2">following	code	statement:</text>
<text top="532" left="54" width="342" height="14" font="5">cout	&lt;&lt;	player.getName()	&lt;&lt;	endl;</text>
<text top="563" left="54" width="238" height="20" font="2">Getters	are	used	to	retrieve	</text>
<text top="567" left="292" width="73" height="14" font="5">private</text>
<text top="563" left="364" width="466" height="20" font="2">	members	that	would	otherwise	be	inaccessible	to	you</text>
<text top="589" left="54" width="194" height="20" font="2">from	outside	the	class.</text>
<text top="627" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="666" left="54" width="281" height="19" font="3"><b>Real	world	tip–Keyword	const</b></text>
<text top="702" left="54" width="267" height="20" font="2">Inside	a	class,	you	can	add	the	</text>
<text top="707" left="321" width="52" height="14" font="5">const</text>
<text top="702" left="373" width="462" height="20" font="2">	keyword	to	a	member	function	declaration.	What	the</text>
<text top="733" left="54" width="52" height="14" font="5">const</text>
<text top="728" left="106" width="703" height="20" font="2">	keyword	does	is	promises	to	the	compiler	that	the	internal	state	of	the	object	will</text>
<text top="754" left="54" width="529" height="20" font="2">not	change	as	a	result	of	running	this	function.	Attaching	the	</text>
<text top="759" left="583" width="52" height="14" font="5">const</text>
<text top="754" left="635" width="164" height="20" font="2">	keyword	will	look</text>
<text top="780" left="54" width="170" height="20" font="2">something	like	this:</text>
<text top="823" left="54" width="228" height="14" font="5">string	getName()	const</text>
<text top="844" left="54" width="10" height="14" font="5">{</text>
<text top="864" left="54" width="145" height="14" font="5">		return	name;</text>
<text top="885" left="54" width="10" height="14" font="5">}</text>
<text top="916" left="54" width="742" height="20" font="2">No	assignments	to	data	members	can	happen	inside	a	member	function	that	is	marked</text>
<text top="947" left="54" width="52" height="14" font="5">const</text>
<text top="942" left="106" width="725" height="20" font="2">.	As	the	internal	state	of	the	object	is	guaranteed	not	to	change	as	a	result	of	running</text>
<text top="968" left="54" width="15" height="20" font="2">a	</text>
<text top="972" left="69" width="52" height="14" font="5">const</text>
<text top="968" left="121" width="668" height="20" font="2">	function,	the	compiler	can	make	some	optimizations	around	function	calls	to</text>
<text top="998" left="54" width="52" height="14" font="5">const</text>
<text top="994" left="106" width="167" height="20" font="2">	member	functions.</text>
</page>
<page number="222" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="105" height="32" font="7"><b>Setters</b></text>
<text top="110" left="54" width="742" height="20" font="2">A	setter	(also	known	as	a	modifier	function	or	mutator	function)	is	a	member	function</text>
<text top="136" left="54" width="783" height="20" font="2">whose	sole	purpose	is	to	change	the	value	of	an	internal	variable	inside	the	class,	as	shown</text>
<text top="162" left="54" width="190" height="20" font="2">in	the	following	code:</text>
<text top="205" left="54" width="124" height="14" font="5">class	Player</text>
<text top="226" left="54" width="10" height="14" font="5">{</text>
<text top="247" left="54" width="83" height="14" font="5">private:</text>
<text top="267" left="54" width="528" height="14" font="5">		string	name;		//	inaccessible	outside	this	class!</text>
<text top="288" left="54" width="445" height="14" font="5">																//		rest	of	class	as	before</text>
<text top="308" left="54" width="73" height="14" font="5">public:</text>
<text top="329" left="54" width="632" height="14" font="5">		//	A	getter	function	retrieves	a	copy	of	a	variable	for	you</text>
<text top="349" left="54" width="186" height="14" font="5">		string	getName()</text>
<text top="370" left="54" width="10" height="14" font="5">{</text>
<text top="390" left="54" width="145" height="14" font="5">		return	name;</text>
<text top="411" left="54" width="10" height="14" font="5">}</text>
<text top="431" left="54" width="311" height="14" font="5">void	setName(	string	newName	)</text>
<text top="452" left="54" width="10" height="14" font="5">{</text>
<text top="472" left="54" width="176" height="14" font="5">		name	=	newName;</text>
<text top="493" left="54" width="10" height="14" font="5">}</text>
<text top="513" left="54" width="21" height="14" font="5">};</text>
<text top="545" left="54" width="230" height="20" font="2">So	we	can	still	change	the	</text>
<text top="549" left="284" width="73" height="14" font="5">private</text>
<text top="545" left="357" width="121" height="20" font="2">	function	of	a	</text>
<text top="549" left="478" width="52" height="14" font="5">class</text>
<text top="545" left="530" width="152" height="20" font="2">	from	outside	the	</text>
<text top="549" left="682" width="52" height="14" font="5">class</text>
<text top="545" left="734" width="83" height="20" font="2">	function,</text>
<text top="571" left="54" width="394" height="20" font="2">but	only	if	we	do	so	through	a	setter	function.</text>
</page>
<page number="223" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="640" height="32" font="7"><b>But	what’s	the	point	of	get/set	OPS?</b></text>
<text top="110" left="54" width="756" height="20" font="2">So	the	first	question	that	crosses	a	newbie	programmer’s	mind	when	he	first	encounters</text>
<text top="136" left="54" width="184" height="20" font="2">get/set	OPS	on	</text>
<text top="141" left="238" width="73" height="14" font="5">private</text>
<text top="136" left="311" width="512" height="20" font="2">	members	is,	isn’t	get/set	self-defeating?	I	mean,	what’s	the</text>
<text top="162" left="54" width="750" height="20" font="2">point	in	hiding	access	to	data	members	when	we’re	just	going	to	expose	that	same	data</text>
<text top="188" left="54" width="753" height="20" font="2">again	in	another	way?	It’s	like	saying,	“You	can’t	have	any	chocolates	because	they	are</text>
<text top="214" left="54" width="261" height="20" font="2">private,	unless	you	say	please	</text>
<text top="218" left="315" width="197" height="14" font="5">getMeTheChocolate()</text>
<text top="214" left="512" width="323" height="20" font="2">.	Then,	you	can	have	the	chocolates.”</text>
<text top="251" left="54" width="721" height="20" font="2">Some	expert	programmers	even	shorten	the	get/set	functions	to	one	liners,	like	this:</text>
<text top="294" left="54" width="331" height="14" font="5">string	getName(){	return	name;	}</text>
<text top="315" left="54" width="508" height="14" font="5">void	setName(	string	newName	){	name	=	newName;	}</text>
<text top="346" left="54" width="775" height="20" font="2">Let’s	answer	the	question.	Doesn’t	a	get/set	pair	break	encapsulation	by	exposing	the	data</text>
<text top="372" left="54" width="105" height="20" font="2">completely?</text>
<text top="408" left="54" width="782" height="20" font="2">The	answer	is	twofold.	First,	get	member	functions	typically	only	return	a	copy	of	the	data</text>
<text top="434" left="54" width="715" height="20" font="2">member	being	accessed.	This	means	that	the	original	data	member’s	value	remains</text>
<text top="460" left="54" width="361" height="20" font="2">protected	and	is	not	modifiable	through	a	</text>
<text top="465" left="415" width="52" height="14" font="5">get()</text>
<text top="460" left="467" width="92" height="20" font="2">	operation.</text>
<text top="501" left="54" width="52" height="14" font="5">Set()</text>
<text top="497" left="106" width="723" height="20" font="2">	(mutator	method)	OPS	are	a	little	bit	counterintuitive	though.	If	the	setter	is	a</text>
<text top="527" left="54" width="83" height="14" font="5">passthru</text>
<text top="523" left="137" width="166" height="20" font="2">	operation,	such	as	</text>
<text top="527" left="303" width="497" height="14" font="5">void	setName(	string	newName	)	{	name=newName;	}</text>
<text top="523" left="800" width="5" height="20" font="2">,</text>
<text top="549" left="54" width="738" height="20" font="2">then	having	the	setter	might	seem	pointless.	What	is	the	advantage	of	using	a	mutator</text>
<text top="575" left="54" width="448" height="20" font="2">method	instead	of	overwriting	the	variable	directly?</text>
<text top="612" left="54" width="778" height="20" font="2">The	argument	for	using	mutator	methods	is	to	write	additional	code	before	the	assignment</text>
<text top="638" left="54" width="760" height="20" font="2">of	a	variable	to	guard	the	variable	from	taking	on	incorrect	values.	Say,	for	example,	we</text>
<text top="663" left="54" width="176" height="20" font="2">have	a	setter	for	the	</text>
<text top="668" left="230" width="21" height="14" font="5">hp</text>
<text top="663" left="250" width="343" height="20" font="2">	data	member,	which	will	look	like	this:</text>
<text top="707" left="54" width="238" height="14" font="5">void	setHp(	int	newHp	)</text>
<text top="727" left="54" width="10" height="14" font="5">{</text>
<text top="748" left="54" width="590" height="14" font="5">		//	guard	the	hp	variable	from	taking	on	negative	values</text>
<text top="768" left="54" width="176" height="14" font="5">		if(	newHp	&lt;	0	)</text>
<text top="789" left="54" width="31" height="14" font="5">		{</text>
<text top="809" left="54" width="632" height="14" font="5">				cout	&lt;&lt;	&#34;Error,	player	hp	cannot	be	less	than	0&#34;	&lt;&lt;	endl;</text>
<text top="830" left="54" width="145" height="14" font="5">				newHp	=	0;</text>
<text top="850" left="54" width="31" height="14" font="5">		}</text>
<text top="871" left="54" width="135" height="14" font="5">		hp	=	newHp;</text>
<text top="891" left="54" width="10" height="14" font="5">}</text>
<text top="923" left="54" width="483" height="20" font="2">The	mutator	method	is	supposed	to	prevent	the	internal	</text>
<text top="927" left="537" width="21" height="14" font="5">hp</text>
<text top="923" left="557" width="251" height="20" font="2">	data	member	from	taking	on</text>
<text top="949" left="54" width="709" height="20" font="2">negative	values.	You	might	consider	mutator	methods	a	bit	retroactive.	Should	the</text>
<text top="975" left="54" width="722" height="20" font="2">responsibility	lie	with	the	calling	code	to	check	the	value	it	is	setting	before	calling	</text>
<text top="979" left="776" width="62" height="14" font="5">setHp(</text>
<text top="1005" left="54" width="41" height="14" font="5">-2	)</text>
<text top="1000" left="95" width="630" height="20" font="2">,	and	not	let	that	only	get	caught	in	the	mutator	method?	Can’t	you	use	a	</text>
<text top="1005" left="725" width="62" height="14" font="5">public</text>
<text top="1026" left="54" width="755" height="20" font="2">member	variable	and	put	the	responsibility	for	making	sure	the	variable	doesn’t	take	on</text>
<text top="1052" left="54" width="577" height="20" font="2">invalid	values	in	the	calling	code,	instead	of	in	the	setter?	You	can.</text>
<text top="1089" left="54" width="748" height="20" font="2">However,	this	is	the	core	of	the	reason	behind	using	mutator	methods.	The	idea	behind</text>
<text top="1115" left="54" width="669" height="20" font="2">mutator	methods	is	so	that	the	calling	code	can	pass	any	value	it	wants	to	the	</text>
<text top="1119" left="723" width="52" height="14" font="5">setHp</text>
<text top="1141" left="54" width="199" height="20" font="2">function	(for	example,	</text>
<text top="1145" left="253" width="114" height="14" font="5">setHp(	-2	)</text>
<text top="1141" left="367" width="423" height="20" font="2">),	without	having	to	worry	whether	the	value	it	is</text>
<text top="1167" left="54" width="370" height="20" font="2">passing	to	the	function	is	valid	or	not.	The	</text>
<text top="1171" left="424" width="52" height="14" font="5">setHp</text>
<text top="1167" left="476" width="348" height="20" font="2">	function	then	takes	the	responsibility	of</text>
</page>
<page number="224" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="332" height="20" font="2">ensuring	that	the	value	is	valid	for	the	</text>
<text top="62" left="386" width="21" height="14" font="5">hp</text>
<text top="57" left="407" width="80" height="20" font="2">	variable.</text>
<text top="94" left="54" width="535" height="20" font="2">Some	programmers	consider	direct	mutator	functions	such	as	</text>
<text top="99" left="589" width="73" height="14" font="5">getHp()</text>
<text top="94" left="661" width="6" height="20" font="2">/</text>
<text top="99" left="667" width="73" height="14" font="5">setHp()</text>
<text top="94" left="740" width="61" height="20" font="2">	a	code</text>
<text top="120" left="54" width="747" height="20" font="2">smell.	A	code	smell	is	in	general	a	bad	programming	practice	that	people	don’t	overtly</text>
<text top="146" left="54" width="749" height="20" font="2">take	notice	of,	except	for	a	niggling	feeling	that	something	is	being	done	suboptimally.</text>
<text top="172" left="54" width="745" height="20" font="2">They	argue	that	higher-level	member	functions	can	be	written	instead	of	mutators.	For</text>
<text top="198" left="54" width="189" height="20" font="2">example,	instead	of	a	</text>
<text top="202" left="243" width="73" height="14" font="5">setHp()</text>
<text top="198" left="315" width="304" height="20" font="2">	member	function,	we	should	have	</text>
<text top="202" left="619" width="62" height="14" font="5">public</text>
<text top="198" left="681" width="76" height="20" font="2">	member</text>
<text top="224" left="54" width="154" height="20" font="2">functions	such	as	</text>
<text top="228" left="208" width="62" height="14" font="5">heal()</text>
<text top="224" left="270" width="42" height="20" font="2">	and	</text>
<text top="228" left="312" width="83" height="14" font="5">damage()</text>
<text top="224" left="395" width="399" height="20" font="2">	instead.	An	article	on	this	topic	is	available	at</text>
<text top="250" left="54" width="357" height="20" font="1"><a href="http://c2.com/cgi/wiki?AccessorsAreEvil">http://c2.com/cgi/wiki?AccessorsAreEvil</a></text>
<text top="250" left="411" width="5" height="20" font="2"><a href="http://c2.com/cgi/wiki?AccessorsAreEvil">.</a></text>
</page>
<page number="225" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="226" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="542" height="39" font="0"><b>Constructors	and	destructors</b></text>
<text top="120" left="54" width="768" height="20" font="2">The	constructor	in	your	C++	code	is	a	simple	little	function	that	runs	once	when	the	C++</text>
<text top="146" left="54" width="774" height="20" font="2">object	is	first	created.	The	destructor	runs	once	when	the	C++	object	is	destroyed.	Say	we</text>
<text top="172" left="54" width="246" height="20" font="2">have	the	following	program:</text>
<text top="215" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="236" left="54" width="176" height="14" font="5">#include	&lt;string&gt;</text>
<text top="256" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="277" left="54" width="124" height="14" font="5">class	Player</text>
<text top="297" left="54" width="10" height="14" font="5">{</text>
<text top="318" left="54" width="83" height="14" font="5">private:</text>
<text top="338" left="54" width="528" height="14" font="5">		string	name;		//	inaccessible	outside	this	class!</text>
<text top="359" left="54" width="73" height="14" font="5">public:</text>
<text top="379" left="54" width="352" height="14" font="5">		string	getName(){	return	name;	}</text>
<text top="400" left="54" width="197" height="14" font="5">//	The	constructor!</text>
<text top="420" left="54" width="104" height="14" font="5">		Player()</text>
<text top="441" left="54" width="31" height="14" font="5">		{</text>
<text top="461" left="54" width="497" height="14" font="5">				cout	&lt;&lt;	&#34;Player	object	constructed&#34;	&lt;&lt;	endl;</text>
<text top="482" left="54" width="197" height="14" font="5">				name	=	&#34;Diplo&#34;;</text>
<text top="503" left="54" width="31" height="14" font="5">		}</text>
<text top="523" left="54" width="363" height="14" font="5">		//	~Destructor	(~	is	not	a	typo!)</text>
<text top="544" left="54" width="114" height="14" font="5">		~Player()</text>
<text top="564" left="54" width="31" height="14" font="5">		{</text>
<text top="585" left="54" width="476" height="14" font="5">				cout	&lt;&lt;	&#34;Player	object	destroyed&#34;	&lt;&lt;	endl;</text>
<text top="605" left="54" width="31" height="14" font="5">		}</text>
<text top="626" left="54" width="21" height="14" font="5">};</text>
<text top="667" left="54" width="104" height="14" font="5">int	main()</text>
<text top="687" left="54" width="31" height="14" font="5">		{</text>
<text top="708" left="54" width="186" height="14" font="5">				Player	player;</text>
<text top="728" left="54" width="663" height="14" font="5">				cout	&lt;&lt;	&#34;Player	named	'&#34;	&lt;&lt;	player.getName()	&lt;&lt;	&#34;'&#34;	&lt;&lt;	endl;</text>
<text top="749" left="54" width="31" height="14" font="5">		}</text>
<text top="769" left="54" width="342" height="14" font="5">		//	player	object	destroyed	here</text>
<text top="801" left="54" width="230" height="20" font="2">So	here	we	have	created	a	</text>
<text top="805" left="284" width="62" height="14" font="5">Player</text>
<text top="801" left="346" width="433" height="20" font="2">	object.	The	output	of	this	code	will	be	as	follows:</text>
<text top="844" left="54" width="259" height="14" font="5">Player	object	constructed</text>
<text top="864" left="54" width="207" height="14" font="5">Player	named	'Diplo'</text>
<text top="885" left="54" width="238" height="14" font="5">Player	object	destroyed</text>
<text top="916" left="54" width="783" height="20" font="2">The	first	thing	that	happens	during	object	construction	is	that	the	constructor	actually	runs.</text>
<text top="942" left="54" width="168" height="20" font="2">This	prints	the	line	</text>
<text top="947" left="222" width="259" height="14" font="5">Player	object	constructed</text>
<text top="942" left="481" width="287" height="20" font="2">.	Following	this,	the	line	with	the</text>
<text top="968" left="54" width="239" height="20" font="2">player’s	name	gets	printed:	</text>
<text top="972" left="293" width="207" height="14" font="5">Player	named	'Diplo'</text>
<text top="968" left="501" width="291" height="20" font="2">.	Why	is	the	player	named	<i>Diplo</i>?</text>
<text top="994" left="54" width="352" height="20" font="2">Because	that	is	the	name	assigned	in	the	</text>
<text top="998" left="406" width="83" height="14" font="5">Player()</text>
<text top="994" left="489" width="107" height="20" font="2">	constructor.</text>
<text top="1031" left="54" width="684" height="20" font="2">Finally,	at	the	end	of	the	program,	the	player	destructor	gets	called,	and	we	see	</text>
<text top="1035" left="738" width="62" height="14" font="5">Player</text>
<text top="1061" left="54" width="166" height="14" font="5">object	destroyed</text>
<text top="1057" left="220" width="606" height="20" font="2">.	The	player	object	gets	destroyed	when	it	goes	out	of	scope	at	the	end</text>
<text top="1083" left="54" width="23" height="20" font="2">of	</text>
<text top="1087" left="77" width="62" height="14" font="5">main()</text>
<text top="1083" left="140" width="34" height="20" font="2">	(at	</text>
<text top="1087" left="173" width="10" height="14" font="5">}</text>
<text top="1083" left="183" width="29" height="20" font="2">	of	</text>
<text top="1087" left="212" width="41" height="14" font="5">main</text>
<text top="1083" left="254" width="13" height="20" font="2">).</text>
<text top="1119" left="54" width="747" height="20" font="2">So	what	are	constructors	and	destructors	good	for?	Exactly	what	they	appear	to	be	for:</text>
<text top="1145" left="54" width="768" height="20" font="2">setting	up	and	tearing	down	of	an	object.	The	constructor	can	be	used	for	initialization	of</text>
<text top="1171" left="54" width="749" height="20" font="2">data	fields	and	the	destructor	to	call	delete	on	any	dynamically	allocated	resources	(we</text>
</page>
<page number="227" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="765" height="20" font="2">haven’t	covered	dynamically	allocated	resources	yet,	so	don’t	worry	about	this	last	point</text>
<text top="83" left="54" width="39" height="20" font="2">yet).</text>
</page>
<page number="228" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="229" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="318" height="39" font="0"><b>Class	inheritance</b></text>
<text top="120" left="54" width="767" height="20" font="2">You	use	inheritance	when	you	want	to	create	a	new,	more	functional	class	of	code,	based</text>
<text top="146" left="54" width="756" height="20" font="2">on	some	existing	class	of	code.	Inheritance	is	a	tricky	topic	to	cover.	Let’s	start	with	the</text>
<text top="172" left="54" width="345" height="20" font="2">concept	of	a	<i>derived	class</i>	(or	subclass).</text>
</page>
<page number="230" position="absolute" top="0" left="0" height="1262" width="892">
<image top="169" left="54" width="432" height="132" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-230_1.jpg"/>
<text top="61" left="54" width="230" height="32" font="7"><b>Derived	classes</b></text>
<text top="110" left="54" width="776" height="20" font="2">The	most	natural	way	to	consider	inheritance	is	by	analogy	with	the	animal	kingdom.	The</text>
<text top="136" left="54" width="579" height="20" font="2">classification	of	living	things	is	shown	in	the	following	screenshot:</text>
<text top="370" left="54" width="767" height="20" font="2">What	this	diagram	means	is	that	<b>Dog</b>,	<b>Cat</b>,	<b>Horse</b>	<b>,</b>	and	<b>Human</b>	are	all	<b>Mammals</b>.	What</text>
<text top="396" left="54" width="777" height="20" font="2">that	means	is	that	dog,	cat,	horse,	and	human	all	share	some	common	characteristics,	such</text>
<text top="421" left="54" width="785" height="20" font="2">as	having	common	organs	(brain	with	neocortex,	lungs,	liver,	and	uterus	in	females),	while</text>
<text top="447" left="54" width="777" height="20" font="2">being	completely	different	in	other	regard.	How	each	walks	is	different.	How	each	talks	is</text>
<text top="473" left="54" width="119" height="20" font="2">also	different.</text>
<text top="510" left="54" width="765" height="20" font="2">What	does	that	mean	if	you	were	coding	creatures?	You	would	only	have	to	program	the</text>
<text top="536" left="54" width="760" height="20" font="2">common	functionality	once.	Then,	you	would	implement	the	code	for	the	different	parts</text>
<text top="562" left="54" width="533" height="20" font="2">specifically	for	each	of	the	dog,	cat,	horse	and	human	classes.</text>
<text top="599" left="54" width="493" height="20" font="2">A	concrete	example	of	the	preceding	figure	is	as	follows:</text>
<text top="642" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="662" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="683" left="54" width="124" height="14" font="5">class	Mammal</text>
<text top="703" left="54" width="10" height="14" font="5">{</text>
<text top="724" left="54" width="104" height="14" font="5">protected:</text>
<text top="745" left="54" width="539" height="14" font="5">		//	protected	variables	are	like	privates:	they	are</text>
<text top="765" left="54" width="580" height="14" font="5">		//	accessible	in	this	class	but	not	outside	the	class.</text>
<text top="786" left="54" width="539" height="14" font="5">		//	the	difference	between	protected	and	private	is</text>
<text top="806" left="54" width="601" height="14" font="5">		//	protected	means	accessible	in	derived	subclasses	also</text>
<text top="827" left="54" width="73" height="14" font="5">int	hp;</text>
<text top="847" left="54" width="155" height="14" font="5">		double	speed;</text>
<text top="888" left="54" width="73" height="14" font="5">public:</text>
<text top="909" left="54" width="663" height="14" font="5">		//	Mammal	constructor	–	runs	FIRST	before	derived	class	ctors!</text>
<text top="929" left="54" width="83" height="14" font="5">Mammal()</text>
<text top="950" left="54" width="10" height="14" font="5">{</text>
<text top="970" left="54" width="114" height="14" font="5">		hp	=	100;</text>
<text top="991" left="54" width="145" height="14" font="5">		speed	=	1.0;</text>
<text top="1011" left="54" width="425" height="14" font="5">		cout	&lt;&lt;	&#34;A	mammal	is	created!&#34;	&lt;&lt;	endl;</text>
<text top="1032" left="54" width="10" height="14" font="5">}</text>
<text top="1052" left="54" width="93" height="14" font="5">~Mammal()</text>
<text top="1073" left="54" width="10" height="14" font="5">{</text>
<text top="1093" left="54" width="425" height="14" font="5">		cout	&lt;&lt;	&#34;A	mammal	has	fallen!&#34;	&lt;&lt;	endl;</text>
<text top="1114" left="54" width="10" height="14" font="5">}</text>
<text top="1134" left="54" width="508" height="14" font="5">//	Common	function	to	all	Mammals	and	derivatives</text>
<text top="1155" left="54" width="166" height="14" font="5">		void	breathe()</text>
<text top="1176" left="54" width="31" height="14" font="5">		{</text>
</page>
<page number="231" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="487" height="14" font="5">				cout	&lt;&lt;	&#34;Breathe	in..	breathe	out&#34;	&lt;&lt;	endl;</text>
<text top="78" left="54" width="31" height="14" font="5">		}</text>
<text top="99" left="54" width="218" height="14" font="5">		virtual	void	talk()</text>
<text top="119" left="54" width="31" height="14" font="5">		{</text>
<text top="140" left="54" width="621" height="14" font="5">				cout	&lt;&lt;	&#34;Mammal	talk..	override	this	function!&#34;	&lt;&lt;	endl;</text>
<text top="160" left="54" width="31" height="14" font="5">		}</text>
<text top="181" left="54" width="466" height="14" font="5">		//	pure	virtual	function,	(explained	below)</text>
<text top="201" left="54" width="269" height="14" font="5">		virtual	void	walk()	=	0;</text>
<text top="222" left="54" width="21" height="14" font="5">};</text>
<text top="263" left="54" width="632" height="14" font="5">//	This	next	line	says	&#34;class	Dog	inherits	from	class	Mammal&#34;</text>
<text top="283" left="54" width="559" height="14" font="5">class	Dog	:	public	Mammal	//	:	is	used	for	inheritance</text>
<text top="304" left="54" width="10" height="14" font="5">{</text>
<text top="324" left="54" width="73" height="14" font="5">public:</text>
<text top="345" left="54" width="73" height="14" font="5">		Dog()</text>
<text top="365" left="54" width="31" height="14" font="5">		{</text>
<text top="386" left="54" width="342" height="14" font="5">cout	&lt;&lt;	&#34;A	dog	is	born!&#34;	&lt;&lt;	endl;</text>
<text top="406" left="54" width="10" height="14" font="5">}</text>
<text top="427" left="54" width="62" height="14" font="5">~Dog()</text>
<text top="447" left="54" width="10" height="14" font="5">{</text>
<text top="468" left="54" width="342" height="14" font="5">		cout	&lt;&lt;	&#34;The	dog	died&#34;	&lt;&lt;	endl;</text>
<text top="488" left="54" width="10" height="14" font="5">}</text>
<text top="509" left="54" width="311" height="14" font="5">		virtual	void	talk()	override</text>
<text top="530" left="54" width="31" height="14" font="5">		{</text>
<text top="550" left="54" width="528" height="14" font="5">				cout	&lt;&lt;	&#34;Woof!&#34;	&lt;&lt;	endl;	//	dogs	only	say	woof!</text>
<text top="571" left="54" width="31" height="14" font="5">		}</text>
<text top="591" left="54" width="342" height="14" font="5">		//	implements	walking	for	a	dog</text>
<text top="612" left="54" width="311" height="14" font="5">		virtual	void	walk()	override</text>
<text top="632" left="54" width="31" height="14" font="5">		{</text>
<text top="653" left="54" width="777" height="14" font="5">				cout	&lt;&lt;	&#34;Left	front	paw	&amp;	back	right	paw,	right	front	paw	&amp;		back	left	</text>
<text top="673" left="54" width="425" height="14" font="5">paw..	at	the	speed	of	&#34;	&lt;&lt;	speed	&lt;&lt;	endl;</text>
<text top="694" left="54" width="31" height="14" font="5">		}</text>
<text top="714" left="54" width="21" height="14" font="5">};</text>
<text top="755" left="54" width="259" height="14" font="5">class	Cat	:	public	Mammal</text>
<text top="776" left="54" width="10" height="14" font="5">{</text>
<text top="796" left="54" width="73" height="14" font="5">public:</text>
<text top="817" left="54" width="73" height="14" font="5">		Cat()</text>
<text top="837" left="54" width="31" height="14" font="5">		{</text>
<text top="858" left="54" width="373" height="14" font="5">				cout	&lt;&lt;	&#34;A	cat	is	born&#34;	&lt;&lt;	endl;</text>
<text top="878" left="54" width="31" height="14" font="5">		}</text>
<text top="899" left="54" width="83" height="14" font="5">		~Cat()</text>
<text top="920" left="54" width="31" height="14" font="5">		{</text>
<text top="940" left="54" width="404" height="14" font="5">				cout	&lt;&lt;	&#34;The	cat	has	died&#34;	&lt;&lt;	endl;</text>
<text top="961" left="54" width="31" height="14" font="5">		}</text>
<text top="981" left="54" width="290" height="14" font="5">virtual	void	talk()	override</text>
<text top="1002" left="54" width="31" height="14" font="5">		{</text>
<text top="1022" left="54" width="290" height="14" font="5">				cout	&lt;&lt;	&#34;Meow!&#34;	&lt;&lt;	endl;</text>
<text top="1043" left="54" width="31" height="14" font="5">		}</text>
<text top="1063" left="54" width="476" height="14" font="5">//	implements	walking	for	a	cat..	same	as	dog!</text>
<text top="1084" left="54" width="311" height="14" font="5">		virtual	void	walk()	override</text>
<text top="1104" left="54" width="31" height="14" font="5">		{</text>
<text top="1125" left="54" width="777" height="14" font="5">				cout	&lt;&lt;	&#34;Left	front	paw	&amp;	back	right	paw,	right	front	paw	&amp;		back	left	</text>
<text top="1145" left="54" width="425" height="14" font="5">paw..	at	the	speed	of	&#34;	&lt;&lt;	speed	&lt;&lt;	endl;</text>
<text top="1166" left="54" width="31" height="14" font="5">		}</text>
<text top="1186" left="54" width="21" height="14" font="5">};</text>
</page>
<page number="232" position="absolute" top="0" left="0" height="1262" width="892">
<text top="78" left="54" width="280" height="14" font="5">class	Human	:	public	Mammal</text>
<text top="99" left="54" width="10" height="14" font="5">{</text>
<text top="119" left="54" width="611" height="14" font="5">//	Data	member	unique	to	Human	(not	found	in	other	Mammals)</text>
<text top="140" left="54" width="176" height="14" font="5">		bool	civilized;</text>
<text top="160" left="54" width="73" height="14" font="5">public:</text>
<text top="181" left="54" width="93" height="14" font="5">		Human()</text>
<text top="201" left="54" width="31" height="14" font="5">		{</text>
<text top="222" left="54" width="435" height="14" font="5">				cout	&lt;&lt;	&#34;A	new	human	is	born&#34;	&lt;&lt;	endl;</text>
<text top="242" left="54" width="601" height="14" font="5">				speed	=	2.0;	//	change	speed.	Since	derived	class	ctor</text>
<text top="263" left="54" width="580" height="14" font="5">				//	(ctor	is	short	for	constructor!)	runs	after	base	</text>
<text top="283" left="54" width="611" height="14" font="5">				//	class	ctor,	initialization	sticks	initialize	member	</text>
<text top="304" left="54" width="404" height="14" font="5">				//	variables	specific	to	this	class</text>
<text top="324" left="54" width="218" height="14" font="5">				civilized	=	true;</text>
<text top="345" left="54" width="31" height="14" font="5">		}</text>
<text top="365" left="54" width="104" height="14" font="5">		~Human()</text>
<text top="386" left="54" width="31" height="14" font="5">		{</text>
<text top="406" left="54" width="425" height="14" font="5">				cout	&lt;&lt;	&#34;The	human	has	died&#34;	&lt;&lt;	endl;</text>
<text top="427" left="54" width="31" height="14" font="5">		}</text>
<text top="447" left="54" width="311" height="14" font="5">		virtual	void	talk()	override</text>
<text top="468" left="54" width="31" height="14" font="5">		{</text>
<text top="488" left="54" width="559" height="14" font="5">				cout	&lt;&lt;	&#34;I'm	good	looking	for	a	..	human&#34;	&lt;&lt;	endl;</text>
<text top="509" left="54" width="31" height="14" font="5">		}</text>
<text top="530" left="54" width="363" height="14" font="5">//	implements	walking	for	a	human..</text>
<text top="550" left="54" width="311" height="14" font="5">		virtual	void	walk()	override</text>
<text top="571" left="54" width="31" height="14" font="5">		{</text>
<text top="591" left="54" width="766" height="14" font="5">				cout	&lt;&lt;	&#34;Left,	right,	left,	right	at	the	speed	of	&#34;	&lt;&lt;	speed		&lt;&lt;	endl;</text>
<text top="612" left="54" width="31" height="14" font="5">		}</text>
<text top="632" left="54" width="487" height="14" font="5">		//	member	function	unique	to	human	derivative</text>
<text top="653" left="54" width="311" height="14" font="5">		void	attack(	Human	&amp;	other	)</text>
<text top="673" left="54" width="31" height="14" font="5">		{</text>
<text top="694" left="54" width="445" height="14" font="5">				//	Human	refuses	to	attack	if	civilized</text>
<text top="714" left="54" width="197" height="14" font="5">				if(	civilized	)</text>
<text top="735" left="54" width="715" height="14" font="5">						cout	&lt;&lt;	&#34;Why	would	a	human	attack	another?	Je	refuse&#34;	&lt;&lt;		endl;</text>
<text top="755" left="54" width="83" height="14" font="5">				else</text>
<text top="776" left="54" width="508" height="14" font="5">						cout	&lt;&lt;	&#34;A	human	attacks	another!&#34;	&lt;&lt;	endl;</text>
<text top="796" left="54" width="31" height="14" font="5">		}</text>
<text top="817" left="54" width="21" height="14" font="5">};</text>
<text top="858" left="54" width="104" height="14" font="5">int	main()</text>
<text top="878" left="54" width="10" height="14" font="5">{</text>
<text top="899" left="54" width="145" height="14" font="5">		Human	human;</text>
<text top="920" left="54" width="704" height="14" font="5">		human.breathe();	//	breathe	using	Mammal	base	class		functionality</text>
<text top="940" left="54" width="155" height="14" font="5">		human.talk();</text>
<text top="961" left="54" width="155" height="14" font="5">		human.walk();</text>
<text top="1002" left="54" width="104" height="14" font="5">		Cat	cat;</text>
<text top="1022" left="54" width="673" height="14" font="5">		cat.breathe();	//	breathe	using	Mammal	base	class	functionality</text>
<text top="1043" left="54" width="135" height="14" font="5">		cat.talk();</text>
<text top="1063" left="54" width="135" height="14" font="5">		cat.walk();</text>
<text top="1104" left="54" width="104" height="14" font="5">		Dog	dog;</text>
<text top="1125" left="54" width="166" height="14" font="5">		dog.breathe();</text>
<text top="1145" left="54" width="135" height="14" font="5">		dog.talk();</text>
<text top="1166" left="54" width="135" height="14" font="5">		dog.walk();</text>
<text top="1186" left="54" width="10" height="14" font="5">}</text>
</page>
<page number="233" position="absolute" top="0" left="0" height="1262" width="892">
<image top="218" left="54" width="432" height="147" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-233_1.jpg"/>
<text top="57" left="54" width="56" height="20" font="2">All	of	</text>
<text top="62" left="110" width="31" height="14" font="5">Dog</text>
<text top="57" left="141" width="11" height="20" font="2">,	</text>
<text top="62" left="152" width="31" height="14" font="5">Cat</text>
<text top="57" left="183" width="47" height="20" font="2">,	and	</text>
<text top="62" left="231" width="52" height="14" font="5">Human</text>
<text top="57" left="282" width="114" height="20" font="2">	inherit	from	</text>
<text top="62" left="397" width="124" height="14" font="5">class	Mammal</text>
<text top="57" left="521" width="263" height="20" font="2">.	This	means	that	dog,	cat,	and</text>
<text top="83" left="54" width="330" height="20" font="2">human	are	mammals,	and	many	more.</text>
<text top="121" left="54" width="226" height="22" font="8"><b>Syntax	of	inheritance</b></text>
<text top="160" left="54" width="484" height="20" font="2">The	syntax	of	inheritance	is	quite	simple.	Let’s	take	the	</text>
<text top="164" left="538" width="52" height="14" font="5">Human</text>
<text top="160" left="589" width="186" height="20" font="2">	class	definition	as	an</text>
<text top="186" left="54" width="598" height="20" font="2">example.	The	following	screenshot	is	a	typical	inheritance	statement:</text>
<text top="434" left="54" width="773" height="20" font="2">The	class	on	the	left	of	the	colon	(<b>:</b>)	is	the	new,	derived	class,	and	the	class	on	the	right	of</text>
<text top="460" left="54" width="228" height="20" font="2">the	colon	is	the	base	class.</text>
<text top="498" left="54" width="283" height="22" font="8"><b>What	does	inheritance	do?</b></text>
<text top="537" left="54" width="734" height="20" font="2">The	point	of	inheritance	is	for	the	derived	class	to	take	on	all	the	characteristics	(data</text>
<text top="563" left="54" width="727" height="20" font="2">members,	member	functions)	of	the	base	class,	and	then	to	extend	it	with	even	more</text>
<text top="589" left="54" width="414" height="20" font="2">functionality.	For	instance,	all	mammals	have	a	</text>
<text top="593" left="468" width="93" height="14" font="5">breathe()</text>
<text top="589" left="561" width="250" height="20" font="2">	function.	By	inheriting	from</text>
<text top="615" left="54" width="32" height="20" font="2">the	</text>
<text top="619" left="86" width="62" height="14" font="5">Mammal</text>
<text top="615" left="148" width="90" height="20" font="2">	class,	the	</text>
<text top="619" left="238" width="31" height="14" font="5">Dog</text>
<text top="615" left="269" width="11" height="20" font="2">,	</text>
<text top="619" left="280" width="31" height="14" font="5">Cat</text>
<text top="615" left="311" width="47" height="20" font="2">,	and	</text>
<text top="619" left="358" width="52" height="14" font="5">Human</text>
<text top="615" left="410" width="372" height="20" font="2">	classes	all	automatically	gain	the	ability	to</text>
<text top="645" left="54" width="93" height="14" font="5">breathe()</text>
<text top="641" left="147" width="5" height="20" font="2">.</text>
<text top="677" left="54" width="737" height="20" font="2">Inheritance	reduces	replication	of	code	since	we	don’t	have	to	re-implement	common</text>
<text top="703" left="54" width="204" height="20" font="2">functionalities	(such	as	</text>
<text top="708" left="258" width="104" height="14" font="5">.breathe()</text>
<text top="703" left="362" width="43" height="20" font="2">)	for	</text>
<text top="708" left="405" width="31" height="14" font="5">Dog</text>
<text top="703" left="436" width="11" height="20" font="2">,	</text>
<text top="708" left="447" width="31" height="14" font="5">Cat</text>
<text top="703" left="478" width="47" height="20" font="2">,	and	</text>
<text top="708" left="525" width="52" height="14" font="5">Human</text>
<text top="703" left="577" width="197" height="20" font="2">.	Instead,	each	of	these</text>
<text top="729" left="54" width="335" height="20" font="2">derived	classes	enjoys	the	reuse	of	the	</text>
<text top="734" left="389" width="93" height="14" font="5">breathe()</text>
<text top="729" left="482" width="175" height="20" font="2">	function	defined	in	</text>
<text top="734" left="657" width="124" height="14" font="5">class	Mammal</text>
<text top="729" left="782" width="5" height="20" font="2">.</text>
<text top="766" left="54" width="165" height="20" font="2">However,	only	the	</text>
<text top="770" left="219" width="52" height="14" font="5">Human</text>
<text top="766" left="270" width="119" height="20" font="2">	class	has	the	</text>
<text top="770" left="389" width="83" height="14" font="5">attack()</text>
<text top="766" left="472" width="352" height="20" font="2">member	function.	This	would	mean	that,</text>
<text top="792" left="54" width="183" height="20" font="2">in	our	code,	only	the	</text>
<text top="796" left="237" width="52" height="14" font="5">Human</text>
<text top="792" left="289" width="162" height="20" font="2">	class	attacks.	The	</text>
<text top="796" left="452" width="124" height="14" font="5">cat.attack()</text>
<text top="792" left="576" width="218" height="20" font="2">	function	will	introduce	a</text>
<text top="818" left="54" width="449" height="20" font="2">compiler	error,	unless	you	write	a	member	function	</text>
<text top="822" left="503" width="83" height="14" font="5">attack()</text>
<text top="818" left="586" width="62" height="20" font="2">	inside	</text>
<text top="822" left="649" width="93" height="14" font="5">class	Cat</text>
<text top="818" left="742" width="53" height="20" font="2">	(or	in</text>
<text top="848" left="54" width="124" height="14" font="5">class	Mammal</text>
<text top="844" left="178" width="13" height="20" font="2">).</text>
</page>
<page number="234" position="absolute" top="0" left="0" height="1262" width="892">
<image top="169" left="54" width="162" height="233" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-234_1.jpg"/>
<image top="702" left="54" width="162" height="105" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-234_2.jpg"/>
<text top="61" left="54" width="244" height="32" font="7"><b>is-a	relationship</b></text>
<text top="110" left="54" width="286" height="20" font="2">Inheritance	is	often	said	to	be	an	</text>
<text top="115" left="340" width="41" height="14" font="5">is-a</text>
<text top="110" left="381" width="190" height="20" font="2">	relationship.	When	a	</text>
<text top="115" left="571" width="52" height="14" font="5">Human</text>
<text top="110" left="623" width="165" height="20" font="2">	class	inherits	from</text>
<text top="141" left="54" width="62" height="14" font="5">Mammal</text>
<text top="136" left="116" width="386" height="20" font="2">	class,	then	we	say	that	human	<i>is-a</i>	mammal.</text>
<text top="439" left="238" width="417" height="20" font="4"><i>The	Human	inherits	all	the	traits	a	Mammal	has</i></text>
<text top="508" left="54" width="134" height="20" font="2">For	example,	a	</text>
<text top="512" left="188" width="52" height="14" font="5">Human</text>
<text top="508" left="240" width="156" height="20" font="2">	object	contains	a	</text>
<text top="512" left="396" width="62" height="14" font="5">Mammal</text>
<text top="508" left="458" width="257" height="20" font="2">	function	inside	it,	as	follows:</text>
<text top="551" left="54" width="114" height="14" font="5">class	Human</text>
<text top="572" left="54" width="10" height="14" font="5">{</text>
<text top="592" left="54" width="166" height="14" font="5">		Mammal	mammal;</text>
<text top="613" left="54" width="21" height="14" font="5">};</text>
<text top="644" left="54" width="417" height="20" font="2">In	this	example,	we	would	say	the	human	<i>has-a</i>	</text>
<text top="648" left="471" width="62" height="14" font="5">Mammal</text>
<text top="644" left="533" width="273" height="20" font="2">	on	it	somewhere	(which	would</text>
<text top="670" left="54" width="644" height="20" font="2">make	sense	if	the	human	were	pregnant,	or	somehow	carrying	a	mammal).</text>
<text top="844" left="156" width="581" height="20" font="4"><i>This	Human	class	instance	has	some	kind	of	mammal	attached	in	it</i></text>
<text top="913" left="54" width="311" height="20" font="2">Remember	that	we	previously	gave	</text>
<text top="917" left="365" width="62" height="14" font="5">Player</text>
<text top="913" left="427" width="31" height="20" font="2">	an	</text>
<text top="917" left="458" width="52" height="14" font="5">Armor</text>
<text top="913" left="510" width="292" height="20" font="2">	object	inside	it.	It	wouldn’t	make</text>
<text top="939" left="54" width="114" height="20" font="2">sense	for	the	</text>
<text top="943" left="168" width="62" height="14" font="5">Player</text>
<text top="939" left="231" width="227" height="20" font="2">	object	to	inherit	from	the	</text>
<text top="943" left="457" width="52" height="14" font="5">Armor</text>
<text top="939" left="509" width="279" height="20" font="2">	class,	because	it	wouldn’t	make</text>
<text top="965" left="54" width="727" height="20" font="2">sense	to	say	<i>the	Player	is-an	Armor</i>.	When	deciding	whether	one	class	inherits	from</text>
<text top="991" left="54" width="753" height="20" font="2">another	or	not	in	code	design	(for	example,	the	Human	class	inherits	from	the	Mammal</text>
<text top="1017" left="54" width="758" height="20" font="2">class),	you	must	always	be	able	to	comfortably	say	something	like	the	Human	class	<i>is-a</i></text>
<text top="1043" left="54" width="777" height="20" font="2">Mammal.	If	the	<i>is-a</i>	statement	sounds	wrong,	then	it	is	likely	that	inheritance	is	the	wrong</text>
<text top="1069" left="54" width="304" height="20" font="2">relationship	for	that	pair	of	objects.</text>
<text top="1105" left="54" width="758" height="20" font="2">In	the	preceding	example,	we’re	introducing	a	few	new	C++	keywords	here.	The	first	is</text>
<text top="1136" left="54" width="93" height="14" font="5">protected</text>
<text top="1131" left="147" width="5" height="20" font="2">.</text>
</page>
<page number="235" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="291" height="32" font="7"><b>protected	variables</b></text>
<text top="110" left="54" width="21" height="20" font="2">A	</text>
<text top="115" left="75" width="93" height="14" font="5">protected</text>
<text top="110" left="168" width="318" height="20" font="2">	member	variable	is	different	from	a	</text>
<text top="115" left="486" width="62" height="14" font="5">public</text>
<text top="110" left="548" width="29" height="20" font="2">	or	</text>
<text top="115" left="577" width="73" height="14" font="5">private</text>
<text top="110" left="649" width="162" height="20" font="2">	variable.	All	three</text>
<text top="136" left="54" width="696" height="20" font="2">classes	of	variables	are	accessible	inside	the	class	in	which	they	are	defined.	The</text>
<text top="162" left="54" width="627" height="20" font="2">difference	between	them	is	in	regard	to	accessibility	outside	the	class.	A	</text>
<text top="167" left="681" width="62" height="14" font="5">public</text>
<text top="162" left="743" width="95" height="20" font="2">	variable	is</text>
<text top="188" left="54" width="527" height="20" font="2">accessible	anywhere	inside	the	class	and	outside	the	class.	A	</text>
<text top="192" left="581" width="73" height="14" font="5">private</text>
<text top="188" left="653" width="95" height="20" font="2">	variable	is</text>
<text top="214" left="54" width="467" height="20" font="2">accessible	inside	the	class	but	not	outside	the	class.	A	</text>
<text top="218" left="521" width="93" height="14" font="5">protected</text>
<text top="214" left="614" width="188" height="20" font="2">	variable	is	accessible</text>
<text top="240" left="54" width="755" height="20" font="2">inside	the	class,	and	inside	of	derived	subclasses,	but	is	not	accessible	outside	the	class.</text>
<text top="266" left="54" width="65" height="20" font="2">So,	the	</text>
<text top="270" left="119" width="21" height="14" font="5">hp</text>
<text top="266" left="140" width="42" height="20" font="2">	and	</text>
<text top="270" left="182" width="52" height="14" font="5">speed</text>
<text top="266" left="234" width="113" height="20" font="2">	members	of	</text>
<text top="270" left="347" width="124" height="14" font="5">class	Mammal</text>
<text top="266" left="471" width="347" height="20" font="2">	will	be	accessible	in	the	derived	classes</text>
<text top="292" left="54" width="564" height="20" font="2">Dog,	Cat,	Horse,	and	Human,	but	not	outside	of	these	classes	(in	</text>
<text top="296" left="618" width="62" height="14" font="5">main()</text>
<text top="292" left="680" width="119" height="20" font="2">	for	instance).</text>
</page>
<page number="236" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="259" height="32" font="7"><b>Virtual	functions</b></text>
<text top="110" left="54" width="740" height="20" font="2">A	virtual	function	is	a	member	function	whose	implementation	can	be	overridden	in	a</text>
<text top="136" left="54" width="299" height="20" font="2">derived	class.	In	this	example,	the	</text>
<text top="141" left="353" width="62" height="14" font="5">talk()</text>
<text top="136" left="415" width="258" height="20" font="2">	member	function	(defined	in	</text>
<text top="141" left="673" width="124" height="14" font="5">class	Mammal</text>
<text top="136" left="797" width="27" height="20" font="2">)	is</text>
<text top="162" left="54" width="70" height="20" font="2">marked	</text>
<text top="167" left="124" width="73" height="14" font="5">virtual</text>
<text top="162" left="197" width="570" height="20" font="2">.	This	means	that	the	derived	classes	might	or	might	not	choose	to</text>
<text top="188" left="54" width="357" height="20" font="2">implement	their	own	version	of	what	the	</text>
<text top="192" left="411" width="62" height="14" font="5">talk()</text>
<text top="188" left="473" width="219" height="20" font="2">	member	function	means.</text>
</page>
<page number="237" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="695" height="32" font="7"><b>Purely	virtual	functions	(and	abstract	classes)</b></text>
<text top="110" left="54" width="772" height="20" font="2">A	purely	virtual	function	is	one	whose	implementation	you	are	required	to	override	in	the</text>
<text top="136" left="54" width="162" height="20" font="2">derived	class.	The	</text>
<text top="141" left="216" width="62" height="14" font="5">walk()</text>
<text top="136" left="278" width="105" height="20" font="2">	function	in	</text>
<text top="141" left="383" width="124" height="14" font="5">class	Mammal</text>
<text top="136" left="507" width="321" height="20" font="2">	is	purely	virtual;	it	was	declared	like</text>
<text top="162" left="54" width="37" height="20" font="2">this:</text>
<text top="205" left="54" width="249" height="14" font="5">virtual	void	walk()	=	0;</text>
<text top="237" left="54" width="39" height="20" font="2">The	</text>
<text top="241" left="93" width="31" height="14" font="5">=	0</text>
<text top="237" left="124" width="623" height="20" font="2">	part	at	the	end	of	the	preceding	code	is	what	makes	the	function	purely	</text>
<text top="241" left="747" width="73" height="14" font="5">virtual</text>
<text top="237" left="819" width="5" height="20" font="2">.</text>
<text top="273" left="54" width="39" height="20" font="2">The	</text>
<text top="278" left="93" width="62" height="14" font="5">walk()</text>
<text top="273" left="155" width="105" height="20" font="2">	function	in	</text>
<text top="278" left="260" width="124" height="14" font="5">class	Mammal</text>
<text top="273" left="384" width="86" height="20" font="2">	is	purely	</text>
<text top="278" left="470" width="73" height="14" font="5">virtual</text>
<text top="273" left="543" width="296" height="20" font="2">	and	this	makes	the	Mammal	class</text>
<text top="299" left="54" width="774" height="20" font="2">abstract.	An	abstract	class	in	C++	is	any	class	that	has	at	least	one	purely	virtual	function.</text>
<text top="336" left="54" width="719" height="20" font="2">If	a	class	contains	a	purely	virtual	function	and	is	abstract,	then	that	class	cannot	be</text>
<text top="362" left="54" width="423" height="20" font="2">instantiated	directly.	That	is,	you	cannot	create	a	</text>
<text top="366" left="477" width="62" height="14" font="5">Mammal</text>
<text top="362" left="539" width="259" height="20" font="2">	object	now,	on	account	of	the</text>
<text top="388" left="54" width="200" height="20" font="2">purely	virtual	function	</text>
<text top="392" left="254" width="62" height="14" font="5">walk()</text>
<text top="388" left="316" width="484" height="20" font="2">.	If	you	tried	to	do	the	following	code,	you	would	get	an</text>
<text top="414" left="54" width="48" height="20" font="2">error:</text>
<text top="457" left="54" width="104" height="14" font="5">int	main()</text>
<text top="478" left="54" width="10" height="14" font="5">{</text>
<text top="498" left="54" width="166" height="14" font="5">		Mammal	mammal;</text>
<text top="519" left="54" width="10" height="14" font="5">}</text>
<text top="550" left="54" width="176" height="20" font="2">If	you	try	to	create	a</text>
<text top="554" left="230" width="73" height="14" font="5">	Mammal</text>
<text top="550" left="302" width="346" height="20" font="2">	object,	you	will	get	the	following	error:</text>
<text top="593" left="54" width="590" height="14" font="5">error	C2259:	'Mammal'	:	cannot	instantiate	abstract	class</text>
<text top="625" left="54" width="454" height="20" font="2">You	can,	however,	create	instances	of	derivatives	of	</text>
<text top="629" left="508" width="124" height="14" font="5">class	Mammal</text>
<text top="625" left="632" width="198" height="20" font="2">,	as	long	as	the	derived</text>
<text top="650" left="54" width="596" height="20" font="2">classes	have	all	of	the	purely	virtual	member	functions	implemented.</text>
</page>
<page number="238" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="239" position="absolute" top="0" left="0" height="1262" width="892">
<image top="319" left="54" width="324" height="203" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-239_1.jpg"/>
<text top="64" left="54" width="378" height="39" font="0"><b>Multiple	inheritance</b></text>
<text top="120" left="54" width="749" height="20" font="2">Not	everything	multiple	is	as	good	as	it	sounds.	Multiple	inheritance	is	when	a	derived</text>
<text top="146" left="54" width="741" height="20" font="2">class	inherits	from	more	than	one	base	class.	Usually,	this	works	without	a	hitch	if	the</text>
<text top="172" left="54" width="604" height="20" font="2">multiple	base	classes	we	are	inheriting	from	are	completely	unrelated.</text>
<text top="209" left="54" width="294" height="20" font="2">For	example,	we	can	have	a	class	</text>
<text top="213" left="348" width="62" height="14" font="5">Window</text>
<text top="209" left="410" width="192" height="20" font="2">	that	inherits	from	the	</text>
<text top="213" left="602" width="124" height="14" font="5">SoundManager</text>
<text top="209" left="727" width="37" height="20" font="2">	and</text>
<text top="239" left="54" width="155" height="14" font="5">GraphicsManager</text>
<text top="235" left="209" width="140" height="20" font="2">	base	classes.	If	</text>
<text top="239" left="349" width="124" height="14" font="5">SoundManager</text>
<text top="235" left="473" width="248" height="20" font="2">	provides	a	member	function</text>
<text top="265" left="54" width="114" height="14" font="5">playSound()</text>
<text top="260" left="168" width="42" height="20" font="2">	and	</text>
<text top="265" left="210" width="155" height="14" font="5">GraphicsManager</text>
<text top="260" left="365" width="254" height="20" font="2">	provides	a	member	function	</text>
<text top="265" left="619" width="124" height="14" font="5">drawSprite()</text>
<text top="260" left="743" width="80" height="20" font="2">,	then	the</text>
<text top="291" left="54" width="62" height="14" font="5">Window</text>
<text top="286" left="116" width="596" height="20" font="2">	class	will	be	able	to	use	those	additional	capabilities	without	a	hitch.</text>
<text top="559" left="64" width="765" height="20" font="4"><i>Game	Window	inheriting	from	Sound	Man	and	Graphics	Man	means	Game	Window	will</i></text>
<text top="585" left="321" width="251" height="20" font="4"><i>have	both	sets	of	capabilities</i></text>
<text top="654" left="54" width="762" height="20" font="2">However,	multiple	inheritance	can	have	negative	consequences.	Say	we	want	to	create	a</text>
<text top="680" left="54" width="47" height="20" font="2">class	</text>
<text top="684" left="101" width="41" height="14" font="5">Mule</text>
<text top="680" left="143" width="234" height="20" font="2">	that	derives	from	both	the	</text>
<text top="684" left="377" width="62" height="14" font="5">Donkey</text>
<text top="680" left="439" width="42" height="20" font="2">	and	</text>
<text top="684" left="481" width="52" height="14" font="5">Horse</text>
<text top="680" left="532" width="115" height="20" font="2">	classes.	The	</text>
<text top="684" left="648" width="62" height="14" font="5">Donkey</text>
<text top="680" left="710" width="42" height="20" font="2">	and	</text>
<text top="684" left="752" width="52" height="14" font="5">Horse</text>
<text top="706" left="54" width="431" height="20" font="2">classes,	however,	both	inherit	from	the	base	class	</text>
<text top="710" left="485" width="62" height="14" font="5">Mammal</text>
<text top="706" left="547" width="266" height="20" font="2">.	We	instantly	have	an	issue!	If</text>
<text top="731" left="54" width="137" height="20" font="2">we	were	to	call	</text>
<text top="736" left="191" width="114" height="14" font="5">mule.talk()</text>
<text top="731" left="305" width="44" height="20" font="2">,	but	</text>
<text top="736" left="348" width="41" height="14" font="5">mule</text>
<text top="731" left="390" width="192" height="20" font="2">	does	not	override	the	</text>
<text top="736" left="582" width="62" height="14" font="5">talk()</text>
<text top="731" left="644" width="141" height="20" font="2">	function,	which</text>
<text top="757" left="54" width="384" height="20" font="2">member	function	should	be	invoked,	that	of	</text>
<text top="762" left="438" width="52" height="14" font="5">Horse</text>
<text top="757" left="489" width="29" height="20" font="2">	or	</text>
<text top="762" left="518" width="62" height="14" font="5">Donkey</text>
<text top="757" left="580" width="148" height="20" font="2">?	It’s	ambiguous.</text>
</page>
<page number="240" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="290" height="32" font="7"><b>private	inheritance</b></text>
<text top="110" left="54" width="322" height="20" font="2">A	less	talked	about	feature	of	C++	is	</text>
<text top="115" left="376" width="73" height="14" font="5">private</text>
<text top="110" left="448" width="381" height="20" font="2">	inheritance.	Whenever	a	class	inherits	from</text>
<text top="136" left="54" width="709" height="20" font="2">another	class	publicly,	it	is	known	to	all	code	whose	parent	class	it	belongs	to.	For</text>
<text top="162" left="54" width="79" height="20" font="2">example:</text>
<text top="205" left="54" width="259" height="14" font="5">class	Cat	:	public	Mammal</text>
<text top="237" left="54" width="345" height="20" font="2">This	means	that	all	code	will	know	that	</text>
<text top="241" left="399" width="31" height="14" font="5">Cat</text>
<text top="237" left="430" width="132" height="20" font="2">	is	an	object	of	</text>
<text top="241" left="563" width="62" height="14" font="5">Mammal</text>
<text top="237" left="625" width="200" height="20" font="2">,	and	it	will	be	possible</text>
<text top="263" left="54" width="109" height="20" font="2">to	point	to	a	</text>
<text top="267" left="163" width="41" height="14" font="5">Cat*</text>
<text top="263" left="205" width="240" height="20" font="2">	instance	using	a	base	class	</text>
<text top="267" left="444" width="73" height="14" font="5">Mammal*</text>
<text top="263" left="517" width="311" height="20" font="2">	pointer.	For	example,	the	following</text>
<text top="289" left="54" width="160" height="20" font="2">code	will	be	valid:</text>
<text top="332" left="54" width="83" height="14" font="5">Cat	cat;</text>
<text top="352" left="54" width="642" height="14" font="5">Mammal*	mammalPtr	=	&amp;cat;	//	Point	to	the	Cat	as	if	it	were	a	</text>
<text top="373" left="54" width="363" height="14" font="5">																										//	Mammal</text>
<text top="404" left="54" width="253" height="20" font="2">The	preceding	code	is	fine	if	</text>
<text top="409" left="307" width="31" height="14" font="5">Cat</text>
<text top="404" left="338" width="123" height="20" font="2">	inherits	from	</text>
<text top="409" left="461" width="62" height="14" font="5">Mammal</text>
<text top="404" left="523" width="268" height="20" font="2">	publicly.	Private	inheritance	is</text>
<text top="430" left="54" width="204" height="20" font="2">where	code	outside	the	</text>
<text top="434" left="258" width="31" height="14" font="5">Cat</text>
<text top="430" left="289" width="394" height="20" font="2">	class	is	not	allowed	to	know	the	parent	class:</text>
<text top="473" left="54" width="269" height="14" font="5">class	Cat	:	private	Mammal</text>
<text top="505" left="54" width="469" height="20" font="2">Here,	externally	calling	code	will	not	“know”	that	the	</text>
<text top="509" left="523" width="31" height="14" font="5">Cat</text>
<text top="505" left="554" width="200" height="20" font="2">	class	derives	from	the	</text>
<text top="509" left="753" width="62" height="14" font="5">Mammal</text>
<text top="531" left="54" width="139" height="20" font="2">class.	Casting	a	</text>
<text top="535" left="193" width="31" height="14" font="5">Cat</text>
<text top="531" left="224" width="135" height="20" font="2">	instance	to	the	</text>
<text top="535" left="360" width="62" height="14" font="5">Mammal</text>
<text top="531" left="422" width="411" height="20" font="2">	base	class	is	not	allowed	by	the	compiler	when</text>
<text top="556" left="54" width="121" height="20" font="2">inheritance	is	</text>
<text top="561" left="175" width="73" height="14" font="5">private</text>
<text top="556" left="248" width="50" height="20" font="2">.	Use	</text>
<text top="561" left="297" width="73" height="14" font="5">private</text>
<text top="556" left="370" width="424" height="20" font="2">	inheritance	when	you	need	to	hide	the	fact	that	a</text>
<text top="582" left="54" width="412" height="20" font="2">certain	class	derives	from	a	certain	parent	class.</text>
<text top="619" left="54" width="663" height="20" font="2">However,	private	inheritance	is	rarely	used	in	practice.	Most	classes	just	use	</text>
<text top="624" left="717" width="62" height="14" font="5">public</text>
<text top="645" left="54" width="590" height="20" font="2">inheritance.	If	you	want	to	know	more	about	private	inheritance,	see</text>
<text top="671" left="54" width="772" height="20" font="1"><a href="http://stackoverflow.com/questions/406081/why-should-i-avoid-multiple-inheritance-in-c">http://stackoverflow.com/questions/406081/why-should-i-avoid-multiple-inheritance-in-c</a></text>
<text top="671" left="826" width="5" height="20" font="2">.</text>
</page>
<page number="241" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="242" position="absolute" top="0" left="0" height="1262" width="892">
<image top="502" left="54" width="785" height="275" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-242_1.jpg"/>
<text top="64" left="54" width="604" height="39" font="0"><b>Putting	your	classes	into	headers</b></text>
<text top="120" left="54" width="412" height="20" font="2">So	far,	our	classes	have	just	been	pasted	before	</text>
<text top="124" left="466" width="62" height="14" font="5">main()</text>
<text top="120" left="528" width="281" height="20" font="2">.	If	you	continue	to	program	that</text>
<text top="146" left="54" width="677" height="20" font="2">way,	your	code	will	all	be	in	one	file	and	appear	as	one	big	disorganized	mess.</text>
<text top="183" left="54" width="763" height="20" font="2">Therefore,	it	is	a	good	programming	practice	to	organize	your	classes	into	separate	files.</text>
<text top="209" left="54" width="746" height="20" font="2">This	makes	editing	each	class’s	code	individually	much	easier	when	there	are	multiple</text>
<text top="235" left="54" width="219" height="20" font="2">classes	inside	the	project.</text>
<text top="271" left="54" width="47" height="20" font="2">Take	</text>
<text top="276" left="101" width="124" height="14" font="5">class	Mammal</text>
<text top="271" left="225" width="578" height="20" font="2">	and	its	derived	classes	from	earlier.	We	will	properly	organize	that</text>
<text top="297" left="54" width="406" height="20" font="2">example	into	separate	files.	Let’s	do	it	in	steps:</text>
<text top="334" left="69" width="414" height="20" font="2">1.	 Create	a	new	file	in	your	C++	project	called	</text>
<text top="338" left="483" width="83" height="14" font="5">Mammal.h</text>
<text top="334" left="566" width="215" height="20" font="2">.	Cut	and	paste	the	entire</text>
<text top="364" left="97" width="62" height="14" font="5">Mammal</text>
<text top="360" left="159" width="351" height="20" font="2">	class	into	that	file.	Notice	that	since	the	</text>
<text top="364" left="511" width="62" height="14" font="5">Mammal</text>
<text top="360" left="573" width="216" height="20" font="2">	class	included	the	use	of</text>
<text top="390" left="97" width="41" height="14" font="5">cout</text>
<text top="386" left="139" width="106" height="20" font="2">,	we	write	a	</text>
<text top="390" left="245" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="386" left="441" width="254" height="20" font="2">	statement	in	that	file	as	well.</text>
<text top="412" left="69" width="112" height="20" font="2">2.	 Write	a	”	</text>
<text top="416" left="181" width="83" height="14" font="5">#include</text>
<text top="412" left="264" width="5" height="20" font="2">	</text>
<text top="416" left="269" width="83" height="14" font="5">Mammal.h</text>
<text top="412" left="352" width="257" height="20" font="2">”	statement	at	the	top	of	your	</text>
<text top="416" left="609" width="104" height="14" font="5">Source.cpp</text>
<text top="412" left="713" width="40" height="20" font="2">	file.</text>
<text top="470" left="54" width="629" height="20" font="2">An	example	of	what	this	looks	like	is	shown	in	the	following	screenshot:</text>
<text top="847" left="54" width="584" height="20" font="2">What’s	happening	here	when	the	code	is	compiled	is	that	the	entire	</text>
<text top="851" left="638" width="62" height="14" font="5">Mammal</text>
<text top="847" left="700" width="130" height="20" font="2">	class	is	copied</text>
<text top="873" left="54" width="262" height="20" font="2">and	pasted	(#include)	into	the	</text>
<text top="877" left="316" width="104" height="14" font="5">Source.cpp</text>
<text top="873" left="420" width="212" height="20" font="2">	file,	which	contains	the	</text>
<text top="877" left="632" width="62" height="14" font="5">main()</text>
<text top="873" left="694" width="119" height="20" font="2">	function,	and</text>
<text top="899" left="54" width="338" height="20" font="2">the	rest	of	the	classes	are	derived	from	</text>
<text top="903" left="392" width="62" height="14" font="5">Mammal</text>
<text top="899" left="454" width="64" height="20" font="2">.	Since	</text>
<text top="903" left="518" width="83" height="14" font="5">#include</text>
<text top="899" left="601" width="168" height="20" font="2">	is	a	copy	and	paste</text>
<text top="925" left="54" width="749" height="20" font="2">function,	the	code	will	function	exactly	the	same	as	it	did	before;	the	only	difference	is</text>
<text top="951" left="54" width="760" height="20" font="2">that	it	will	be	much	better	organized	and	easier	to	look	at.	Compile	and	run	your	code	at</text>
<text top="977" left="54" width="306" height="20" font="2">this	step	to	make	sure	it	still	works.</text>
<text top="1015" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="1053" left="54" width="746" height="20" font="2">Check	that	your	code	compiles	and	runs	often,	especially	when	refactoring.	When	you</text>
<text top="1079" left="54" width="765" height="20" font="2">don’t	know	the	rules,	you’re	bound	to	make	a	lot	of	mistakes.	This	is	why	you	should	do</text>
<text top="1105" left="54" width="772" height="20" font="2">your	refactoring	only	in	small	steps.	Refactoring	is	the	name	for	the	activity	we	are	doing</text>
<text top="1131" left="54" width="702" height="20" font="2">now—we	are	reorganizing	the	source	to	make	better	sense	to	other	readers	of	our</text>
<text top="1157" left="54" width="625" height="20" font="2">codebase.	Refactoring	usually	does	not	involve	rewriting	too	much	of	it.</text>
</page>
<page number="243" position="absolute" top="0" left="0" height="1262" width="892">
<image top="152" left="54" width="785" height="208" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-243_1.jpg"/>
<image top="488" left="54" width="380" height="103" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-243_2.jpg"/>
<image top="807" left="54" width="785" height="231" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-243_3.jpg"/>
<text top="57" left="54" width="758" height="20" font="2">The	next	thing	you	need	to	do	is	isolate	the	Dog,	Cat,	and	Human	classes	into	their	own</text>
<text top="83" left="54" width="221" height="20" font="2">files.	To	do	so,	create	the	</text>
<text top="88" left="275" width="52" height="14" font="5">Dog.h</text>
<text top="83" left="327" width="11" height="20" font="2">,	</text>
<text top="88" left="338" width="52" height="14" font="5">Cat.h</text>
<text top="83" left="390" width="47" height="20" font="2">,	and	</text>
<text top="88" left="437" width="73" height="14" font="5">Human.h</text>
<text top="83" left="510" width="302" height="20" font="2">	files	and	add	them	to	your	project.</text>
<text top="120" left="54" width="587" height="20" font="2">Let’s	start	with	the	Dog	class,	as	shown	in	the	following	screenshot:</text>
<text top="430" left="54" width="733" height="20" font="2">If	you	use	exactly	this	setup	and	try	to	compile	and	run	your	project,	you	will	see	the</text>
<text top="456" left="54" width="711" height="19" font="3"><b>‘Mammal’	:	‘class’	type	redefinition</b>	error,	as	shown	in	the	following	screenshot:</text>
<text top="660" left="54" width="254" height="20" font="2">What	this	error	means	is	that	</text>
<text top="665" left="308" width="83" height="14" font="5">Mammal.h</text>
<text top="660" left="391" width="418" height="20" font="2">	has	been	included	twice	in	your	project,	once	in</text>
<text top="690" left="54" width="104" height="14" font="5">Source.cpp</text>
<text top="686" left="158" width="159" height="20" font="2">	and	then	again	in	</text>
<text top="690" left="316" width="52" height="14" font="5">Dog.h</text>
<text top="686" left="368" width="461" height="20" font="2">.	This	means	effectively	two	versions	of	the	Mammal</text>
<text top="712" left="54" width="683" height="20" font="2">class	got	added	to	the	compiling	code,	and	C++	is	unsure	which	version	to	use.</text>
<text top="749" left="54" width="785" height="20" font="2">There	are	a	few	ways	to	fix	this	issue,	but	the	easiest	(and	the	one	that	Unreal	Engine	uses)</text>
<text top="775" left="54" width="52" height="20" font="2">is	the	</text>
<text top="779" left="106" width="124" height="14" font="5">#pragma	once</text>
<text top="775" left="230" width="396" height="20" font="2">	macro,	as	shown	in	the	following	screenshot:</text>
<text top="1107" left="54" width="83" height="20" font="2">We	write	</text>
<text top="1112" left="137" width="124" height="14" font="5">#pragma	once</text>
<text top="1107" left="262" width="492" height="20" font="2">	at	the	top	of	each	header	file.	This	way,	the	second	time	</text>
<text top="1112" left="754" width="83" height="14" font="5">Mammal.h</text>
<text top="1133" left="54" width="747" height="20" font="2">is	included,	the	compiler	doesn’t	copy	and	paste	its	contents	again,	since	it	already	has</text>
<text top="1159" left="54" width="754" height="20" font="2">been	included	before,	and	its	content	is	actually	already	in	the	compiling	group	of	files.</text>
</page>
<page number="244" position="absolute" top="0" left="0" height="1262" width="892">
<image top="116" left="54" width="785" height="171" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-244_1.jpg"/>
<text top="57" left="54" width="194" height="20" font="2">Do	the	same	thing	for	</text>
<text top="62" left="248" width="52" height="14" font="5">Cat.h</text>
<text top="57" left="299" width="42" height="20" font="2">	and	</text>
<text top="62" left="341" width="73" height="14" font="5">Human.h</text>
<text top="57" left="414" width="53" height="20" font="2">,	then	</text>
<text top="62" left="467" width="73" height="14" font="5">include</text>
<text top="57" left="540" width="182" height="20" font="2">	them	both	into	your	</text>
<text top="62" left="721" width="104" height="14" font="5">Source.cpp</text>
<text top="83" left="54" width="137" height="20" font="2">file	where	your	</text>
<text top="88" left="191" width="62" height="14" font="5">main()</text>
<text top="83" left="253" width="148" height="20" font="2">	function	resides.</text>
<text top="323" left="299" width="295" height="20" font="4"><i>Diagram	with	all	classes	included</i></text>
<text top="392" left="54" width="757" height="20" font="2">Now	that	we’ve	included	all	classes	into	your	project,	the	code	should	compile	and	run.</text>
</page>
<page number="245" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="168" height="32" font="7"><b>.h	and	.cpp</b></text>
<text top="110" left="54" width="713" height="20" font="2">The	next	level	of	organization	is	to	leave	the	class	declarations	in	the	header	files	(</text>
<text top="115" left="767" width="21" height="14" font="5">.h</text>
<text top="110" left="788" width="44" height="20" font="2">)	and</text>
<text top="136" left="54" width="551" height="20" font="2">put	the	actual	function	implementation	bodies	inside	some	new	</text>
<text top="141" left="605" width="41" height="14" font="5">.cpp</text>
<text top="136" left="646" width="150" height="20" font="2">	files.	Also,	leave</text>
<text top="162" left="54" width="247" height="20" font="2">existing	members	inside	the	</text>
<text top="167" left="301" width="124" height="14" font="5">class	Mammal</text>
<text top="162" left="425" width="107" height="20" font="2">	declaration.</text>
<text top="199" left="54" width="425" height="20" font="2">For	each	class,	perform	the	following	OPS:</text>
<text top="236" left="69" width="386" height="20" font="2">1.	 Delete	all	function	bodies	(code	between	</text>
<text top="240" left="456" width="10" height="14" font="5">{</text>
<text top="236" left="466" width="42" height="20" font="2">	and	</text>
<text top="240" left="508" width="10" height="14" font="5">}</text>
<text top="236" left="518" width="255" height="20" font="2">)	and	replace	them	with	just	a</text>
<text top="262" left="97" width="167" height="20" font="2">semicolon.	For	the	</text>
<text top="266" left="264" width="62" height="14" font="5">Mammal</text>
<text top="262" left="326" width="292" height="20" font="2">	class,	this	would	look	as	follows:</text>
<text top="305" left="97" width="114" height="14" font="5">//	Mammal.h</text>
<text top="325" left="97" width="124" height="14" font="5">#pragma	once</text>
<text top="346" left="97" width="124" height="14" font="5">class	Mammal</text>
<text top="366" left="97" width="10" height="14" font="5">{</text>
<text top="387" left="97" width="104" height="14" font="5">protected:</text>
<text top="407" left="97" width="93" height="14" font="5">		int	hp;</text>
<text top="428" left="97" width="155" height="14" font="5">		double	speed;</text>
<text top="469" left="97" width="73" height="14" font="5">public:</text>
<text top="490" left="97" width="114" height="14" font="5">		Mammal();</text>
<text top="510" left="97" width="124" height="14" font="5">		~Mammal();</text>
<text top="531" left="97" width="176" height="14" font="5">		void	breathe();</text>
<text top="551" left="97" width="228" height="14" font="5">		virtual	void	talk();</text>
<text top="572" left="97" width="290" height="14" font="5">		//	pure	virtual	function,	</text>
<text top="592" left="97" width="269" height="14" font="5">		virtual	void	walk()	=	0;</text>
<text top="613" left="97" width="21" height="14" font="5">};</text>
<text top="644" left="69" width="146" height="20" font="2">2.	 Create	a	new	</text>
<text top="648" left="215" width="41" height="14" font="5">.cpp</text>
<text top="644" left="257" width="96" height="20" font="2">	file	called	</text>
<text top="648" left="353" width="104" height="14" font="5">Mammal.cpp</text>
<text top="644" left="457" width="337" height="20" font="2">.	Then	simply	put	the	member	function</text>
<text top="670" left="97" width="190" height="20" font="2">bodies	inside	this	file:</text>
<text top="713" left="97" width="135" height="14" font="5">//	Mammal.cpp</text>
<text top="734" left="97" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="754" left="97" width="207" height="14" font="5">using	namespace	std;</text>
<text top="795" left="97" width="197" height="14" font="5">#include	&#34;Mammal.h&#34;</text>
<text top="816" left="97" width="663" height="14" font="5">Mammal::Mammal()	//	Notice	use	of	::	(scope	resolution	operator)</text>
<text top="836" left="97" width="10" height="14" font="5">{</text>
<text top="857" left="97" width="114" height="14" font="5">		hp	=	100;</text>
<text top="877" left="97" width="145" height="14" font="5">		speed	=	1.0;</text>
<text top="898" left="97" width="425" height="14" font="5">		cout	&lt;&lt;	&#34;A	mammal	is	created!&#34;	&lt;&lt;	endl;</text>
<text top="918" left="97" width="10" height="14" font="5">}</text>
<text top="939" left="97" width="176" height="14" font="5">Mammal::~Mammal()</text>
<text top="959" left="97" width="10" height="14" font="5">{</text>
<text top="980" left="97" width="425" height="14" font="5">		cout	&lt;&lt;	&#34;A	mammal	has	fallen!&#34;	&lt;&lt;	endl;</text>
<text top="1001" left="97" width="10" height="14" font="5">}</text>
<text top="1021" left="97" width="228" height="14" font="5">void	Mammal::breathe()</text>
<text top="1042" left="97" width="10" height="14" font="5">{</text>
<text top="1062" left="97" width="466" height="14" font="5">		cout	&lt;&lt;	&#34;Breathe	in..	breathe	out&#34;	&lt;&lt;	endl;</text>
<text top="1083" left="97" width="10" height="14" font="5">}</text>
<text top="1103" left="97" width="197" height="14" font="5">void	Mammal::talk()</text>
<text top="1124" left="97" width="10" height="14" font="5">{</text>
<text top="1144" left="97" width="601" height="14" font="5">		cout	&lt;&lt;	&#34;Mammal	talk..	override	this	function!&#34;	&lt;&lt;	endl;</text>
<text top="1165" left="97" width="10" height="14" font="5">}</text>
</page>
<page number="246" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="739" height="20" font="2">It	is	important	to	note	the	use	of	the	class	name	and	scope	resolution	operator	(double</text>
<text top="83" left="54" width="725" height="20" font="2">colon)	when	declaring	the	member	function	bodies.	We	prefix	all	member	functions</text>
<text top="109" left="54" width="146" height="20" font="2">belonging	to	the	</text>
<text top="114" left="200" width="62" height="14" font="5">Mammal</text>
<text top="109" left="262" width="97" height="20" font="2">	class	with	</text>
<text top="114" left="358" width="83" height="14" font="5">Mammal::</text>
<text top="109" left="441" width="5" height="20" font="2">.</text>
<text top="146" left="54" width="767" height="20" font="2">Notice	how	the	purely	virtual	function	does	not	have	a	body;	it’s	not	supposed	to!	Purely</text>
<text top="172" left="54" width="681" height="20" font="2">virtual	functions	are	simply	declared	(and	initialized	to	0)	in	the	base	class,	but</text>
<text top="198" left="54" width="319" height="20" font="2">implemented	later	in	derived	classes.</text>
</page>
<page number="247" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="128" height="32" font="7"><b>Exercise</b></text>
<text top="110" left="54" width="703" height="20" font="2">Complete	the	separation	of	the	different	creature	classes	above	into	class	header	(</text>
<text top="115" left="757" width="21" height="14" font="5">.h</text>
<text top="110" left="778" width="44" height="20" font="2">)	and</text>
<text top="136" left="54" width="186" height="20" font="2">class	definition	files	(</text>
<text top="141" left="240" width="41" height="14" font="5">.cpp</text>
<text top="136" left="282" width="7" height="20" font="2">)</text>
</page>
<page number="248" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="249" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="182" height="39" font="0"><b>Summary</b></text>
<text top="120" left="54" width="726" height="20" font="2">You	learned	about	objects	in	C++;	they	are	pieces	of	code	that	tie	data	members	and</text>
<text top="146" left="54" width="483" height="20" font="2">member	functions	together	into	a	bundle	of	code	called	</text>
<text top="150" left="537" width="52" height="14" font="5">class</text>
<text top="146" left="588" width="29" height="20" font="2">	or	</text>
<text top="150" left="617" width="62" height="14" font="5">struct</text>
<text top="146" left="679" width="146" height="20" font="2">.	Object-oriented</text>
<text top="172" left="54" width="656" height="20" font="2">programming	means	that	your	code	will	be	filled	with	things	instead	of	just	</text>
<text top="176" left="710" width="31" height="14" font="5">int</text>
<text top="172" left="741" width="11" height="20" font="2">,	</text>
<text top="176" left="752" width="52" height="14" font="5">float</text>
<text top="172" left="804" width="5" height="20" font="2">,</text>
<text top="198" left="54" width="37" height="20" font="2">and	</text>
<text top="202" left="91" width="41" height="14" font="5">char</text>
<text top="198" left="132" width="440" height="20" font="2">	variables.	You	will	have	a	variable	that	represents	</text>
<text top="202" left="572" width="62" height="14" font="5">Barrel</text>
<text top="198" left="634" width="188" height="20" font="2">,	another	variable	that</text>
<text top="224" left="54" width="93" height="20" font="2">represents	</text>
<text top="228" left="147" width="62" height="14" font="5">Player</text>
<text top="224" left="209" width="591" height="20" font="2">,	and	so	on,	that	is,	a	variable	to	represent	every	entity	in	your	game.</text>
<text top="250" left="54" width="781" height="20" font="2">You	will	be	able	to	reuse	code	by	using	inheritance;	if	you	had	to	code	implementations	of</text>
<text top="280" left="54" width="31" height="14" font="5">Cat</text>
<text top="276" left="85" width="42" height="20" font="2">	and	</text>
<text top="280" left="127" width="31" height="14" font="5">Dog</text>
<text top="276" left="158" width="487" height="20" font="2">,	you	can	code	a	common	functionality	in	the	base	class	</text>
<text top="280" left="645" width="62" height="14" font="5">Mammal</text>
<text top="276" left="707" width="79" height="20" font="2">.	We	also</text>
<text top="302" left="54" width="754" height="20" font="2">discussed	encapsulation	and	how	it	is	easier	and	more	efficient	to	program	objects	such</text>
<text top="327" left="54" width="365" height="20" font="2">that	they	maintain	their	own	internal	state.</text>
</page>
<page number="250" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="251" position="absolute" top="0" left="0" height="1262" width="892">
<image top="625" left="54" width="486" height="265" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-251_1.jpg"/>
<text top="64" left="54" width="742" height="39" font="0"><b>Chapter	7.	Dynamic	Memory	Allocation</b></text>
<text top="120" left="54" width="740" height="20" font="2">In	the	previous	chapter,	we	talked	about	class	definitions	and	how	to	devise	your	own</text>
<text top="146" left="54" width="751" height="20" font="2">custom	class.	We	discussed	how	by	devising	our	own	custom	classes,	we	can	construct</text>
<text top="172" left="54" width="553" height="20" font="2">variables	that	represented	entities	within	your	game	or	program.</text>
<text top="209" left="54" width="778" height="20" font="2">In	this	chapter,	we	will	talk	about	dynamic	memory	allocations	and	how	to	create	space	in</text>
<text top="235" left="54" width="262" height="20" font="2">memory	for	groups	of	objects.</text>
<text top="271" left="54" width="390" height="20" font="2">Assume	that	we	have	a	simplified	version	of	</text>
<text top="276" left="444" width="124" height="14" font="5">class	Player</text>
<text top="271" left="568" width="197" height="20" font="2">,	as	before,	with	only	a</text>
<text top="297" left="54" width="246" height="20" font="2">constructor	and	a	destructor:</text>
<text top="340" left="54" width="124" height="14" font="5">class	Player</text>
<text top="361" left="54" width="10" height="14" font="5">{</text>
<text top="382" left="54" width="145" height="14" font="5">		string	name;</text>
<text top="402" left="54" width="93" height="14" font="5">		int	hp;</text>
<text top="423" left="54" width="73" height="14" font="5">public:</text>
<text top="443" left="54" width="456" height="14" font="5">		Player(){	cout	&lt;&lt;	&#34;Player	born&#34;	&lt;&lt;	endl;	}</text>
<text top="464" left="54" width="466" height="14" font="5">		~Player(){	cout	&lt;&lt;	&#34;Player	died&#34;	&lt;&lt;	endl;	}</text>
<text top="484" left="54" width="21" height="14" font="5">};</text>
<text top="515" left="54" width="771" height="20" font="2">We	talked	earlier	about	the	<i>scope</i>	of	a	variable	in	C++;	to	recap,	the	scope	of	a	variable	is</text>
<text top="541" left="54" width="735" height="20" font="2">the	section	of	the	program	where	that	variable	can	be	used.	The	scope	of	a	variable	is</text>
<text top="567" left="54" width="745" height="20" font="2">generally	inside	the	block	in	which	it	was	declared.	A	block	is	just	any	section	of	code</text>
<text top="593" left="54" width="724" height="20" font="2">contained	between	{	and	}.	Here	is	a	sample	program	that	illustrates	variable	scope:</text>
<text top="927" left="69" width="755" height="20" font="4"><i>In	this	sample	program,	the	x	variable	has	scope	through	all	of	main().	The	y	variable’s</i></text>
<text top="953" left="312" width="270" height="20" font="4"><i>scope	is	only	inside	the	if	block</i></text>
<text top="1022" left="54" width="733" height="20" font="2">We	mentioned	previously	that	in	general	variables	are	destroyed	when	they	go	out	of</text>
<text top="1048" left="54" width="406" height="20" font="2">scope.	Let’s	test	this	idea	out	with	instances	of	</text>
<text top="1052" left="460" width="124" height="14" font="5">class	Player</text>
<text top="1048" left="585" width="6" height="20" font="2">:</text>
<text top="1091" left="54" width="104" height="14" font="5">int	main()</text>
<text top="1112" left="54" width="10" height="14" font="5">{</text>
<text top="1132" left="54" width="342" height="14" font="5">		Player	player;	//	&#34;Player	born&#34;</text>
<text top="1153" left="54" width="663" height="14" font="5">}																//	&#34;Player	died&#34;	-	player	object	destroyed	here</text>
<text top="1184" left="54" width="352" height="20" font="2">The	output	of	this	program	is	as	follows:</text>
</page>
<page number="252" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="114" height="14" font="5">Player	born</text>
<text top="78" left="54" width="114" height="14" font="5">Player	died</text>
<text top="109" left="54" width="771" height="20" font="2">The	destructor	for	the	player	object	is	called	at	the	end	of	the	player	object’s	scope.	Since</text>
<text top="135" left="54" width="780" height="20" font="2">the	scope	of	a	variable	is	the	block	within	which	it	is	defined	in	the	three	lines	of	code,	the</text>
<text top="165" left="54" width="62" height="14" font="5">Player</text>
<text top="161" left="116" width="464" height="20" font="2">	object	would	be	destroyed	immediately	at	the	end	of	</text>
<text top="165" left="580" width="62" height="14" font="5">main()</text>
<text top="161" left="642" width="176" height="20" font="2">,	when	it	goes	out	of</text>
<text top="187" left="54" width="55" height="20" font="2">scope.</text>
</page>
<page number="253" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="520" height="39" font="0"><b>Dynamic	memory	allocation</b></text>
<text top="120" left="54" width="228" height="20" font="2">Now,	let’s	try	allocating	a	</text>
<text top="124" left="282" width="62" height="14" font="5">Player</text>
<text top="120" left="344" width="371" height="20" font="2">	object	dynamically.	What	does	that	mean?</text>
<text top="157" left="54" width="100" height="20" font="2">We	use	the	</text>
<text top="161" left="154" width="31" height="14" font="5">new</text>
<text top="157" left="185" width="200" height="20" font="2">	keyword	to	allocate	it!</text>
<text top="200" left="54" width="104" height="14" font="5">int	main()</text>
<text top="221" left="54" width="10" height="14" font="5">{</text>
<text top="241" left="54" width="476" height="14" font="5">		//	&#34;dynamic	allocation&#34;	–	using	keyword	new!</text>
<text top="262" left="54" width="653" height="14" font="5">		//	this	style	of	allocation	means	that	the	player	object	will</text>
<text top="282" left="54" width="653" height="14" font="5">		//	NOT	be	deleted	automatically	at	the	end	of	the	block	where</text>
<text top="303" left="54" width="218" height="14" font="5">		//	it	was	declared!</text>
<text top="323" left="54" width="311" height="14" font="5">Player	*player	=	new	Player();</text>
<text top="344" left="54" width="280" height="14" font="5">}	//	NO	automatic	deletion!</text>
<text top="375" left="54" width="352" height="20" font="2">The	output	of	this	program	is	as	follows:</text>
<text top="418" left="54" width="114" height="14" font="5">Player	born</text>
<text top="450" left="54" width="659" height="20" font="2">The	player	does	not	die!	How	do	we	kill	the	player?	We	must	explicitly	call	</text>
<text top="454" left="713" width="62" height="14" font="5">delete</text>
<text top="450" left="776" width="59" height="20" font="2">	on	the</text>
<text top="480" left="54" width="62" height="14" font="5">player</text>
<text top="475" left="116" width="71" height="20" font="2">	pointer.</text>
</page>
<page number="254" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="299" height="32" font="7"><b>The	delete	keyword</b></text>
<text top="110" left="54" width="39" height="20" font="2">The	</text>
<text top="115" left="93" width="62" height="14" font="5">delete</text>
<text top="110" left="155" width="656" height="20" font="2">	operator	invokes	the	destructor	on	the	object	being	deleted,	as	shown	in	the</text>
<text top="136" left="54" width="136" height="20" font="2">following	code:</text>
<text top="180" left="54" width="104" height="14" font="5">int	main()</text>
<text top="200" left="54" width="10" height="14" font="5">{</text>
<text top="221" left="54" width="476" height="14" font="5">		//	&#34;dynamic	allocation&#34;	–	using	keyword	new!</text>
<text top="241" left="54" width="331" height="14" font="5">		Player	*player	=	new	Player();</text>
<text top="262" left="54" width="425" height="14" font="5">		delete	player;	//	deletion	invokes	dtor</text>
<text top="282" left="54" width="10" height="14" font="5">}</text>
<text top="313" left="54" width="347" height="20" font="2">The	output	of	the	program	is	as	follows:</text>
<text top="357" left="54" width="114" height="14" font="5">Player	born</text>
<text top="377" left="54" width="114" height="14" font="5">Player	died</text>
<text top="408" left="54" width="732" height="20" font="2">So,	only	“normal”	(or	“automatic”	also	called	as	non-pointer	type)	variable	types	get</text>
<text top="434" left="54" width="745" height="20" font="2">destroyed	at	the	end	of	the	block	in	which	they	were	declared.	Pointer	types	(variables</text>
<text top="460" left="54" width="122" height="20" font="2">declared	with	</text>
<text top="465" left="176" width="10" height="14" font="5">*</text>
<text top="460" left="187" width="42" height="20" font="2">	and	</text>
<text top="465" left="229" width="31" height="14" font="5">new</text>
<text top="460" left="260" width="568" height="20" font="2">)	are	not	automatically	destroyed	even	when	they	go	out	of	scope.</text>
<text top="497" left="54" width="777" height="20" font="2">What	is	the	use	of	this?	Dynamic	allocations	let	you	control	when	an	object	is	created	and</text>
<text top="523" left="54" width="352" height="20" font="2">destroyed.	This	will	come	in	handy	later.</text>
</page>
<page number="255" position="absolute" top="0" left="0" height="1262" width="892">
<image top="794" left="54" width="676" height="60" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-255_1.jpg"/>
<text top="61" left="54" width="217" height="32" font="7"><b>Memory	leaks</b></text>
<text top="110" left="54" width="402" height="20" font="2">So	dynamically	allocated	objects	created	with	</text>
<text top="115" left="456" width="31" height="14" font="5">new</text>
<text top="110" left="487" width="320" height="20" font="2">	are	not	automatically	deleted,	unless</text>
<text top="136" left="54" width="161" height="20" font="2">you	explicitly	call	</text>
<text top="141" left="215" width="62" height="14" font="5">delete</text>
<text top="136" left="277" width="491" height="20" font="2">	on	them.	There	is	a	risk	here!	It	is	called	a	<i>memory	leak</i>.</text>
<text top="162" left="54" width="460" height="20" font="2">Memory	leaks	happen	when	an	object	allocated	with	</text>
<text top="167" left="514" width="31" height="14" font="5">new</text>
<text top="162" left="545" width="256" height="20" font="2">	is	not	ever	deleted.	What	can</text>
<text top="188" left="54" width="581" height="20" font="2">happen	is	that	if	a	lot	of	objects	in	your	program	are	allocated	with	</text>
<text top="192" left="635" width="31" height="14" font="5">new</text>
<text top="188" left="666" width="158" height="20" font="2">	and	then	you	stop</text>
<text top="214" left="54" width="748" height="20" font="2">using	them,	your	computer	will	run	out	of	memory	eventually	due	to	memory	leakage.</text>
<text top="251" left="54" width="532" height="20" font="2">Here	is	a	ridiculous	sample	program	to	illustrate	the	problem:</text>
<text top="294" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="315" left="54" width="176" height="14" font="5">#include	&lt;string&gt;</text>
<text top="335" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="356" left="54" width="124" height="14" font="5">class	Player</text>
<text top="376" left="54" width="10" height="14" font="5">{</text>
<text top="397" left="54" width="145" height="14" font="5">		string	name;</text>
<text top="417" left="54" width="93" height="14" font="5">		int	hp;</text>
<text top="438" left="54" width="73" height="14" font="5">public:</text>
<text top="458" left="54" width="456" height="14" font="5">		Player(){	cout	&lt;&lt;	&#34;Player	born&#34;	&lt;&lt;	endl;	}</text>
<text top="479" left="54" width="466" height="14" font="5">		~Player(){	cout	&lt;&lt;	&#34;Player	died&#34;	&lt;&lt;	endl;	}</text>
<text top="499" left="54" width="21" height="14" font="5">};</text>
<text top="540" left="54" width="104" height="14" font="5">int	main()</text>
<text top="561" left="54" width="10" height="14" font="5">{</text>
<text top="581" left="54" width="394" height="14" font="5">		while(	true	)	//	keep	going	forever,</text>
<text top="602" left="54" width="31" height="14" font="5">		{</text>
<text top="622" left="54" width="145" height="14" font="5">				//	alloc..</text>
<text top="643" left="54" width="352" height="14" font="5">				Player	*player	=	new	Player();</text>
<text top="663" left="54" width="383" height="14" font="5">				//	without	delete	==	Memory	Leak!</text>
<text top="684" left="54" width="31" height="14" font="5">		}</text>
<text top="705" left="54" width="10" height="14" font="5">}</text>
<text top="736" left="54" width="763" height="20" font="2">This	program,	if	left	to	run	long	enough,	will	eventually	gobble	the	computer’s	memory,</text>
<text top="762" left="54" width="326" height="20" font="2">as	shown	in	the	following	screenshot:</text>
<text top="891" left="282" width="329" height="20" font="4"><i>2	GB	of	RAM	used	for	Player	objects!</i></text>
<text top="961" left="54" width="769" height="20" font="2">Note	that	no	one	ever	intends	to	write	a	program	with	this	type	of	problem	in	it!	Memory</text>
<text top="986" left="54" width="755" height="20" font="2">leak	problems	happen	accidentally.	You	must	take	care	of	your	memory	allocations	and</text>
<text top="1017" left="54" width="62" height="14" font="5">delete</text>
<text top="1012" left="116" width="285" height="20" font="2">	objects	that	are	no	longer	in	use.</text>
</page>
<page number="256" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="257" position="absolute" top="0" left="0" height="1262" width="892">
<image top="514" left="54" width="486" height="157" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-257_1.jpg"/>
<text top="64" left="54" width="279" height="39" font="0"><b>Regular	arrays</b></text>
<text top="120" left="54" width="382" height="20" font="2">An	array	in	C++	can	be	declared	as	follows:</text>
<text top="163" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="184" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="204" left="54" width="104" height="14" font="5">int	main()</text>
<text top="225" left="54" width="10" height="14" font="5">{</text>
<text top="245" left="54" width="559" height="14" font="5">		int	array[	5	];		//	declare	an	&#34;array&#34;	of	5	integers</text>
<text top="266" left="54" width="497" height="14" font="5">																			//	fill	slots	0-4	with	values</text>
<text top="286" left="54" width="155" height="14" font="5">array[	0	]	=	1;</text>
<text top="307" left="54" width="155" height="14" font="5">array[	1	]	=	2;</text>
<text top="328" left="54" width="155" height="14" font="5">array[	2	]	=	3;</text>
<text top="348" left="54" width="155" height="14" font="5">array[	3	]	=	4;</text>
<text top="369" left="54" width="155" height="14" font="5">array[	4	]	=	5;</text>
<text top="389" left="54" width="280" height="14" font="5">		//	print	out	the	contents</text>
<text top="410" left="54" width="435" height="14" font="5">		for(	int	index	=	0;	index	&lt;	5;	index++	)</text>
<text top="430" left="54" width="363" height="14" font="5">				cout	&lt;&lt;	array[	index	]	&lt;&lt;	endl;</text>
<text top="451" left="54" width="10" height="14" font="5">}</text>
<text top="482" left="54" width="459" height="20" font="2">The	way	this	looks	in	memory	is	something	like	this:</text>
<text top="740" left="54" width="159" height="20" font="2">That	is,	inside	the	</text>
<text top="745" left="213" width="52" height="14" font="5">array</text>
<text top="740" left="265" width="539" height="20" font="2">	variable	are	five	slots	or	elements.	Inside	each	of	the	slots	is	a</text>
<text top="766" left="54" width="67" height="20" font="2">regular	</text>
<text top="770" left="121" width="31" height="14" font="5">int</text>
<text top="766" left="152" width="80" height="20" font="2">	variable.</text>
</page>
<page number="258" position="absolute" top="0" left="0" height="1262" width="892">
<image top="243" left="54" width="432" height="158" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-258_1.jpg"/>
<text top="61" left="54" width="261" height="32" font="7"><b>The	array	syntax</b></text>
<text top="110" left="54" width="293" height="20" font="2">So,	how	do	you	access	one	of	the	</text>
<text top="115" left="347" width="31" height="14" font="5">int</text>
<text top="110" left="378" width="387" height="20" font="2">	values	in	the	array?	To	access	the	individual</text>
<text top="136" left="54" width="731" height="20" font="2">elements	of	an	array,	we	use	square	brackets,	as	shown	in	the	following	line	of	code:</text>
<text top="180" left="54" width="166" height="14" font="5">array[	0	]	=	10;</text>
<text top="211" left="54" width="711" height="20" font="2">The	preceding	line	of	code	would	change	the	element	at	slot	0	of	the	array	to	a	10:</text>
<text top="470" left="54" width="665" height="20" font="2">In	general,	to	get	to	a	particular	slot	of	an	array,	you	will	write	the	following:</text>
<text top="513" left="54" width="476" height="14" font="5">array[	slotNumber	]	=	value	to	put	into	array;</text>
<text top="545" left="54" width="767" height="20" font="2">Keep	in	mind	that	array	slots	are	always	indexed	starting	from	0.	To	get	into	the	first	slot</text>
<text top="571" left="54" width="143" height="20" font="2">of	the	array,	use	</text>
<text top="575" left="197" width="83" height="14" font="5">array[0]</text>
<text top="571" left="280" width="276" height="20" font="2">.	The	second	slot	of	the	array	is	</text>
<text top="575" left="556" width="83" height="14" font="5">array[1]</text>
<text top="571" left="639" width="46" height="20" font="2">	(not	</text>
<text top="575" left="685" width="83" height="14" font="5">array[2]</text>
<text top="571" left="768" width="52" height="20" font="2">).	The</text>
<text top="596" left="54" width="263" height="20" font="2">final	slot	of	the	array	above	is	</text>
<text top="601" left="317" width="83" height="14" font="5">array[4]</text>
<text top="596" left="400" width="46" height="20" font="2">	(not	</text>
<text top="601" left="446" width="83" height="14" font="5">array[5]</text>
<text top="596" left="528" width="57" height="20" font="2">).	The	</text>
<text top="601" left="585" width="83" height="14" font="5">array[5]</text>
<text top="596" left="668" width="160" height="20" font="2">	data	type	is	out	of</text>
<text top="622" left="54" width="767" height="20" font="2">bounds	of	the	array!	(There	is	no	slot	with	index	5	in	the	preceding	diagram.	The	highest</text>
<text top="648" left="54" width="97" height="20" font="2">index	is	4.)</text>
<text top="685" left="54" width="726" height="20" font="2">Don’t	go	out	of	bounds	of	the	array!	It	might	work	some	times,	but	other	times	your</text>
<text top="711" left="54" width="730" height="20" font="2">program	will	crash	with	a	<b>memory	access	violation</b>	(accessing	memory	that	doesn’t</text>
<text top="737" left="54" width="727" height="20" font="2">belong	to	your	program).	In	general,	accessing	memory	that	does	not	belong	to	your</text>
<text top="763" left="54" width="781" height="20" font="2">program	is	going	to	cause	your	app	to	crash,	and	if	it	doesn’t	do	so	immediately,	there	will</text>
<text top="789" left="54" width="742" height="20" font="2">be	a	hidden	bug	in	your	program	that	only	causes	problems	once	in	a	while.	You	must</text>
<text top="815" left="54" width="364" height="20" font="2">always	be	careful	when	indexing	an	array.</text>
<text top="851" left="54" width="727" height="20" font="2">Arrays	are	built	into	C++,	that	is,	you	don’t	need	to	include	anything	special	to	have</text>
<text top="877" left="54" width="718" height="20" font="2">immediate	use	of	arrays.	You	can	have	arrays	of	any	type	of	data	that	you	want,	for</text>
<text top="903" left="54" width="165" height="20" font="2">example,	arrays	of	</text>
<text top="908" left="219" width="31" height="14" font="5">int</text>
<text top="903" left="250" width="11" height="20" font="2">,	</text>
<text top="908" left="261" width="62" height="14" font="5">double</text>
<text top="903" left="323" width="11" height="20" font="2">,	</text>
<text top="908" left="334" width="62" height="14" font="5">string</text>
<text top="903" left="396" width="365" height="20" font="2">,	and	even	your	own	custom	object	types	(</text>
<text top="908" left="761" width="62" height="14" font="5">Player</text>
<text top="903" left="824" width="13" height="20" font="2">).</text>
</page>
<page number="259" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="128" height="32" font="7"><b>Exercise</b></text>
<text top="110" left="69" width="744" height="20" font="2">1.	 Create	an	array	of	five	strings	and	put	inside	it	some	names	(made	up	or	random,	it</text>
<text top="136" left="97" width="136" height="20" font="2">doesn’t	matter).</text>
<text top="162" left="69" width="318" height="20" font="2">2.	 Create	an	array	of	doubles	called	</text>
<text top="167" left="387" width="52" height="14" font="5">temps</text>
<text top="162" left="439" width="399" height="20" font="2">	with	three	elements	and	store	the	temperature</text>
<text top="188" left="97" width="231" height="20" font="2">for	the	last	three	days	in	it.</text>
</page>
<page number="260" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="141" height="32" font="7"><b>Solutions</b></text>
<text top="110" left="69" width="581" height="20" font="2">1.	 The	following	is	a	sample	program	with	an	array	of	five	strings:</text>
<text top="154" left="97" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="174" left="97" width="176" height="14" font="5">#include	&lt;string&gt;</text>
<text top="195" left="97" width="207" height="14" font="5">using	namespace	std;</text>
<text top="215" left="97" width="104" height="14" font="5">int	main()</text>
<text top="236" left="97" width="10" height="14" font="5">{</text>
<text top="256" left="97" width="580" height="14" font="5">		string	array[	5	];		//	declare	an	&#34;array&#34;	of	5	strings</text>
<text top="277" left="97" width="528" height="14" font="5">																						//	fill	slots	0-4	with	values</text>
<text top="297" left="97" width="331" height="14" font="5">array[	0	]	=	&#34;Mariam	McGonical&#34;;</text>
<text top="318" left="97" width="290" height="14" font="5">array[	1	]	=	&#34;Wesley	Snice&#34;;</text>
<text top="338" left="97" width="300" height="14" font="5">array[	2	]	=	&#34;Kate	Winslett&#34;;</text>
<text top="359" left="97" width="269" height="14" font="5">array[	3	]	=	&#34;Erika	Badu&#34;;</text>
<text top="379" left="97" width="249" height="14" font="5">array[	4	]	=	&#34;Mohammad&#34;;</text>
<text top="400" left="97" width="280" height="14" font="5">		//	print	out	the	contents</text>
<text top="420" left="97" width="435" height="14" font="5">		for(	int	index	=	0;	index	&lt;	5;	index++	)</text>
<text top="441" left="97" width="363" height="14" font="5">				cout	&lt;&lt;	array[	index	]	&lt;&lt;	endl;</text>
<text top="461" left="97" width="10" height="14" font="5">}</text>
<text top="493" left="69" width="295" height="20" font="2">2.	 The	following	is	just	the	array:</text>
<text top="536" left="97" width="186" height="14" font="5">double	temps[	3	];</text>
<text top="557" left="97" width="300" height="14" font="5">//	fill	slots	0-2	with	values</text>
<text top="577" left="97" width="155" height="14" font="5">temps[	0	]	=	0;</text>
<text top="598" left="97" width="176" height="14" font="5">temps[	1	]	=	4.5;</text>
<text top="618" left="97" width="166" height="14" font="5">temps[	2	]	=	11;</text>
</page>
<page number="261" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="262" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="762" height="39" font="0"><b>C++	style	dynamic	size	arrays	(new[]	and</b></text>
<text top="116" left="54" width="151" height="39" font="0"><b>delete[])</b></text>
<text top="172" left="54" width="782" height="20" font="2">It	probably	occurred	to	you	that	we	won’t	always	know	the	size	of	an	array	at	the	start	of	a</text>
<text top="198" left="54" width="563" height="20" font="2">program.	We	would	need	to	allocate	the	array’s	size	dynamically.</text>
<text top="235" left="54" width="644" height="20" font="2">However,	if	you’ve	tried	it,	you	might	have	noticed	that	this	doesn’t	work!</text>
<text top="271" left="54" width="180" height="20" font="2">Let’s	try	and	use	the	</text>
<text top="276" left="234" width="31" height="14" font="5">cin</text>
<text top="271" left="265" width="571" height="20" font="2">	command	to	take	in	an	array	size	from	the	user.	Let’s	ask	the	user</text>
<text top="297" left="54" width="589" height="20" font="2">how	big	he	wants	his	array	and	try	to	create	one	for	him	of	that	size:</text>
<text top="340" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="361" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="382" left="54" width="104" height="14" font="5">int	main()</text>
<text top="402" left="54" width="10" height="14" font="5">{</text>
<text top="423" left="54" width="300" height="14" font="5">		cout	&lt;&lt;	&#34;How	big?&#34;	&lt;&lt;	endl;</text>
<text top="443" left="54" width="559" height="14" font="5">		int	size;							//	try	and	use	a	variable	for	size..</text>
<text top="464" left="54" width="404" height="14" font="5">		cin	&gt;&gt;	size;				//	get	size	from	user</text>
<text top="484" left="54" width="518" height="14" font="5">		int	array[	size	];		//	get	error:	&#34;unknown	size&#34;</text>
<text top="505" left="54" width="10" height="14" font="5">}</text>
<text top="536" left="54" width="234" height="20" font="2">We	get	the	following	error:</text>
<text top="579" left="54" width="363" height="14" font="5">error	C2133:	'array'	:	unknown	size</text>
<text top="611" left="54" width="761" height="20" font="2">The	problem	is	that	the	compiler	wants	to	allocate	the	size	of	the	array.	However,	unless</text>
<text top="636" left="54" width="236" height="20" font="2">the	variable	size	is	marked	</text>
<text top="641" left="290" width="52" height="14" font="5">const</text>
<text top="636" left="341" width="456" height="20" font="2">,	the	compiler	will	not	be	sure	of	its	value	at	compile</text>
<text top="662" left="54" width="756" height="20" font="2">time.	The	C++	compiler	cannot	size	the	array	at	compile	time,	so	it	generates	a	compile</text>
<text top="688" left="54" width="90" height="20" font="2">time	error.</text>
<text top="725" left="54" width="603" height="20" font="2">To	fix	this,	we	have	to	allocate	the	array	dynamically	(on	the	“heap”):</text>
<text top="768" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="789" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="809" left="54" width="104" height="14" font="5">int	main()</text>
<text top="830" left="54" width="10" height="14" font="5">{</text>
<text top="850" left="54" width="300" height="14" font="5">		cout	&lt;&lt;	&#34;How	big?&#34;	&lt;&lt;	endl;</text>
<text top="871" left="54" width="559" height="14" font="5">		int	size;							//	try	and	use	a	variable	for	size..</text>
<text top="891" left="54" width="145" height="14" font="5">		cin	&gt;&gt;	size;</text>
<text top="912" left="54" width="476" height="14" font="5">		int	*array	=	new	int[	size	];		//	this	works</text>
<text top="932" left="54" width="300" height="14" font="5">		//	fill	the	array	and	print</text>
<text top="953" left="54" width="445" height="14" font="5">for(	int	index	=	0;	index	&lt;	size;	index++	)</text>
<text top="974" left="54" width="10" height="14" font="5">{</text>
<text top="994" left="54" width="300" height="14" font="5">		array[	index	]	=	index	*	2;</text>
<text top="1015" left="54" width="342" height="14" font="5">		cout	&lt;&lt;	array[	index	]	&lt;&lt;	endl;</text>
<text top="1035" left="54" width="10" height="14" font="5">}</text>
<text top="1056" left="54" width="642" height="14" font="5">delete[]	array;	//	must	call	delete[]	on	array	allocated	with	</text>
<text top="1076" left="54" width="259" height="14" font="5">																//	new[]!</text>
<text top="1097" left="54" width="10" height="14" font="5">}</text>
<text top="1128" left="54" width="296" height="20" font="2">So	the	lessons	here	are	as	follows:</text>
<text top="1165" left="97" width="414" height="20" font="2">To	allocate	an	array	of	some	type	(for	example,	</text>
<text top="1169" left="512" width="31" height="14" font="5">int</text>
<text top="1165" left="543" width="284" height="20" font="2">)	dynamically,	you	must	use	new</text>
</page>
<page number="263" position="absolute" top="0" left="0" height="1262" width="892">
<text top="62" left="97" width="290" height="14" font="5">int[numberOfElementsInArray]</text>
<text top="57" left="387" width="5" height="20" font="2">.</text>
<text top="83" left="97" width="191" height="20" font="2">Arrays	allocated	with	</text>
<text top="88" left="288" width="52" height="14" font="5">new[]</text>
<text top="83" left="340" width="234" height="20" font="2">	must	be	later	deleted	with	</text>
<text top="88" left="574" width="83" height="14" font="5">delete[]</text>
<text top="83" left="657" width="152" height="20" font="2">,	otherwise	you’ll</text>
<text top="109" left="97" width="232" height="20" font="2">get	a	memory	leak!	(that’s	</text>
<text top="114" left="329" width="83" height="14" font="5">delete[]</text>
<text top="109" left="412" width="364" height="20" font="2">	with	square	brackets!	Not	regular	delete).</text>
</page>
<page number="264" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="265" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="436" height="39" font="0"><b>Dynamic	C-style	arrays</b></text>
<text top="120" left="54" width="783" height="20" font="2">C-style	arrays	are	a	legacy	topic,	but	they	are	still	worth	discussing	since	even	though	they</text>
<text top="146" left="54" width="426" height="20" font="2">are	old,	you	might	still	see	them	used	sometimes.</text>
<text top="183" left="54" width="425" height="20" font="2">The	way	we	declare	a	C-style	array	is	as	follows:</text>
<text top="226" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="247" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="267" left="54" width="104" height="14" font="5">int	main()</text>
<text top="288" left="54" width="10" height="14" font="5">{</text>
<text top="308" left="54" width="300" height="14" font="5">		cout	&lt;&lt;	&#34;How	big?&#34;	&lt;&lt;	endl;</text>
<text top="329" left="54" width="559" height="14" font="5">		int	size;							//	try	and	use	a	variable	for	size..</text>
<text top="349" left="54" width="145" height="14" font="5">		cin	&gt;&gt;	size;</text>
<text top="370" left="54" width="373" height="14" font="5">		//	the	next	line	will	look	weird..</text>
<text top="390" left="54" width="155" height="14" font="5">		int	*array	=	</text>
<text top="390" left="209" width="456" height="15" font="13"><b>(int*)malloc(	size*sizeof(int)	);	//	C-style</b></text>
<text top="411" left="54" width="300" height="14" font="5">		//	fill	the	array	and	print</text>
<text top="431" left="54" width="445" height="14" font="5">for(	int	index	=	0;	index	&lt;	size;	index++	)</text>
<text top="452" left="54" width="31" height="14" font="5">		{</text>
<text top="472" left="54" width="321" height="14" font="5">				array[	index	]	=	index	*	2;</text>
<text top="493" left="54" width="363" height="14" font="5">				cout	&lt;&lt;	array[	index	]	&lt;&lt;	endl;</text>
<text top="513" left="54" width="31" height="14" font="5">		}</text>
<text top="534" left="54" width="611" height="15" font="13"><b>free</b>(	array	);	//	must	call	free()	on	array	allocated	with	</text>
<text top="554" left="54" width="435" height="14" font="5">															//	malloc()	(not	delete[]!)</text>
<text top="575" left="54" width="10" height="14" font="5">}</text>
<text top="606" left="54" width="318" height="20" font="2">The	differences	here	are	highlighted.</text>
<text top="643" left="54" width="309" height="20" font="2">A	C-style	array	is	created	using	the	</text>
<text top="647" left="363" width="83" height="14" font="5">malloc()</text>
<text top="643" left="446" width="326" height="20" font="2">	function.	The	word	malloc	stands	for</text>
<text top="669" left="54" width="761" height="20" font="2">“memory	allocate”.	This	function	requires	you	to	pass	in	the	size	of	the	array	in	bytes	to</text>
<text top="695" left="54" width="729" height="20" font="2">create	and	not	just	the	number	of	elements	you	want	in	the	array.	For	this	reason,	we</text>
<text top="721" left="54" width="456" height="20" font="2">multiply	the	number	of	elements	requested	(size)	by	</text>
<text top="725" left="510" width="62" height="14" font="5">sizeof</text>
<text top="721" left="572" width="240" height="20" font="2">	of	the	type	inside	the	array.</text>
<text top="747" left="54" width="650" height="20" font="2">The	size	in	bytes	of	a	few	typical	C++	types	is	listed	in	the	following	table:</text>
<text top="797" left="59" width="274" height="14" font="9"><b>C++	primitive	type sizeof	(size	in	bytes)</b></text>
<text top="842" left="59" width="23" height="10" font="11">int</text>
<text top="841" left="198" width="8" height="15" font="10">4</text>
<text top="884" left="59" width="39" height="10" font="11">float</text>
<text top="883" left="198" width="8" height="15" font="10">4</text>
<text top="926" left="59" width="47" height="10" font="11">double</text>
<text top="925" left="198" width="8" height="15" font="10">8</text>
<text top="969" left="59" width="70" height="10" font="11">long	long</text>
<text top="967" left="198" width="8" height="15" font="10">8</text>
<text top="1011" left="54" width="239" height="20" font="2">Memory	allocated	with	the	</text>
<text top="1016" left="293" width="83" height="14" font="5">malloc()</text>
<text top="1011" left="375" width="328" height="20" font="2">	function	must	later	be	released	using	</text>
<text top="1016" left="703" width="62" height="14" font="5">free()</text>
<text top="1011" left="765" width="5" height="20" font="2">.</text>
</page>
<page number="266" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="267" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="182" height="39" font="0"><b>Summary</b></text>
<text top="120" left="54" width="774" height="20" font="2">This	chapter	introduced	you	to	C	and	C++	style	arrays.	In	most	of	the	UE4	code,	you	will</text>
<text top="146" left="54" width="397" height="20" font="2">use	the	UE4	editor	built	in	collection	classes	(</text>
<text top="150" left="451" width="93" height="14" font="5">TArray&lt;T&gt;</text>
<text top="146" left="544" width="282" height="20" font="2">).	However,	you	need	familiarity</text>
<text top="172" left="54" width="640" height="20" font="2">with	the	basic	C	and	C++	style	arrays	to	be	a	very	good	C++	programmer.</text>
</page>
<page number="268" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="269" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="541" height="39" font="0"><b>Chapter	8.	Actors	and	Pawns</b></text>
<text top="120" left="54" width="754" height="20" font="2">Now	we	will	really	delve	into	UE4	code.	At	first,	it	is	going	to	look	daunting.	The	UE4</text>
<text top="146" left="54" width="742" height="20" font="2">class	framework	is	massive,	but	don’t	worry.	The	framework	is	massive,	so	your	code</text>
<text top="172" left="54" width="783" height="20" font="2">doesn’t	have	to	be.	You	will	find	that	you	can	get	a	lot	done	and	a	lot	onto	the	screen	using</text>
<text top="198" left="54" width="704" height="20" font="2">relatively	less	code.	This	is	because	the	UE4	engine	code	is	so	extensive	and	well</text>
<text top="224" left="54" width="741" height="20" font="2">programmed	that	they	have	made	it	possible	to	get	almost	any	game-related	task	done</text>
<text top="250" left="54" width="738" height="20" font="2">easily.	Just	call	the	right	functions,	and	voila,	what	you	want	to	see	will	appear	on	the</text>
<text top="276" left="54" width="770" height="20" font="2">screen.	The	entire	notion	of	a	framework	is	that	it	is	designed	to	let	you	get	the	gameplay</text>
<text top="302" left="54" width="645" height="20" font="2">you	want,	without	having	to	spend	a	lot	of	time	in	sweating	out	the	details.</text>
</page>
<page number="270" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="379" height="39" font="0"><b>Actors	versus	pawns</b></text>
<text top="120" left="54" width="777" height="20" font="2">In	this	chapter,	we	will	discuss	actors	and	pawns.	Although	it	sounds	as	if	pawns	will	be	a</text>
<text top="146" left="54" width="708" height="20" font="2">more	basic	class	than	actors,	it	is	actually	the	other	way	around.	A	UE4	actor	(the	</text>
<text top="150" left="762" width="52" height="14" font="5">Actor</text>
<text top="172" left="54" width="761" height="20" font="2">class)	object	is	the	basic	type	of	the	things	that	can	be	placed	in	the	UE4	game	world.	In</text>
<text top="198" left="54" width="589" height="20" font="2">order	to	place	anything	in	the	UE4	world,	you	must	derive	from	the	</text>
<text top="202" left="643" width="52" height="14" font="5">Actor</text>
<text top="198" left="694" width="53" height="20" font="2">	class.</text>
<text top="235" left="54" width="20" height="20" font="2">A	</text>
<text top="239" left="74" width="41" height="14" font="5">Pawn</text>
<text top="235" left="115" width="652" height="20" font="2">	is	an	object	that	represents	something	that	you	or	the	computer’s	<b>Artificial</b></text>
<text top="261" left="54" width="421" height="19" font="3"><b>Intelligence</b>	(<b>AI</b>)	can	control	on	the	screen.	The	</text>
<text top="265" left="475" width="41" height="14" font="5">Pawn</text>
<text top="260" left="517" width="200" height="20" font="2">	class	derives	from	the	</text>
<text top="265" left="716" width="52" height="14" font="5">Actor</text>
<text top="260" left="768" width="53" height="20" font="2">	class,</text>
<text top="286" left="54" width="773" height="20" font="2">with	the	additional	ability	to	be	controlled	by	the	player	directly	or	by	an	AI	script.	When</text>
<text top="312" left="54" width="715" height="20" font="2">a	pawn	or	actor	is	controlled	by	a	controller	or	AI,	it	is	said	to	be	possessed	by	that</text>
<text top="338" left="54" width="141" height="20" font="2">controller	or	AI.</text>
<text top="375" left="54" width="112" height="20" font="2">Think	of	the	</text>
<text top="379" left="166" width="52" height="14" font="5">Actor</text>
<text top="375" left="218" width="532" height="20" font="2">	class	as	a	character	in	a	play.	Your	game	world	is	going	to	be</text>
<text top="401" left="54" width="775" height="20" font="2">composed	of	a	bunch	of	<i>actors</i>,	all	acting	together	to	make	the	gameplay	work.	The	game</text>
<text top="427" left="54" width="730" height="20" font="2">characters,	<b>Non-player	Characters</b>	(<b>NPC</b>s),	and	even	treasure	chests	will	be	actors.</text>
</page>
<page number="271" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="272" position="absolute" top="0" left="0" height="1262" width="892">
<image top="329" left="54" width="785" height="590" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-272_1.jpg"/>
<text top="64" left="54" width="700" height="39" font="0"><b>Creating	a	world	to	put	your	actors	in</b></text>
<text top="120" left="54" width="761" height="20" font="2">Here,	we	will	start	from	scratch	and	create	a	basic	level	into	which	we	can	put	our	game</text>
<text top="146" left="54" width="93" height="20" font="2">characters.</text>
<text top="183" left="54" width="783" height="20" font="2">The	UE4	team	has	already	done	a	great	job	of	presenting	how	the	world	editor	can	be	used</text>
<text top="209" left="54" width="697" height="20" font="2">to	create	a	world	in	UE4.	I	want	you	to	take	a	moment	to	create	your	own	world.</text>
<text top="245" left="54" width="754" height="20" font="2">First,	create	a	new,	blank	UE4	project	to	get	started.	To	do	this,	in	the	Unreal	Launcher,</text>
<text top="271" left="54" width="757" height="20" font="2">click	on	the	<b>Launch</b>	button	beside	your	most	recent	engine	installation,	as	shown	in	the</text>
<text top="297" left="54" width="186" height="20" font="2">following	screenshot:</text>
<text top="989" left="54" width="759" height="20" font="2">That	will	launch	the	Unreal	Editor.	The	Unreal	Editor	is	used	to	visually	edit	your	game</text>
<text top="1015" left="54" width="781" height="20" font="2">world.	You’re	going	to	spend	a	lot	of	time	in	the	Unreal	Editor,	so	please	take	your	time	to</text>
<text top="1040" left="54" width="308" height="20" font="2">experiment	and	play	around	with	it.</text>
<text top="1077" left="54" width="771" height="20" font="2">I	will	only	cover	the	basics	of	how	to	work	with	the	UE4	editor.	You	will	need	to	let	your</text>
<text top="1103" left="54" width="763" height="20" font="2">creative	juices	flow,	however,	and	invest	some	time	in	order	to	become	familiar	with	the</text>
<text top="1129" left="54" width="55" height="20" font="2">editor.</text>
<text top="1167" left="54" width="37" height="22" font="8"><b>Tip</b></text>
</page>
<page number="273" position="absolute" top="0" left="0" height="1262" width="892">
<image top="230" left="54" width="785" height="541" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-273_1.jpg"/>
<text top="57" left="54" width="775" height="20" font="2">To	learn	more	about	the	UE4	editor,	take	a	look	at	the	<i>Getting	Started:	Introduction	to	the</i></text>
<text top="83" left="54" width="362" height="20" font="4"><a href="https://www.youtube.com/playlist?list=PLZlv_N0_O1gasd4IcOe9Cx9wHoBB7rxFl"><i>UE4	Editor</i>	playlist,	which	is	available	at	</a></text>
<text top="83" left="416" width="302" height="20" font="1"><a href="https://www.youtube.com/playlist?list=PLZlv_N0_O1gasd4IcOe9Cx9wHoBB7rxFl">https://www.youtube.com/playlist?</a></text>
<text top="109" left="54" width="425" height="20" font="1"><a href="https://www.youtube.com/playlist?list=PLZlv_N0_O1gasd4IcOe9Cx9wHoBB7rxFl">list=PLZlv_N0_O1gasd4IcOe9Cx9wHoBB7rxFl</a></text>
<text top="109" left="479" width="5" height="20" font="2"><a href="https://www.youtube.com/playlist?list=PLZlv_N0_O1gasd4IcOe9Cx9wHoBB7rxFl">.</a></text>
<text top="146" left="54" width="782" height="20" font="2">Once	you’ve	launched	the	UE4	editor,	you	will	be	presented	with	the	<b>Projects</b>	dialog.	The</text>
<text top="172" left="54" width="770" height="20" font="2">following	screenshot	shows	the	steps	to	be	performed	with	numbers	corresponding	to	the</text>
<text top="198" left="54" width="364" height="20" font="2">order	in	which	they	need	to	be	performed:</text>
<text top="840" left="54" width="406" height="20" font="2">Perform	the	following	steps	to	create	a	project:</text>
<text top="876" left="69" width="469" height="20" font="2">1.	 Select	the	<b>New	Project</b>	tab	at	the	top	of	the	screen.</text>
<text top="902" left="69" width="390" height="20" font="2">2.	 Click	on	the	<b>C++</b>	tab	(the	second	subtab).</text>
<text top="928" left="69" width="536" height="20" font="2">3.	 Then	select	<b>Basic	Code</b>	from	the	available	projects	listing.</text>
<text top="954" left="69" width="767" height="20" font="2">4.	 Set	the	directory	where	your	project	is	located	(mine	is	<b>Y:\Unreal	Projects\</b>).	Choose</text>
<text top="980" left="97" width="693" height="20" font="2">a	hard	disk	location	with	a	lot	of	space	(the	final	project	will	be	around	1.5	GB).</text>
<text top="1006" left="69" width="427" height="20" font="2">5.	 Name	your	project.	I	called	mine	<b>GoldenEgg</b>.</text>
<text top="1032" left="69" width="479" height="20" font="2">6.	 Click	on	<b>Create	Project</b>	to	finalize	project	creation.</text>
<text top="1090" left="54" width="765" height="20" font="2">Once	you’ve	done	this,	the	UE4	launcher	will	launch	Visual	Studio.	There	will	only	be	a</text>
<text top="1116" left="54" width="779" height="20" font="2">couple	of	source	files	in	Visual	Studio,	but	we’re	not	going	to	touch	those	now.	Make	sure</text>
<text top="1142" left="54" width="769" height="20" font="2">that	<b>Development	Editor</b>	is	selected	from	the	<b>Configuration	Manager</b>	dropdown	at	the</text>
<text top="1168" left="54" width="480" height="20" font="2">top	of	the	screen,	as	shown	in	the	following	screenshot:</text>
</page>
<page number="274" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="785" height="385" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-274_1.jpg"/>
<image top="564" left="54" width="785" height="540" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-274_2.jpg"/>
<text top="506" left="54" width="774" height="20" font="2">Now	launch	your	project	by	pressing	<i>Ctrl</i>	+	<i>F5</i>	in	Visual	Studio.	You	will	find	yourself	in</text>
<text top="532" left="54" width="564" height="20" font="2">the	Unreal	Engine	4	editor,	as	shown	in	the	following	screenshot:</text>
</page>
<page number="275" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="276" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="285" height="39" font="0"><b>The	UE4	editor</b></text>
<text top="120" left="54" width="762" height="20" font="2">We	will	explore	the	UE4	editor	here.	We’ll	start	with	the	controls	since	it	is	important	to</text>
<text top="146" left="54" width="283" height="20" font="2">know	how	to	navigate	in	Unreal.</text>
</page>
<page number="277" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="229" height="32" font="7"><b>Editor	controls</b></text>
<text top="110" left="54" width="771" height="20" font="2">If	you’ve	never	used	a	3D	editor	before,	the	controls	can	be	quite	hard	to	learn.	These	are</text>
<text top="136" left="54" width="420" height="20" font="2">the	basic	navigation	controls	while	in	edit	mode:</text>
<text top="173" left="97" width="414" height="20" font="2">Use	the	arrow	keys	to	move	around	in	the	scene</text>
<text top="199" left="97" width="510" height="20" font="2">Press	<i>Page	Up</i>	or	<i>Page	Down</i>	to	go	up	and	down	vertically</text>
<text top="225" left="97" width="659" height="20" font="2">Left	mouse	click	+	drag	it	left	or	right	to	change	the	direction	you	are	facing</text>
<text top="251" left="97" width="669" height="20" font="2">Left	mouse	click	+	drag	it	up	or	down	to	<i>dolly</i>	(move	the	camera	forward	and</text>
<text top="277" left="97" width="429" height="20" font="2">backward,	same	as	pressing	up/down	arrow	keys)</text>
<text top="303" left="97" width="550" height="20" font="2">Right	mouse	click	+	drag	to	change	the	direction	you	are	facing</text>
<text top="329" left="97" width="371" height="20" font="2">Middle	mouse	click	+	drag	to	pan	the	view</text>
<text top="354" left="97" width="628" height="20" font="2">Right	mouse	click	and	the	<i>W</i>,	<i>A</i>,	<i>S</i>,	and	<i>D</i>	keys	to	move	around	the	scene</text>
</page>
<page number="278" position="absolute" top="0" left="0" height="1262" width="892">
<image top="169" left="54" width="785" height="94" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-278_1.jpg"/>
<text top="61" left="54" width="290" height="32" font="7"><b>Play	mode	controls</b></text>
<text top="110" left="54" width="764" height="20" font="2">Click	on	the	<b>Play</b>	button	in	the	bar	at	the	top,	as	shown	in	the	following	screenshot.	This</text>
<text top="136" left="54" width="230" height="20" font="2">will	launch	the	play	mode.</text>
<text top="332" left="54" width="767" height="20" font="2">Once	you	click	on	the	<b>Play</b>	button,	the	controls	change.	In	play	mode,	the	controls	are	as</text>
<text top="358" left="54" width="71" height="20" font="2">follows:</text>
<text top="394" left="97" width="338" height="20" font="2">The	<i>W</i>,	<i>A</i>,	<i>S</i>,	and	<i>D</i>	keys	for	movement</text>
<text top="420" left="97" width="633" height="20" font="2">The	left	or	right	arrow	keys	to	look	toward	the	left	and	right,	respectively</text>
<text top="446" left="97" width="541" height="20" font="2">The	mouse’s	motion	to	change	the	direction	in	which	you	look</text>
<text top="472" left="97" width="469" height="20" font="2">The	<i>Esc</i>	key	to	exit	play	mode	and	return	to	edit	mode</text>
<text top="509" left="54" width="743" height="20" font="2">What	I	suggest	you	do	at	this	point	is	try	to	add	a	bunch	of	shapes	and	objects	into	the</text>
<text top="535" left="54" width="450" height="20" font="2">scene	and	try	to	color	them	with	different	<i>materials</i>.</text>
</page>
<page number="279" position="absolute" top="0" left="0" height="1262" width="892">
<image top="220" left="54" width="455" height="419" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-279_1.jpg"/>
<text top="61" left="54" width="414" height="32" font="7"><b>Adding	objects	to	the	scene</b></text>
<text top="110" left="54" width="781" height="20" font="2">Adding	objects	to	the	scene	is	as	easy	as	dragging	and	dropping	them	in	from	the	<b>Content</b></text>
<text top="137" left="54" width="766" height="19" font="3"><b>Browser</b>	tab.	The	<b>Content	Browser</b>	tab	appears,	by	default,	docked	at	the	left-hand	side</text>
<text top="162" left="54" width="782" height="20" font="2">of	the	window.	If	it	isn’t	seen,	simply	select	<b>Window</b>	and	navigate	to	<b>Content	Browser</b>	in</text>
<text top="188" left="54" width="204" height="20" font="2">order	to	make	it	appear.</text>
<text top="676" left="92" width="708" height="20" font="4"><i>Make	sure	that	the	Content	Browser	is	visible	in	order	to	add	objects	to	your	level</i></text>
<text top="746" left="54" width="655" height="20" font="2">Next,	select	the	<b>Props</b>	folder	on	the	left-hand	side	of	the	<b>Content	Browser</b>.</text>
</page>
<page number="280" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="785" height="436" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-280_1.jpg"/>
<image top="652" left="54" width="218" height="214" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-280_2.jpg"/>
<text top="525" left="143" width="607" height="20" font="4"><i>Drag	and	drop	things	from	the	Content	Browser	into	your	game	world</i></text>
<text top="594" left="54" width="750" height="20" font="2">To	resize	an	object,	press	<i>R</i>	on	your	keyboard.	The	manipulators	around	the	object	will</text>
<text top="620" left="54" width="386" height="20" font="2">appear	as	boxes,	which	denotes	resize	mode.</text>
<text top="903" left="254" width="385" height="20" font="4"><i>Press	R	on	your	keyboard	to	resize	an	object</i></text>
<text top="972" left="54" width="780" height="20" font="2">In	order	to	change	the	material	that	is	used	to	paint	the	object,	simply	drag	and	drop	a	new</text>
<text top="998" left="54" width="631" height="20" font="2">material	from	the	<b>Content	Browser</b>	window	inside	the	<b>Materials</b>	folder.</text>
</page>
<page number="281" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="785" height="456" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-281_1.jpg"/>
<text top="546" left="75" width="743" height="20" font="4"><i>Drag	and	drop	a	material	from	the	Content	Browser’s	Materials	folder	to	color	things</i></text>
<text top="572" left="374" width="144" height="20" font="4"><i>with	a	new	color</i></text>
<text top="641" left="54" width="747" height="20" font="2">Materials	are	like	paints.	You	can	coat	an	object	with	any	material	you	want	by	simply</text>
<text top="667" left="54" width="755" height="20" font="2">dragging	and	dropping	the	material	you	desire	onto	the	object	you	desire	it	to	be	coated</text>
<text top="693" left="54" width="777" height="20" font="2">on.	Materials	are	only	skin-deep:	they	don’t	change	the	other	properties	of	an	object	(such</text>
<text top="719" left="54" width="95" height="20" font="2">as	weight).</text>
</page>
<page number="282" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="283" position="absolute" top="0" left="0" height="1262" width="892">
<image top="178" left="54" width="242" height="293" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-283_1.jpg"/>
<image top="598" left="54" width="582" height="321" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-283_2.jpg"/>
<text top="64" left="54" width="397" height="39" font="0"><b>Starting	from	scratch</b></text>
<text top="120" left="54" width="783" height="20" font="2">If	you	want	to	start	creating	a	level	from	scratch,	simply	click	on	<b>File</b>	and	navigate	to	<b>New</b></text>
<text top="146" left="54" width="211" height="19" font="3"><b>Level…</b>,	as	shown	here:</text>
<text top="540" left="54" width="772" height="20" font="2">You	can	then	select	between	<b>Default</b>	and	<b>Empty	Level</b>.	I	think	selecting	<b>Empty	Level</b>	is</text>
<text top="566" left="54" width="451" height="20" font="2">a	good	idea,	for	the	reasons	that	are	mentioned	later.</text>
<text top="989" left="54" width="764" height="20" font="2">The	new	level	will	be	completely	black	in	color	to	start	with.	Try	dragging	and	dropping</text>
<text top="1015" left="54" width="443" height="20" font="2">some	objects	from	the	<b>Content	Browser</b>	tab	again.</text>
<text top="1051" left="54" width="776" height="20" font="2">This	time,	I	added	a	resized	shapes	/	box	for	the	ground	plane	and	textured	it	with	moss,	a</text>
<text top="1077" left="54" width="752" height="20" font="2">couple	of	<b>Props</b>	/	<b>SM_Rocks</b>,	<b>Particles</b>	/	<b>P_Fire</b>,	and	most	importantly,	a	light	source.</text>
<text top="1114" left="54" width="695" height="20" font="2">Be	sure	to	save	your	map.	Here’s	a	snapshot	of	my	map	(how	does	yours	look?):</text>
</page>
<page number="284" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="540" height="376" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-284_1.jpg"/>
<image top="582" left="54" width="785" height="306" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-284_2.jpg"/>
<text top="498" left="54" width="720" height="20" font="2">If	you	want	to	change	the	default	level	that	opens	when	you	launch	the	editor,	go	to</text>
<text top="524" left="54" width="760" height="19" font="3"><b>Project	Settings</b>	|	<b>Maps	&amp;	Modes</b>;	then	you	will	see	a	<b>Game	Default	Map</b>	and	<b>Editor</b></text>
<text top="550" left="54" width="519" height="19" font="3"><b>Startup	Map</b>	setting,	as	shown	in	the	following	screenshot:</text>
</page>
<page number="285" position="absolute" top="0" left="0" height="1262" width="892">
<image top="320" left="97" width="297" height="199" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-285_1.jpg"/>
<image top="620" left="97" width="462" height="423" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-285_2.jpg"/>
<text top="61" left="54" width="312" height="32" font="7"><b>Adding	light	sources</b></text>
<text top="110" left="54" width="744" height="20" font="2">Note	that	if	your	scene	appears	completely	black,	it	is	possible	that	you	forgot	to	put	a</text>
<text top="136" left="54" width="163" height="20" font="2">light	source	into	it.</text>
<text top="173" left="54" width="775" height="20" font="2">In	the	previous	scene,	the	<b>P_Fire</b>	particle	emitter	acts	as	a	light	source,	but	it	only	emits	a</text>
<text top="199" left="54" width="750" height="20" font="2">small	amount	of	light.	To	make	sure	that	everything	appears	well-lit	in	your	scene,	you</text>
<text top="225" left="54" width="321" height="20" font="2">should	add	a	light	source,	as	follows:</text>
<text top="262" left="69" width="720" height="20" font="2">1.	 Go	to	<b>Window</b>	and	then	click	on	<b>Modes</b>	to	ensure	that	the	light	sources	panel	is</text>
<text top="288" left="97" width="62" height="20" font="2">shown:</text>
<text top="588" left="69" width="669" height="20" font="2">2.	 Then,	from	the	<b>Modes</b>	panel,	drag	one	of	the	<b>Lights</b>	object	into	the	scene:</text>
<text top="1113" left="69" width="652" height="20" font="2">3.	 Select	the	lightbulb	and	box	icon	(it	looks	like	a	mushroom,	but	it	isn’t).</text>
<text top="1139" left="69" width="401" height="20" font="2">4.	 Click	on	<b>Lights</b>	in	the	left-hand	side	panel.</text>
<text top="1165" left="69" width="581" height="20" font="2">5.	 Select	the	type	of	light	you	want	and	just	pull	it	into	your	scene.</text>
</page>
<page number="286" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="635" height="20" font="2">If	you	don’t	have	a	light	source,	your	scene	will	appear	completely	black.</text>
</page>
<page number="287" position="absolute" top="0" left="0" height="1262" width="892">
<image top="511" left="97" width="299" height="350" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-287_1.jpg"/>
<text top="61" left="54" width="268" height="32" font="7"><b>Collision	volumes</b></text>
<text top="110" left="54" width="780" height="20" font="2">You	might	have	noticed	that,	so	far,	the	camera	just	passes	through	all	the	scene	geometry,</text>
<text top="136" left="54" width="735" height="20" font="2">even	in	play	mode.	That’s	not	good.	Let’s	make	it	such	that	the	player	can’t	just	walk</text>
<text top="162" left="54" width="266" height="20" font="2">through	the	rocks	in	our	scene.</text>
<text top="199" left="54" width="716" height="20" font="2">There	are	a	few	different	types	of	collision	volumes.	Generally,	perfect	mesh-mesh</text>
<text top="225" left="54" width="746" height="20" font="2">collisions	are	way	too	expensive	to	do	at	runtime.	Instead,	we	use	an	approximation	(a</text>
<text top="251" left="54" width="421" height="20" font="2">bounding	volume)	to	guess	the	collision	volume.</text>
<text top="289" left="54" width="501" height="22" font="8"><b>Adding	collision	detection	for	the	objects	editor</b></text>
<text top="327" left="54" width="767" height="20" font="2">The	first	thing	we	have	to	do	is	associate	a	collision	volume	with	each	of	the	rocks	in	the</text>
<text top="353" left="54" width="53" height="20" font="2">scene.</text>
<text top="390" left="54" width="406" height="20" font="2">We	can	do	this	from	the	UE4	editor	as	follows:</text>
<text top="427" left="69" width="696" height="20" font="2">1.	 Click	on	an	object	in	the	scene	for	which	you	want	to	add	a	collision	volume.</text>
<text top="453" left="69" width="763" height="20" font="2">2.	 Right-click	on	this	object	in	the	<b>Scene	Outliner</b>	tab	(the	default	appears	on	the	right-</text>
<text top="479" left="97" width="670" height="20" font="2">hand	side	of	the	screen)	and	select	edit,	as	shown	in	the	following	screenshot:</text>
<text top="932" left="97" width="50" height="22" font="8"><b>Note</b></text>
<text top="970" left="97" width="355" height="20" font="2">You	will	find	yourself	in	the	mesh	editor.</text>
<text top="1007" left="69" width="644" height="20" font="2">3.	 Ensure	that	the	collision	volume	is	highlighted,	at	the	top	of	the	screen:</text>
</page>
<page number="288" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="742" height="219" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-288_1.jpg"/>
<image top="374" left="97" width="655" height="470" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-288_2.jpg"/>
<text top="342" left="69" width="720" height="20" font="2">4.	 Go	to	the	<b>Collision</b>	menu	and	then	click	on	<b>Add	Capsule	Simplified	Collision</b>:</text>
<text top="913" left="69" width="709" height="20" font="2">5.	 The	collision	volume,	when	added	successfully,	will	appear	as	a	bunch	of	lines</text>
<text top="939" left="97" width="501" height="20" font="2">surrounding	the	object,	as	shown	in	the	following	images:</text>
</page>
<page number="289" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="540" height="297" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-289_1.jpg"/>
<text top="387" left="156" width="624" height="20" font="4"><i>The	default	collision	capsule	(left)	and	manually	resized	versions	(right)</i></text>
<text top="456" left="69" width="728" height="20" font="2">6.	 You	can	resize	(<i>R</i>),	rotate	(<i>E</i>),	move	(<i>W</i>),	and	change	the	collision	volume	as	you</text>
<text top="482" left="97" width="610" height="20" font="2">wish,	the	same	way	you	would	manipulate	an	object	in	the	UE4	editor.</text>
<text top="508" left="69" width="764" height="20" font="2">7.	 When	you’re	done	with	adding	collision	meshes,	try	to	click	on	<b>Play</b>;	you	will	notice</text>
<text top="534" left="97" width="516" height="20" font="2">that	you	can	no	longer	pass	through	your	collidable	objects.</text>
</page>
<page number="290" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="291" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="523" height="39" font="0"><b>Adding	an	actor	to	the	scene</b></text>
<text top="120" left="54" width="777" height="20" font="2">Now	that	we	have	a	scene	up	and	running,	we	need	to	add	an	actor	to	the	scene.	Let’s	first</text>
<text top="146" left="54" width="755" height="20" font="2">add	an	avatar	for	the	player,	complete	with	a	collision	volume.	To	do	this,	we’ll	have	to</text>
<text top="172" left="54" width="169" height="20" font="2">inherit	from	a	UE4	</text>
<text top="176" left="223" width="135" height="14" font="5">GameFramework</text>
<text top="172" left="358" width="53" height="20" font="2">	class.</text>
</page>
<page number="292" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="293" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="439" height="39" font="0"><b>Creating	a	player	entity</b></text>
<text top="120" left="54" width="759" height="20" font="2">In	order	to	create	an	onscreen	representation	of	the	player,	we’ll	need	to	derive	from	the</text>
<text top="150" left="54" width="93" height="14" font="5">Character</text>
<text top="146" left="147" width="139" height="20" font="2">	class	in	Unreal.</text>
</page>
<page number="294" position="absolute" top="0" left="0" height="1262" width="892">
<image top="231" left="97" width="321" height="412" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-294_1.jpg"/>
<text top="61" left="54" width="704" height="32" font="7"><b>Inheriting	from	UE4	GameFramework	classes</b></text>
<text top="110" left="54" width="725" height="20" font="2">UE4	makes	it	easy	to	inherit	from	the	base	framework	classes.	All	you	have	to	do	is</text>
<text top="136" left="54" width="245" height="20" font="2">perform	the	following	steps:</text>
<text top="173" left="69" width="344" height="20" font="2">1.	 Open	your	project	in	the	UE4	editor.</text>
<text top="199" left="69" width="471" height="20" font="2">2.	 Go	to	<b>File</b>	and	then	select	<b>Add	Code	to	Project…</b>.</text>
<text top="680" left="108" width="719" height="20" font="4"><i>Navigating	to	File	|	Add	Code	To	Project…	will	allow	you	to	derive	from	any	of	the</i></text>
<text top="706" left="336" width="264" height="20" font="4"><i>UE4	GameFramework	classes</i></text>
<text top="775" left="69" width="722" height="20" font="2">3.	 From	here,	choose	the	base	class	you	want	to	derive	from.	You	have	<b>Character</b>,</text>
<text top="801" left="97" width="606" height="19" font="3"><b>Pawn</b>,	<b>Actor</b>,	and	so	on,	but	for	now,	we	will	derive	from	<b>Character</b>:</text>
</page>
<page number="295" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="742" height="449" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-295_1.jpg"/>
<image top="665" left="97" width="742" height="449" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-295_2.jpg"/>
<text top="538" left="274" width="388" height="20" font="4"><i>Select	the	UE4	class	you	want	to	derive	from</i></text>
<text top="607" left="69" width="702" height="20" font="2">4.	 Click	on	<b>Next	&gt;</b>	to	get	this	dialog	box,	where	you	name	the	class.	I	named	my</text>
<text top="633" left="97" width="122" height="20" font="2">player’s	class	</text>
<text top="638" left="219" width="62" height="14" font="5">Avatar</text>
<text top="633" left="281" width="5" height="20" font="2">.</text>
<text top="1183" left="69" width="751" height="20" font="2">5.	 Finally,	click	on	<b>Create	Class</b>	to	create	the	class	in	code,	as	shown	in	the	preceding</text>
</page>
<page number="296" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="97" width="97" height="20" font="2">screenshot.</text>
<text top="116" left="54" width="658" height="20" font="2">Let	UE4	refresh	your	Visual	Studio	project	when	it	asks	you.	Open	the	new	</text>
<text top="120" left="712" width="83" height="14" font="5">Avatar.h</text>
<text top="116" left="794" width="34" height="20" font="2">	file</text>
<text top="142" left="54" width="249" height="20" font="2">from	the	<b>Solution	Explorer</b>.</text>
<text top="178" left="54" width="702" height="20" font="2">The	code	that	UE4	generates	will	look	a	little	weird.	Remember	the	macros	that	I</text>
<text top="204" left="54" width="204" height="20" font="2">suggested	you	avoid	in	</text>
<text top="204" left="258" width="85" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#164">Chapter	5</a></text>
<text top="204" left="342" width="451" height="20" font="2">,	<i>Functions	and	Macros</i>.	The	UE4	code	uses	macros</text>
<text top="230" left="54" width="781" height="20" font="2">extensively.	These	macros	are	used	to	copy	and	paste	boilerplate	starter	code	that	lets	your</text>
<text top="256" left="54" width="302" height="20" font="2">code	integrate	with	the	UE4	editor.</text>
<text top="293" left="54" width="171" height="20" font="2">The	contents	of	the	</text>
<text top="297" left="225" width="83" height="14" font="5">Avatar.h</text>
<text top="293" left="308" width="323" height="20" font="2">	file	are	shown	in	the	following	code:</text>
<text top="336" left="54" width="124" height="14" font="5">#pragma	once</text>
<text top="357" left="54" width="218" height="14" font="5">//	Avatar.h	code	file</text>
<text top="377" left="54" width="373" height="14" font="5">#include	&#34;GameFramework/Character.h&#34;</text>
<text top="398" left="54" width="300" height="14" font="5">#include	&#34;Avatar.generated.h&#34;</text>
<text top="418" left="54" width="83" height="14" font="5">UCLASS()</text>
<text top="439" left="54" width="487" height="14" font="5">class	MYPROJECT_API	AAvatar	:	public	ACharacter</text>
<text top="459" left="54" width="10" height="14" font="5">{</text>
<text top="480" left="54" width="259" height="14" font="5">		GENERATED_UCLASS_BODY()</text>
<text top="500" left="54" width="21" height="14" font="5">};</text>
<text top="532" left="54" width="329" height="20" font="2">Let’s	talk	about	macros	for	a	moment.</text>
<text top="568" left="54" width="39" height="20" font="2">The	</text>
<text top="573" left="93" width="83" height="14" font="5">UCLASS()</text>
<text top="568" left="176" width="627" height="20" font="2">	macro	basically	makes	your	C++	code	class	available	in	the	UE4	editor.</text>
<text top="594" left="54" width="39" height="20" font="2">The	</text>
<text top="599" left="93" width="238" height="14" font="5">GENERATED_UCLASS_BODY()</text>
<text top="594" left="331" width="472" height="20" font="2">	macro	copies	and	pastes	code	that	UE4	needs	to	make</text>
<text top="620" left="54" width="379" height="20" font="2">your	class	function	properly	as	a	UE4	class.</text>
<text top="658" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="697" left="54" width="35" height="20" font="2">For	</text>
<text top="701" left="89" width="83" height="14" font="5">UCLASS()</text>
<text top="697" left="172" width="42" height="20" font="2">	and	</text>
<text top="701" left="214" width="238" height="14" font="5">GENERATED_UCLASS_BODY()</text>
<text top="697" left="452" width="351" height="20" font="2">,	you	don’t	truly	need	to	understand	how</text>
<text top="723" left="54" width="746" height="20" font="2">UE4	works	its	magic.	You	just	need	to	make	sure	that	they	are	present	at	the	right	spot</text>
<text top="749" left="54" width="421" height="20" font="2">(where	they	were	when	you	generated	the	class).</text>
<text top="787" left="54" width="438" height="22" font="8"><b>Associating	a	model	with	the	Avatar	class</b></text>
<text top="825" left="54" width="782" height="20" font="2">Now	we	need	to	associate	a	model	with	our	character	object.	In	order	to	do	this,	we	need	a</text>
<text top="851" left="54" width="784" height="20" font="2">model	to	play	with.	Fortunately,	there	is	a	whole	pack	of	sample	models	available	from	the</text>
<text top="877" left="54" width="225" height="20" font="2">UE4	marketplace	for	free.</text>
<text top="914" left="54" width="233" height="19" font="3"><b>Downloading	free	models</b></text>
<text top="951" left="54" width="751" height="20" font="2">To	create	the	player	object,	we’ll	download	the	<b>Animation	Starter	Pack</b>	file	(which	is</text>
<text top="977" left="54" width="280" height="20" font="2">free)	from	the	<b>Marketplace</b>	tab.</text>
</page>
<page number="297" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="756" height="531" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-297_1.jpg"/>
<image top="775" left="54" width="785" height="339" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-297_2.jpg"/>
<text top="621" left="62" width="769" height="20" font="4"><i>From	the	Unreal	Launcher,	click	on	Marketplace	and	search	for	Animation	Starter	Pack,</i></text>
<text top="647" left="257" width="380" height="20" font="4"><i>which	is	free	at	the	time	of	writing	this	book</i></text>
<text top="716" left="54" width="761" height="20" font="2">After	you’ve	downloaded	the	<b>Animation	Starter	Pack</b>	file,	you	will	be	able	to	add	it	to</text>
<text top="742" left="54" width="726" height="20" font="2">any	of	the	projects	you’ve	previously	created,	as	shown	in	the	following	screenshot:</text>
<text top="1182" left="54" width="771" height="20" font="2">When	you	click	on	<b>Add	to	project</b>	under	<b>Animation	Starter	Pack</b>,	you	will	get	this	pop</text>
</page>
<page number="298" position="absolute" top="0" left="0" height="1262" width="892">
<image top="90" left="54" width="540" height="487" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-298_1.jpg"/>
<text top="57" left="54" width="377" height="20" font="2">up,	asking	which	project	to	add	the	pack	to:</text>
<text top="646" left="54" width="704" height="20" font="2">Simply	select	your	project	and	the	new	artwork	will	be	available	in	your	<b>Content</b></text>
<text top="672" left="54" width="83" height="19" font="3"><b>Browser</b>.</text>
</page>
<page number="299" position="absolute" top="0" left="0" height="1262" width="892">
<image top="412" left="97" width="292" height="484" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-299_1.jpg"/>
<text top="61" left="54" width="271" height="32" font="7"><b>Loading	the	mesh</b></text>
<text top="110" left="54" width="689" height="20" font="2">In	general,	it	is	considered	a	bad	practice	to	hardcode	your	assets	into	the	game.</text>
<text top="136" left="54" width="735" height="20" font="2">Hardcoding	means	that	you	write	C++	code	that	specifies	the	asset	to	load.	However,</text>
<text top="162" left="54" width="749" height="20" font="2">hardcoding	means	the	loaded	asset	is	part	of	the	final	executable,	which	will	mean	that</text>
<text top="188" left="54" width="779" height="20" font="2">changing	the	asset	that	is	loaded	wouldn’t	be	modifiable	at	runtime.	This	is	a	bad	practice.</text>
<text top="214" left="54" width="601" height="20" font="2">It	is	much	better	to	be	able	to	change	the	asset	loaded	during	runtime.</text>
<text top="251" left="54" width="754" height="20" font="2">For	this	reason,	we’re	going	to	use	the	UE4	blueprints	feature	to	set	up	the	model	mesh</text>
<text top="277" left="54" width="244" height="20" font="2">and	collision	capsule	of	our	</text>
<text top="281" left="298" width="62" height="14" font="5">Avatar</text>
<text top="277" left="360" width="53" height="20" font="2">	class.</text>
<text top="315" left="54" width="427" height="22" font="8"><b>Creating	a	blueprint	from	our	C++	class</b></text>
<text top="353" left="69" width="737" height="20" font="2">1.	 This	is	really	easy.	Open	the	<b>Class	Viewer</b>	tab	by	navigating	to	<b>Window</b>	and	then</text>
<text top="379" left="97" width="361" height="20" font="2">clicking	on	<b>Class	Viewer</b>,	as	shown	here:</text>
<text top="965" left="69" width="746" height="20" font="2">2.	 In	the	<b>Class	Viewer</b>	dialog,	start	typing	in	the	name	of	your	C++	class.	If	you	have</text>
<text top="991" left="97" width="734" height="20" font="2">properly	created	and	exported	the	class	from	your	C++	code,	it	will	appear,	as	shown</text>
<text top="1017" left="97" width="240" height="20" font="2">in	the	following	screenshot:</text>
</page>
<page number="300" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="742" height="333" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-300_1.jpg"/>
<image top="718" left="97" width="416" height="206" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-300_2.jpg"/>
<text top="455" left="97" width="37" height="22" font="8"><b>Tip</b></text>
<text top="494" left="97" width="65" height="20" font="2">If	your	</text>
<text top="498" left="162" width="62" height="14" font="5">Avatar</text>
<text top="494" left="224" width="568" height="20" font="2">	class	does	not	show	up,	close	the	editor	and	compile/run	the	C++</text>
<text top="520" left="97" width="117" height="20" font="2">project	again.</text>
<text top="556" left="69" width="730" height="20" font="2">3.	 Right-click	on	the	class	that	you	want	to	create	a	blueprint	of	(in	my	case,	it’s	my</text>
<text top="583" left="97" width="123" height="19" font="3"><b>Avatar</b>	class).</text>
<text top="608" left="69" width="671" height="20" font="2">4.	 Name	your	blueprint	something	unique.	I	called	my	blueprint	<b>BP_Avatar</b>.</text>
<text top="634" left="69" width="708" height="20" font="2">5.	 Now,	open	this	blueprint	for	editing,	by	double-clicking	on	<b>BP_Avatar</b>	(it	will</text>
<text top="660" left="97" width="722" height="20" font="2">appear	in	the	<b>Class	Viewer</b>	tab	after	you	add	it,	just	under	<b>Avatar</b>),	as	shown	in	the</text>
<text top="686" left="97" width="186" height="20" font="2">following	screenshot:</text>
<text top="994" left="69" width="769" height="20" font="2">6.	 You	will	be	presented	with	the	blueprints	window	for	your	new	<b>BP_Avatar</b>	object,	as</text>
<text top="1020" left="97" width="105" height="20" font="2">shown	here:</text>
</page>
<page number="301" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="742" height="535" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-301_1.jpg"/>
<image top="844" left="97" width="742" height="261" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-301_2.jpg"/>
<text top="658" left="97" width="50" height="22" font="8"><b>Note</b></text>
<text top="697" left="97" width="426" height="20" font="2">From	this	window,	you	can	attach	a	model	to	the	</text>
<text top="701" left="523" width="62" height="14" font="5">Avatar</text>
<text top="697" left="585" width="245" height="20" font="2">	class	visually.	Again,	this	is</text>
<text top="723" left="97" width="739" height="20" font="2">the	recommended	pattern	since	artists	will	typically	be	the	ones	setting	up	their	assets</text>
<text top="749" left="97" width="278" height="20" font="2">for	game	designers	to	play	with.</text>
<text top="786" left="69" width="711" height="20" font="2">7.	 To	set	up	the	default	mesh,	click	on	the	<b>Defaults</b>	button	at	the	top.	Scroll	down</text>
<text top="811" left="97" width="446" height="20" font="2">through	the	properties	until	you	come	across	<b>Mesh</b>.</text>
<text top="1174" left="69" width="681" height="20" font="2">8.	 Click	on	the	dropdown	and	select	<b>HeroTPP</b>	for	your	mesh,	as	shown	in	the</text>
</page>
<page number="302" position="absolute" top="0" left="0" height="1262" width="892">
<image top="193" left="97" width="742" height="630" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-302_1.jpg"/>
<text top="57" left="97" width="187" height="20" font="2">preceding	screenshot.</text>
<text top="83" left="69" width="751" height="20" font="2">9.	 If	<b>HeroTPP</b>	doesn’t	appear	in	the	dropdown,	make	sure	that	you	download	and	add</text>
<text top="109" left="97" width="719" height="20" font="2">the<b>	Animation	Starter	Pack</b>	to	your	project.	Alternatively,	you	can	add	the	yellow</text>
<text top="136" left="97" width="730" height="19" font="3"><b>TutorialTPP</b>	model	to	your	project	if	you	select	<b>Show	Engine	Content</b>	under	<b>View</b></text>
<text top="161" left="97" width="79" height="19" font="3"><b>Options</b>:</text>
<text top="892" left="58" width="732" height="20" font="2">10.	 What	about	the	collision	volume?	Click	on	the	<b>Components</b>	tab	in	the	blueprint</text>
<text top="918" left="97" width="190" height="20" font="2">editor	for	your	avatar:</text>
</page>
<page number="303" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="742" height="470" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-303_1.jpg"/>
<text top="560" left="131" width="674" height="20" font="4"><i>If	your	capsule	doesn’t	encapsulate	your	model,	adjust	the	model	so	that	it	fits</i></text>
<text top="630" left="97" width="50" height="22" font="8"><b>Note</b></text>
<text top="669" left="97" width="717" height="20" font="2">If	your	model	ended	up	like	mine,	the	capsule	is	off	the	mark!	We	need	to	adjust	it.</text>
<text top="706" left="59" width="742" height="20" font="2">11.	 Click	on	the	blue	Avatar	model	and	press	the	<i>W</i>	key.	Move	him	down	until	he	fits</text>
<text top="731" left="97" width="680" height="20" font="2">inside	the	capsule.	If	the	capsule	isn’t	big	enough,	you	can	adjust	its	size	in	the</text>
<text top="758" left="97" width="718" height="19" font="3"><b>Details</b>	tab	under	<b>Capsule	Height</b>	and	<b>Capsule	Radius</b>,	as	shown	in	the	following</text>
<text top="783" left="97" width="97" height="20" font="2">screenshot:</text>
</page>
<page number="304" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="742" height="506" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-304_1.jpg"/>
<text top="595" left="163" width="610" height="20" font="4"><i>You	can	stretch	your	capsule	by	adjusting	the	Capsule	Height	property</i></text>
<text top="665" left="58" width="691" height="20" font="2">12.	 Now,	we’re	ready	to	add	this	avatar	to	the	game	world.	Click	and	drag	your</text>
<text top="691" left="97" width="676" height="19" font="3"><b>BP_Avatar</b>	model	from	the	<b>Class	Viewer</b>	tab	to	your	scene	in	the	UE4	editor.</text>
</page>
<page number="305" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="540" height="470" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-305_1.jpg"/>
<text top="560" left="259" width="418" height="20" font="4"><i>Our	Avatar	class	added	to	the	scene,	in	a	T-pose</i></text>
<text top="650" left="54" width="735" height="20" font="2">The	pose	of	Avatar	is	called	the	T-pose.	Animators	often	leave	their	characters	in	this</text>
<text top="676" left="54" width="784" height="20" font="2">default	pose.	Animations	can	be	applied	to	the	character	in	order	to	make	them	change	this</text>
<text top="702" left="54" width="773" height="20" font="2">default	pose	to	something	more	interesting.	You	want	him	animated,	you	say!	Well,	that’s</text>
<text top="728" left="54" width="42" height="20" font="2">easy.</text>
<text top="765" left="54" width="750" height="20" font="2">Under	the	<b>Defaults</b>	tab	in	the	blueprint	editor,	just	above	<b>Mesh</b>,	there	is	an	<b>Animation</b></text>
<text top="791" left="54" width="736" height="20" font="2">section	where	you	can	select	the	active	animation	on	your	<b>Mesh</b>.	If	you	wish	to	use	a</text>
<text top="817" left="54" width="752" height="20" font="2">certain	animation	asset,	simply	click	on	the	drop-down	menu	and	choose	the	animation</text>
<text top="843" left="54" width="166" height="20" font="2">you	desire	to	show.</text>
<text top="879" left="54" width="755" height="20" font="2">A	better	thing	to	do,	however,	is	to	use	a	blueprint	for	the	animation.	This	way,	an	artist</text>
<text top="905" left="54" width="737" height="20" font="2">can	properly	set	the	animation	based	on	what	the	character	is	doing.	If	you	select	<b>Use</b></text>
<text top="932" left="54" width="535" height="19" font="3"><b>Animation	Blueprint</b>	from	<b>Animation	Mode</b>	and	then	select</text>
<text top="958" left="54" width="768" height="19" font="3"><b>ASP_HeroTPP_AnimBlueprint</b>	from	the	drop-down	menu,	the	character	will	appear	to</text>
<text top="983" left="54" width="762" height="20" font="2">behave	much	better	in	the	game,	because	the	animation	will	be	adjusted	by	the	blueprint</text>
<text top="1009" left="54" width="574" height="20" font="2">(which	would	have	been	done	by	an	artist)	as	the	character	moves.</text>
</page>
<page number="306" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="637" height="221" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-306_1.jpg"/>
<image top="608" left="54" width="685" height="457" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-306_2.jpg"/>
<text top="345" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="384" left="54" width="598" height="20" font="2">We	can’t	cover	everything	here.	Animation	blueprints	are	covered	in	</text>
<text top="384" left="652" width="95" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#398">Chapter	11</a></text>
<text top="384" left="746" width="5" height="20" font="2">,</text>
<text top="410" left="54" width="738" height="20" font="4"><i>Monsters</i>.	If	you’re	really	interested	in	animation,	it	also	wouldn’t	be	a	bad	idea	to	sit</text>
<text top="435" left="54" width="755" height="20" font="2">through	a	couple	of	Gnomon	Workshop	tutorials	on	IK,	animation,	and	rigging,	such	as</text>
<text top="461" left="54" width="310" height="20" font="2">Alex	Alvarez’s	<i>Rigging	101	</i>class	at</text>
<text top="487" left="54" width="601" height="20" font="1"><a href="http://www.thegnomonworkshop.com/store/product/768/Rigging-101">http://www.thegnomonworkshop.com/store/product/768/Rigging-101</a></text>
<text top="487" left="655" width="5" height="20" font="2"><a href="http://www.thegnomonworkshop.com/store/product/768/Rigging-101">.</a></text>
<text top="524" left="54" width="772" height="20" font="2">One	more	thing:	let’s	make	the	camera	for	the	Avatar	appear	behind	it.	This	will	give	you</text>
<text top="550" left="54" width="769" height="20" font="2">a	third	person’s	point-of-view,	which	will	allow	you	to	see	the	whole	character,	as	shown</text>
<text top="576" left="54" width="493" height="20" font="2">in	the	following	screenshot	with	the	corresponding	steps:</text>
<text top="1134" left="69" width="593" height="20" font="2">1.	 In	the	<b>BP_Avatar</b>	blueprint	editor,	click	on	the	<b>Components</b>	tab.</text>
<text top="1160" left="69" width="265" height="20" font="2">2.	 Click	on	<b>Add	Component</b>.</text>
<text top="1186" left="69" width="252" height="20" font="2">3.	 Choose	to	add	a	<b>Camera</b>.</text>
</page>
<page number="307" position="absolute" top="0" left="0" height="1262" width="892">
<image top="189" left="54" width="347" height="268" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-307_1.jpg"/>
<text top="79" left="54" width="753" height="20" font="2">A	camera	will	appear	in	the	viewport.	You	can	click	on	the	camera	and	move	it	around.</text>
<text top="105" left="54" width="741" height="20" font="2">Position	the	camera	so	that	it	is	somewhere	behind	the	player.	Make	sure	that	the	blue</text>
<text top="131" left="54" width="774" height="20" font="2">arrow	on	the	player	is	facing	the	same	direction	as	the	camera.	If	it	isn’t,	rotate	the	Avatar</text>
<text top="157" left="54" width="621" height="20" font="2">model	mesh	so	that	it	faces	the	same	direction	as	its	blue-colored	arrow.</text>
<text top="494" left="58" width="777" height="20" font="4"><i>The	blue-colored	arrow	on	your	model	mesh	indicates	the	forward	direction	for	the	model</i></text>
<text top="520" left="73" width="747" height="20" font="4"><i>mesh.	Make	sure	that	the	camera’s	opening	faces	the	same	direction	as	the	character’s</i></text>
<text top="546" left="382" width="128" height="20" font="4"><i>forward	vector</i></text>
</page>
<page number="308" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="309" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="782" height="39" font="0"><b>Writing	C++	code	that	controls	the	game’s</b></text>
<text top="116" left="54" width="177" height="39" font="0"><b>character</b></text>
<text top="172" left="54" width="740" height="20" font="2">When	you	launch	your	UE4	game,	you	might	notice	that	the	camera	is	a	default,	free-</text>
<text top="198" left="54" width="734" height="20" font="2">flying	camera.	What	we	will	do	now	is	make	the	starting	character	an	instance	of	our</text>
<text top="228" left="54" width="62" height="14" font="5">Avatar</text>
<text top="224" left="116" width="444" height="20" font="2">	class	and	control	our	character	using	the	keyboard.</text>
</page>
<page number="310" position="absolute" top="0" left="0" height="1262" width="892">
<image top="169" left="54" width="785" height="170" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-310_1.jpg"/>
<image top="605" left="54" width="587" height="261" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-310_2.jpg"/>
<text top="61" left="54" width="748" height="32" font="7"><b>Making	the	player	an	instance	of	the	Avatar	class</b></text>
<text top="110" left="54" width="763" height="20" font="2">In	the	Unreal	Editor,	create	a	subclass	of	<b>Game	Mode</b>	by	navigating	to	<b>File</b>	|	<b>Add	Code</b></text>
<text top="137" left="54" width="706" height="19" font="3"><b>To	Project…</b>	and	selecting	<b>Game	Mode</b>.	I	named	mine	<b>GameModeGoldenEgg</b>.</text>
<text top="406" left="54" width="724" height="20" font="2">The	UE4	<b>GameMode</b>	contains	the	rules	of	the	game	and	describes	how	the	game	is</text>
<text top="432" left="54" width="435" height="20" font="2">played	to	the	engine.	We	will	work	more	with	our	</text>
<text top="437" left="489" width="83" height="14" font="5">GameMode</text>
<text top="432" left="572" width="254" height="20" font="2">	class	later.	For	now,	we	need</text>
<text top="458" left="54" width="117" height="20" font="2">to	subclass	it.</text>
<text top="495" left="54" width="765" height="20" font="2">Recompile	your	project	from	Visual	Studio,	so	you	can	create	a	<b>GameModeGoldenEgg</b></text>
<text top="521" left="54" width="761" height="20" font="2">blueprint.	Create	the	<b>GameMode</b>	blueprint	by	going	to	the	<b>Blueprints</b>	icon	in	the	menu</text>
<text top="547" left="54" width="595" height="20" font="2">bar	at	the	top,	clicking	on	<b>GameMode</b>,	and	then	selecting	<b>+	Create</b>	|</text>
<text top="573" left="54" width="754" height="19" font="3"><b>GameModeGoldenEgg</b>	(or	whatever	you	named	your	<b>GameMode</b>	subclass	in	step	1).</text>
<text top="936" left="69" width="731" height="20" font="2">1.	 Name	your	blueprint;	I	called	mine	<b>BP_GameModeGoldenEgg</b>,	as	shown	in	the</text>
<text top="962" left="97" width="186" height="20" font="2">following	screenshot:</text>
</page>
<page number="311" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="498" height="318" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-311_1.jpg"/>
<image top="576" left="97" width="742" height="457" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-311_2.jpg"/>
<text top="440" left="69" width="747" height="20" font="2">2.	 Your	newly	created	blueprint	will	open	in	the	blueprint	editor.	If	it	doesn’t,	you	can</text>
<text top="466" left="97" width="617" height="20" font="2">open	the	<b>BP_GameModeGoldenEgg</b>	class	from	the	<b>Class	Viewer</b>	tab.</text>
<text top="492" left="69" width="741" height="20" font="2">3.	 Select	your	<b>BP_Avatar</b>	class	from	the	<b>Default	Pawn	Class</b>	panel,	as	shown	in	the</text>
<text top="518" left="97" width="740" height="20" font="2">following	screenshot.	The	<b>Default	Pawn	Class</b>	panel	is	the	type	of	object	that	will	be</text>
<text top="544" left="97" width="165" height="20" font="2">used	for	the	player.</text>
<text top="1101" left="69" width="757" height="20" font="2">4.	 Now,	launch	your	game.	You	can	see	a	back	view	as	the	camera	is	placed	behind	the</text>
<text top="1127" left="97" width="185" height="20" font="2">place,	as	shown	here:</text>
</page>
<page number="312" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="432" height="467" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-312_1.jpg"/>
<text top="611" left="54" width="765" height="20" font="2">You’ll	notice	that	you	can’t	move.	Why	is	that?	The	answer	is	because	we	haven’t	set	up</text>
<text top="636" left="54" width="211" height="20" font="2">the	controller	inputs	yet.</text>
</page>
<page number="313" position="absolute" top="0" left="0" height="1262" width="892">
<image top="143" left="97" width="303" height="150" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-313_1.jpg"/>
<image top="394" left="97" width="681" height="457" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-313_2.jpg"/>
<text top="61" left="54" width="417" height="32" font="7"><b>Setting	up	controller	inputs</b></text>
<text top="110" left="69" width="575" height="20" font="2">1.	 To	set	up	controller	inputs,	go	to	<b>Settings</b>	|	<b>Project	Settings…</b>:</text>
<text top="362" left="69" width="720" height="20" font="2">2.	 Next,	in	the	left-hand	side	panel,	scroll	down	until	you	see	<b>Input</b>	under	<b>Engine</b>.</text>
<text top="921" left="69" width="761" height="20" font="2">3.	 On	the	right-hand	side,	you	can	set	up	some	<b>Bindings</b>.	Click	on	the	small	arrow	next</text>
<text top="946" left="97" width="700" height="20" font="2">to	<b>Axis	Mappings</b>	in	order	to	expand	it.	Add	just	two	axis	mappings	to	start,	one</text>
<text top="972" left="97" width="650" height="20" font="2">called	<b>Forward</b>	(connected	to	the	keyboard	letter	<i>W</i>)	and	one	called	<b>Strafe</b></text>
<text top="998" left="97" width="734" height="20" font="2">(connected	to	the	keyboard	letter	<i>D</i>).	Remember	the	names	that	you	set;	we	will	look</text>
<text top="1024" left="97" width="338" height="20" font="2">them	up	in	C++	code	in	just	a	moment.</text>
<text top="1050" left="69" width="564" height="20" font="2">4.	 Close	the	<b>Project	Settings</b>	dialog.	Now,	open	your	C++	code.</text>
<text top="1109" left="54" width="55" height="20" font="2">In	the	</text>
<text top="1113" left="109" width="83" height="14" font="5">Avatar.h</text>
<text top="1109" left="192" width="590" height="20" font="2">	constructor,	you	need	to	add	three	member	function	declarations,	as</text>
<text top="1134" left="54" width="105" height="20" font="2">shown	here:</text>
<text top="1178" left="54" width="83" height="14" font="5">UCLASS()</text>
</page>
<page number="314" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="487" height="14" font="5">class	GOLDENEGG_API	AAvatar	:	public	ACharacter</text>
<text top="78" left="54" width="10" height="14" font="5">{</text>
<text top="99" left="54" width="259" height="14" font="5">		GENERATED_UCLASS_BODY()</text>
<text top="140" left="54" width="518" height="14" font="5">		//	New!	These	3	new	member	function	declarations</text>
<text top="160" left="54" width="508" height="14" font="5">		//	they	will	be	used	to	move	our	player	around!</text>
<text top="181" left="54" width="756" height="14" font="5">		void	SetupPlayerInputComponent(class	UInputComponent*		InputComponent)	</text>
<text top="201" left="54" width="93" height="14" font="5">override;</text>
<text top="222" left="54" width="363" height="14" font="5">		void	MoveForward(	float	amount	);</text>
<text top="242" left="54" width="342" height="14" font="5">		void	MoveRight(	float	amount	);</text>
<text top="263" left="54" width="21" height="14" font="5">};</text>
<text top="294" left="54" width="457" height="20" font="2">Notice	how	the	first	member	function	we’re	adding	(</text>
<text top="298" left="511" width="259" height="14" font="5">SetupPlayerInputComponent</text>
<text top="294" left="770" width="53" height="20" font="2">)	is	an</text>
<text top="320" left="54" width="260" height="20" font="2">override	of	a	virtual	function.	</text>
<text top="324" left="314" width="259" height="14" font="5">SetupPlayerInputComponent</text>
<text top="320" left="573" width="228" height="20" font="2">	is	a	virtual	function	in	the</text>
<text top="350" left="54" width="52" height="14" font="5">APawn</text>
<text top="346" left="106" width="97" height="20" font="2">	base	class.</text>
<text top="383" left="54" width="55" height="20" font="2">In	the	</text>
<text top="387" left="109" width="104" height="14" font="5">Avatar.cpp</text>
<text top="383" left="213" width="595" height="20" font="2">	file,	you	need	to	put	the	function	bodies.	Add	the	following	member</text>
<text top="408" left="54" width="176" height="20" font="2">function	definitions:</text>
<text top="452" left="54" width="653" height="14" font="5">void	AAvatar::SetupPlayerInputComponent(class	UInputComponent*	</text>
<text top="472" left="54" width="155" height="14" font="5">InputComponent)</text>
<text top="493" left="54" width="10" height="14" font="5">{</text>
<text top="513" left="54" width="249" height="14" font="5">		check(InputComponent);</text>
<text top="534" left="54" width="704" height="14" font="5">		InputComponent-&gt;BindAxis(&#34;Forward&#34;,	this,		&amp;AAvatar::MoveForward);</text>
<text top="554" left="54" width="663" height="14" font="5">		InputComponent-&gt;BindAxis(&#34;Strafe&#34;,	this,	&amp;AAvatar::MoveRight);</text>
<text top="575" left="54" width="10" height="14" font="5">}</text>
<text top="606" left="54" width="780" height="20" font="2">This	member	function	looks	up	the	<b>Forward</b>	and	<b>Strafe</b>	axis	bindings	that	we	just	created</text>
<text top="632" left="54" width="616" height="20" font="2">in	Unreal	Editor	and	connects	them	to	the	member	functions	inside	the	</text>
<text top="636" left="670" width="41" height="14" font="5">this</text>
<text top="632" left="712" width="116" height="20" font="2">	class.	Which</text>
<text top="658" left="54" width="594" height="20" font="2">member	functions	should	we	connect	to?	Why,	we	should	connect	to</text>
<text top="688" left="54" width="207" height="14" font="5">AAvatar::MoveForward</text>
<text top="684" left="261" width="42" height="20" font="2">	and	</text>
<text top="688" left="303" width="186" height="14" font="5">AAvatar::MoveRight</text>
<text top="684" left="490" width="270" height="20" font="2">.	Here	are	the	member	function</text>
<text top="710" left="54" width="302" height="20" font="2">definitions	for	these	two	functions:</text>
<text top="753" left="54" width="425" height="14" font="5">void	AAvatar::MoveForward(	float	amount	)</text>
<text top="774" left="54" width="10" height="14" font="5">{</text>
<text top="794" left="54" width="611" height="14" font="5">		//	Don't	enter	the	body	of	this	function	if	Controller	is</text>
<text top="815" left="54" width="611" height="14" font="5">		//	not	set	up	yet,	or	if	the	amount	to	move	is	equal	to	0</text>
<text top="835" left="54" width="290" height="14" font="5">		if(	Controller	&amp;&amp;	amount	)</text>
<text top="856" left="54" width="31" height="14" font="5">		{</text>
<text top="876" left="54" width="435" height="14" font="5">				FVector	fwd	=	GetActorForwardVector();</text>
<text top="897" left="54" width="539" height="14" font="5">				//	we	call	AddMovementInput	to	actually	move	the</text>
<text top="917" left="54" width="497" height="14" font="5">				//	player	by	`amount`	in	the	`fwd`	direction</text>
<text top="938" left="54" width="352" height="14" font="5">				AddMovementInput(fwd,	amount);</text>
<text top="958" left="54" width="31" height="14" font="5">		}</text>
<text top="979" left="54" width="10" height="14" font="5">}</text>
<text top="1020" left="54" width="404" height="14" font="5">void	AAvatar::MoveRight(	float	amount	)</text>
<text top="1041" left="54" width="10" height="14" font="5">{</text>
<text top="1061" left="54" width="290" height="14" font="5">		if(	Controller	&amp;&amp;	amount	)</text>
<text top="1082" left="54" width="31" height="14" font="5">		{</text>
<text top="1102" left="54" width="435" height="14" font="5">				FVector	right	=	GetActorRightVector();</text>
<text top="1123" left="54" width="373" height="14" font="5">				AddMovementInput(right,	amount);</text>
<text top="1143" left="54" width="31" height="14" font="5">		}</text>
<text top="1164" left="54" width="10" height="14" font="5">}</text>
</page>
<page number="315" position="absolute" top="0" left="0" height="1262" width="892">
<image top="489" left="54" width="731" height="494" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-315_1.jpg"/>
<text top="59" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="97" left="54" width="39" height="20" font="2">The	</text>
<text top="102" left="93" width="104" height="14" font="5">Controller</text>
<text top="97" left="197" width="132" height="20" font="2">	object	and	the	</text>
<text top="102" left="328" width="166" height="14" font="5">AddMovementInput</text>
<text top="97" left="494" width="247" height="20" font="2">	functions	are	defined	in	the	</text>
<text top="102" left="741" width="52" height="14" font="5">APawn</text>
<text top="97" left="793" width="44" height="20" font="2">	base</text>
<text top="123" left="54" width="138" height="20" font="2">class.	Since	the	</text>
<text top="128" left="192" width="62" height="14" font="5">Avatar</text>
<text top="123" left="254" width="168" height="20" font="2">	class	derives	from	</text>
<text top="128" left="422" width="104" height="14" font="5">ACharacter</text>
<text top="123" left="525" width="246" height="20" font="2">,	which	in	turn	derives	from	</text>
<text top="128" left="772" width="52" height="14" font="5">APawn</text>
<text top="123" left="824" width="5" height="20" font="2">,</text>
<text top="149" left="54" width="524" height="20" font="2">we	get	free	use	of	all	the	member	functions	in	the	base	class	</text>
<text top="154" left="578" width="52" height="14" font="5">APawn</text>
<text top="149" left="630" width="182" height="20" font="2">.	Now	do	you	see	the</text>
<text top="175" left="54" width="325" height="20" font="2">beauty	of	inheritance	and	code	reuse?</text>
<text top="213" left="54" width="89" height="22" font="8"><b>Exercise</b></text>
<text top="252" left="54" width="666" height="20" font="2">Add	axis	bindings	and	C++	functions	to	move	the	player	to	the	left	and	back.</text>
<text top="290" left="54" width="50" height="22" font="8"><b>Note</b></text>
<text top="329" left="54" width="781" height="20" font="2">Here’	a	hint:	you	only	need	to	add	axis	bindings	if	you	realize	going	backwards	is	only	the</text>
<text top="354" left="54" width="230" height="20" font="2">negative	of	going	forward.</text>
<text top="393" left="54" width="88" height="22" font="8"><b>Solution</b></text>
<text top="431" left="54" width="755" height="20" font="2">Enter	two	extra	axis	bindings	by	navigating	to	<b>Settings</b>	|	<b>Project	Settings…</b>	|	<b>Input</b>,	as</text>
<text top="457" left="54" width="105" height="20" font="2">shown	here:</text>
<text top="1052" left="54" width="743" height="20" font="2">Scale	the	<b>S</b>	and	<b>A</b>	inputs	by	-1.0.	This	will	invert	the	axis.	So	pressing	the	<i>S</i>	key	in	the</text>
<text top="1078" left="54" width="370" height="20" font="2">game	will	move	the	player	forward.	Try	it!</text>
<text top="1115" left="54" width="700" height="20" font="2">Alternatively,	you	can	define	two	completely	separate	member	functions	in	your	</text>
<text top="1119" left="754" width="73" height="14" font="5">AAvatar</text>
<text top="1141" left="54" width="402" height="20" font="2">class,	as	follows,	and	bind	the	<i>A</i>	and	<i>S</i>	keys	to	</text>
<text top="1145" left="456" width="176" height="14" font="5">AAvatar::MoveLeft</text>
<text top="1141" left="632" width="37" height="20" font="2">	and</text>
<text top="1171" left="54" width="176" height="14" font="5">AAvatar::MoveBack</text>
<text top="1167" left="230" width="121" height="20" font="2">,	respectively:</text>
</page>
<page number="316" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="394" height="14" font="5">void	AAvatar::MoveLeft(	float	amount	)</text>
<text top="78" left="54" width="10" height="14" font="5">{</text>
<text top="99" left="54" width="290" height="14" font="5">		if(	Controller	&amp;&amp;	amount	)</text>
<text top="119" left="54" width="31" height="14" font="5">		{</text>
<text top="140" left="54" width="435" height="14" font="5">				FVector	left	=	-GetActorRightVector();</text>
<text top="160" left="54" width="363" height="14" font="5">				AddMovementInput(left,	amount);</text>
<text top="181" left="54" width="31" height="14" font="5">		}</text>
<text top="201" left="54" width="10" height="14" font="5">}</text>
<text top="222" left="54" width="394" height="14" font="5">void	AAvatar::MoveBack(	float	amount	)</text>
<text top="242" left="54" width="10" height="14" font="5">{</text>
<text top="263" left="54" width="290" height="14" font="5">		if(	Controller	&amp;&amp;	amount	)</text>
<text top="283" left="54" width="31" height="14" font="5">		{</text>
<text top="304" left="54" width="456" height="14" font="5">				FVector	back	=	-GetActorForwardVector();</text>
<text top="324" left="54" width="363" height="14" font="5">				AddMovementInput(back,	amount);</text>
<text top="345" left="54" width="31" height="14" font="5">		}</text>
<text top="365" left="54" width="10" height="14" font="5">}</text>
</page>
<page number="317" position="absolute" top="0" left="0" height="1262" width="892">
<image top="231" left="54" width="680" height="392" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-317_1.jpg"/>
<text top="61" left="54" width="218" height="32" font="7"><b>Yaw	and	pitch</b></text>
<text top="110" left="54" width="771" height="20" font="2">We	can	change	the	direction	in	which	the	player	looks	by	setting	the	yaw	and	pitch	of	the</text>
<text top="136" left="54" width="88" height="20" font="2">controller.</text>
<text top="173" left="54" width="704" height="20" font="2">All	we	have	to	do	here	is	add	in	new	axis	bindings	for	the	mouse,	as	shown	in	the</text>
<text top="199" left="54" width="186" height="20" font="2">following	screenshot:</text>
<text top="693" left="54" width="631" height="20" font="2">From	C++,	you	need	to	add	in	two	new	member	function	declarations	to	</text>
<text top="697" left="685" width="93" height="14" font="5">AAvatar.h</text>
<text top="693" left="778" width="6" height="20" font="2">:</text>
<text top="736" left="54" width="259" height="14" font="5">void	Yaw(	float	amount	);</text>
<text top="756" left="54" width="280" height="14" font="5">void	Pitch(	float	amount	);</text>
<text top="788" left="54" width="456" height="20" font="2">The	bodies	of	these	member	functions	will	go	in	the	</text>
<text top="792" left="510" width="114" height="14" font="5">AAvatar.cpp</text>
<text top="788" left="624" width="40" height="20" font="2">	file:</text>
<text top="831" left="54" width="342" height="14" font="5">void	AAvatar::Yaw(	float	amount	)</text>
<text top="851" left="54" width="10" height="14" font="5">{</text>
<text top="872" left="54" width="756" height="14" font="5">		AddControllerYawInput(200.f	*	amount	*	GetWorld()-	&gt;GetDeltaSeconds());</text>
<text top="893" left="54" width="10" height="14" font="5">}</text>
<text top="913" left="54" width="363" height="14" font="5">void	AAvatar::Pitch(	float	amount	)</text>
<text top="934" left="54" width="10" height="14" font="5">{</text>
<text top="954" left="54" width="777" height="14" font="5">		AddControllerPitchInput(200.f	*	amount	*	GetWorld()-	&gt;GetDeltaSeconds());</text>
<text top="975" left="54" width="10" height="14" font="5">}</text>
<text top="1006" left="54" width="198" height="20" font="2">Then,	add	two	lines	to	</text>
<text top="1010" left="252" width="259" height="14" font="5">SetupPlayerInputComponent</text>
<text top="1006" left="511" width="6" height="20" font="2">:</text>
<text top="1049" left="54" width="663" height="14" font="5">void	AAvatar::SetupPlayerInputComponent(class	UInputComponent*		</text>
<text top="1070" left="54" width="155" height="14" font="5">InputComponent)</text>
<text top="1090" left="54" width="10" height="14" font="5">{</text>
<text top="1111" left="54" width="249" height="14" font="5">		//	..	as	before,	plus:</text>
<text top="1131" left="54" width="570" height="14" font="5">		InputComponent-&gt;BindAxis(&#34;Yaw&#34;,	this,	&amp;AAvatar::Yaw);</text>
<text top="1152" left="54" width="611" height="14" font="5">		InputComponent-&gt;BindAxis(&#34;Pitch&#34;,	this,	&amp;AAvatar::Pitch);</text>
<text top="1172" left="54" width="10" height="14" font="5">}</text>
</page>
<page number="318" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="319" height="20" font="2">Here,	notice	how	I’ve	multiplied	the	</text>
<text top="62" left="373" width="62" height="14" font="5">amount</text>
<text top="57" left="436" width="120" height="20" font="2">	values	in	the	</text>
<text top="62" left="556" width="31" height="14" font="5">Yaw</text>
<text top="57" left="587" width="42" height="20" font="2">	and	</text>
<text top="62" left="629" width="52" height="14" font="5">Pitch</text>
<text top="57" left="680" width="156" height="20" font="2">	functions	by	200.</text>
<text top="83" left="54" width="619" height="20" font="2">This	number	represents	the	mouse’s	sensitivity.	You	can	(should)	add	a	</text>
<text top="88" left="673" width="52" height="14" font="5">float</text>
<text top="83" left="724" width="98" height="20" font="2">	member	to</text>
<text top="109" left="54" width="32" height="20" font="2">the	</text>
<text top="114" left="86" width="73" height="14" font="5">AAvatar</text>
<text top="109" left="158" width="505" height="20" font="2">	class	in	order	to	avoid	hardcoding	this	sensitivity	number.</text>
<text top="150" left="54" width="300" height="14" font="5">GetWorld()-&gt;GetDeltaSeconds()</text>
<text top="146" left="354" width="468" height="20" font="2">	gives	you	the	amount	of	time	that	passed	between	the</text>
<text top="172" left="54" width="336" height="20" font="2">last	frame	and	this	frame.	It	isn’t	a	lot:	</text>
<text top="176" left="390" width="176" height="14" font="5">GetDeltaSeconds()</text>
<text top="172" left="567" width="181" height="20" font="2">	should	be	around	16</text>
<text top="198" left="54" width="645" height="20" font="2">milliseconds	(0.016	s)	most	of	the	time	(if	your	game	is	running	at	60	fps).</text>
<text top="235" left="54" width="777" height="20" font="2">So,	now	we	have	player	input	and	control.	To	add	new	functionality	to	your	Avatar,	this	is</text>
<text top="260" left="54" width="198" height="20" font="2">all	that	you	have	to	do:</text>
<text top="297" left="69" width="718" height="20" font="2">1.	 Bind	your	key	or	mouse	actions	by	going	to	<b>Settings</b>	|	<b>Project	Settings</b>	|	<b>Input</b>.</text>
<text top="323" left="69" width="512" height="20" font="2">2.	 Add	a	member	function	to	run	when	that	key	is	pressed.</text>
<text top="349" left="69" width="146" height="20" font="2">3.	 Add	a	line	to	</text>
<text top="353" left="215" width="259" height="14" font="5">SetupPlayerInputComponent</text>
<text top="349" left="474" width="354" height="20" font="2">,	connecting	the	name	of	the	bound	input</text>
<text top="375" left="97" width="555" height="20" font="2">to	the	member	function	we	want	to	run	when	that	key	is	pushed.</text>
</page>
<page number="319" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="320" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="704" height="39" font="0"><b>Creating	non-player	character	entities</b></text>
<text top="120" left="54" width="783" height="20" font="2">So,	we	need	to	create	a	few	<b>NPC</b>s	(<b>non-playable	characters</b>).	NPCs	are	characters	within</text>
<text top="146" left="54" width="774" height="20" font="2">the	game	that	help	the	player.	Some	offer	special	items,	some	are	shop	vendors,	and	some</text>
<text top="172" left="54" width="779" height="20" font="2">have	information	to	give	to	the	player.	In	this	game,	they	will	react	to	the	player	as	he	gets</text>
<text top="198" left="54" width="387" height="20" font="2">near.	Let’s	program	in	some	of	this	behavior.</text>
<text top="235" left="54" width="768" height="20" font="2">First,	create	another	subclass	of	<b>Character</b>.	In	the	UE4	Editor,	go	to	<b>File	</b>|<b>	Add	Code	To</b></text>
<text top="261" left="54" width="755" height="19" font="3"><b>Project…</b>	and	choose	the	<b>Character</b>	class	from	which	you	can	make	a	subclass.	Name</text>
<text top="286" left="54" width="122" height="20" font="2">your	subclass	</text>
<text top="291" left="176" width="31" height="14" font="5">NPC</text>
<text top="286" left="207" width="5" height="20" font="2">.</text>
<text top="323" left="54" width="775" height="20" font="2">Now,	edit	your	code	in	Visual	Studio.	Each	NPC	will	have	a	message	to	tell	the	player,	so</text>
<text top="349" left="54" width="104" height="20" font="2">we	add	in	a	</text>
<text top="353" left="158" width="197" height="14" font="5">UPROPERTY()	FString</text>
<text top="349" left="355" width="138" height="20" font="2">	property	to	the	</text>
<text top="353" left="493" width="31" height="14" font="5">NPC</text>
<text top="349" left="524" width="53" height="20" font="2">	class.</text>
<text top="387" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="430" left="54" width="73" height="14" font="5">FString</text>
<text top="426" left="127" width="257" height="20" font="2">s	are	UE4’s	version	of	C++‘s	</text>
<text top="430" left="383" width="83" height="14" font="5">&lt;string&gt;</text>
<text top="426" left="466" width="338" height="20" font="2">	type.	When	programming	in	UE4,	you</text>
<text top="452" left="54" width="129" height="20" font="2">should	use	the	</text>
<text top="456" left="183" width="73" height="14" font="5">FString</text>
<text top="452" left="255" width="216" height="20" font="2">	objects	over	C++	STL’s	</text>
<text top="456" left="471" width="62" height="14" font="5">string</text>
<text top="452" left="534" width="270" height="20" font="2">	objects.	In	general,	you	should</text>
<text top="478" left="54" width="718" height="20" font="2">preferably	use	UE4’s	built-in	types,	as	they	guarantee	cross-platform	compatibility.</text>
<text top="514" left="54" width="138" height="20" font="2">How	to	add	the	</text>
<text top="519" left="192" width="197" height="14" font="5">UPROPERTY()	FString</text>
<text top="514" left="389" width="138" height="20" font="2">	property	to	the	</text>
<text top="519" left="527" width="31" height="14" font="5">NPC</text>
<text top="514" left="558" width="272" height="20" font="2">	class	is	shown	in	the	following</text>
<text top="540" left="54" width="47" height="20" font="2">code:</text>
<text top="584" left="54" width="83" height="14" font="5">UCLASS()</text>
<text top="604" left="54" width="456" height="14" font="5">class	GOLDENEGG_API	ANPC	:	public	ACharacter</text>
<text top="625" left="54" width="10" height="14" font="5">{</text>
<text top="645" left="54" width="259" height="14" font="5">		GENERATED_UCLASS_BODY()</text>
<text top="666" left="54" width="725" height="14" font="5">		UPROPERTY(VisibleAnywhere,	BlueprintReadOnly,	Category	=		Collision)</text>
<text top="686" left="54" width="528" height="14" font="5">		TSubobjectPtr&lt;class	USphereComponent&gt;	ProxSphere;</text>
<text top="707" left="54" width="559" height="14" font="5">		//	This	is	the	NPC's	message	that	he	has	to	tell	us.</text>
<text top="727" left="54" width="715" height="14" font="5">		UPROPERTY(EditAnywhere,	BlueprintReadWrite,	Category	=		NPCMessage)</text>
<text top="748" left="54" width="218" height="14" font="5">		FString	NpcMessage;</text>
<text top="768" left="54" width="673" height="14" font="5">		//	When	you	create	a	blueprint	from	this	class,	you	want	to	be	</text>
<text top="789" left="54" width="466" height="14" font="5">		//	able	to	edit	that	message	in	blueprints,</text>
<text top="809" left="54" width="663" height="14" font="5">		//	that's	why	we	have	the	EditAnywhere	and	BlueprintReadWrite	</text>
<text top="830" left="54" width="166" height="14" font="5">		//	properties.</text>
<text top="850" left="54" width="10" height="14" font="5">}</text>
<text top="882" left="54" width="196" height="20" font="2">Notice	that	we	put	the	</text>
<text top="886" left="250" width="124" height="14" font="5">EditAnywhere</text>
<text top="882" left="374" width="42" height="20" font="2">	and	</text>
<text top="886" left="416" width="186" height="14" font="5">BlueprintReadWrite</text>
<text top="882" left="603" width="162" height="20" font="2">	properties	into	the</text>
<text top="912" left="54" width="93" height="14" font="5">UPROPERTY</text>
<text top="908" left="147" width="237" height="20" font="2">	macro.	This	will	make	the	</text>
<text top="912" left="384" width="104" height="14" font="5">NpcMessage</text>
<text top="908" left="488" width="193" height="20" font="2">	editable	in	blueprints.</text>
<text top="946" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="984" left="54" width="574" height="20" font="2">Full	descriptions	of	all	the	UE4	property	specifiers	are	available	at</text>
<text top="1010" left="54" width="936" height="20" font="1"><a href="https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Reference/Properties/index.html">https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Reference/Prop</a>erties/index.html</text>
<text top="1047" left="54" width="366" height="20" font="2">Recompile	your	project	(as	we	did	for	the	</text>
<text top="1051" left="420" width="62" height="14" font="5">Avatar</text>
<text top="1047" left="482" width="326" height="20" font="2">	class).	Then,	go	to	the	<b>Class	Viewer</b>,</text>
<text top="1073" left="54" width="165" height="20" font="2">right	click	on	your	</text>
<text top="1077" left="219" width="31" height="14" font="5">NPC</text>
<text top="1073" left="251" width="315" height="20" font="2">	class,	and	create	a	blueprint	from	it.</text>
<text top="1110" left="54" width="644" height="20" font="2">Each	NPC	character	you	want	to	create	can	be	a	blueprint	based	off	of	the	</text>
<text top="1114" left="698" width="31" height="14" font="5">NPC</text>
<text top="1110" left="729" width="110" height="20" font="2">	class.	Name</text>
<text top="1136" left="54" width="710" height="20" font="2">each	blueprint	something	unique,	as	we’ll	be	selecting	a	different	model	mesh	and</text>
<text top="1161" left="54" width="641" height="20" font="2">message	for	each	NPC	that	appears,	as	shown	in	the	following	screenshot:</text>
</page>
<page number="321" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="455" height="239" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-321_1.jpg"/>
<image top="445" left="54" width="545" height="625" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-321_2.jpg"/>
<text top="361" left="54" width="770" height="20" font="2">Now,	open	the	blueprint,	select	skeletal<b>	mesh</b>	from	the	<b>Add</b>	<b>Components</b>,	and	adjust	the</text>
<text top="387" left="54" width="709" height="20" font="2">capsule	(as	we	did	for	<b>BP_Avatar</b>).	You	can	also	change	the	material	of	your	new</text>
<text top="413" left="54" width="441" height="20" font="2">character	so	that	he	looks	different	from	the	player.</text>
<text top="1107" left="71" width="750" height="20" font="4"><i>Change	the	material	of	your	character	in	your	mesh’s	properties.	Under	the	Rendering</i></text>
<text top="1133" left="71" width="751" height="20" font="4"><i>tab,	click	on	the	+	icon	to	add	a	new	material.	Then,	click	on	the	small	capsule-shaped</i></text>
<text top="1159" left="276" width="341" height="20" font="4"><i>item	to	select	a	material	to	render	with.</i></text>
</page>
<page number="322" position="absolute" top="0" left="0" height="1262" width="892">
<image top="181" left="54" width="719" height="352" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-322_1.jpg"/>
<image top="661" left="54" width="423" height="259" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-322_2.jpg"/>
<text top="71" left="54" width="297" height="20" font="2">In	the	<b>Defaults</b>	tab,	search	for	the	</text>
<text top="76" left="351" width="104" height="14" font="5">NpcMessage</text>
<text top="71" left="455" width="358" height="20" font="2">	property.	This	is	our	connection	between</text>
<text top="97" left="54" width="413" height="20" font="2">C++	code	and	blueprints:	because	we	entered	a	</text>
<text top="102" left="467" width="114" height="14" font="5">UPROPERTY()</text>
<text top="97" left="581" width="141" height="20" font="2">	function	on	the	</text>
<text top="102" left="722" width="73" height="14" font="5">FString</text>
<text top="128" left="54" width="104" height="14" font="5">NpcMessage</text>
<text top="123" left="158" width="681" height="20" font="2">	variable,	that	property	appears	editable	within	UE4,	as	shown	in	the	following</text>
<text top="149" left="54" width="97" height="20" font="2">screenshot:</text>
<text top="603" left="54" width="762" height="20" font="2">Now,	drag	<b>BP_NPC_Owen</b>	into	the	scene.	You	can	create	a	second	or	third	character	as</text>
<text top="629" left="54" width="635" height="20" font="2">well,	and	be	sure	to	give	them	unique	names,	appearances,	and	messages.</text>
<text top="957" left="55" width="782" height="20" font="4"><i>I’ve	created	two	blueprints	for	NPCs	based	on	the	NPC	base	classes,	BP_NPC_Justin	and</i></text>
<text top="983" left="66" width="761" height="20" font="4"><i>BP_NPC_Owen.	They	have	different	appearances	and	different	messages	for	the	player.</i></text>
</page>
<page number="323" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="432" height="369" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-323_1.jpg"/>
<text top="459" left="320" width="252" height="20" font="4"><i>Justin	and	Owen	in	the	scene</i></text>
</page>
<page number="324" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="325" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="762" height="39" font="0"><b>Displaying	a	quote	from	each	NPC	dialog</b></text>
<text top="116" left="54" width="67" height="39" font="0"><b>box</b></text>
<text top="172" left="54" width="779" height="20" font="2">To	display	a	dialog	box,	we	need	a	custom	(heads-up	display)	<b>HUD</b>.	In	the	UE4	editor,	go</text>
<text top="198" left="54" width="426" height="20" font="2">to	<b>File</b>	|	<b>Add	Code	To	Project…</b>	and	choose	the	</text>
<text top="202" left="480" width="31" height="14" font="5">HUD</text>
<text top="198" left="511" width="282" height="20" font="2">	class	from	which	the	subclass	is</text>
<text top="224" left="54" width="517" height="20" font="2">created.	Name	your	subclass	as	you	wish;	I’ve	named	mine	</text>
<text top="228" left="571" width="52" height="14" font="5">MyHUD</text>
<text top="224" left="623" width="5" height="20" font="2">.</text>
<text top="260" left="54" width="234" height="20" font="2">After	you	have	created	the	</text>
<text top="265" left="288" width="52" height="14" font="5">MyHUD</text>
<text top="260" left="340" width="488" height="20" font="2">	class,	let	Visual	Studio	reload.	We	will	make	some	code</text>
<text top="286" left="54" width="46" height="20" font="2">edits.</text>
</page>
<page number="326" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="501" height="32" font="7"><b>Displaying	messages	on	the	HUD</b></text>
<text top="110" left="54" width="90" height="20" font="2">Inside	the	</text>
<text top="115" left="144" width="62" height="14" font="5">AMyHUD</text>
<text top="110" left="206" width="287" height="20" font="2">	class,	we	need	to	implement	the	</text>
<text top="115" left="493" width="93" height="14" font="5">DrawHUD()</text>
<text top="110" left="586" width="221" height="20" font="2">	function	in	order	to	draw</text>
<text top="136" left="54" width="782" height="20" font="2">our	messages	to	the	HUD	and	to	initialize	a	font	to	draw	to	the	HUD	with,	as	shown	in	the</text>
<text top="162" left="54" width="136" height="20" font="2">following	code:</text>
<text top="205" left="54" width="83" height="14" font="5">UCLASS()</text>
<text top="226" left="54" width="414" height="14" font="5">class	GOLDENEGG_API	AMyHUD	:	public	AHUD</text>
<text top="247" left="54" width="10" height="14" font="5">{</text>
<text top="267" left="54" width="259" height="14" font="5">		GENERATED_UCLASS_BODY()</text>
<text top="288" left="54" width="508" height="14" font="5">		//	The	font	used	to	render	the	text	in	the	HUD.</text>
<text top="308" left="54" width="673" height="14" font="5">		UPROPERTY(EditAnywhere,	BlueprintReadWrite,	Category	=	HUDFont)</text>
<text top="329" left="54" width="176" height="14" font="5">		UFont*	hudFont;</text>
<text top="349" left="54" width="549" height="14" font="5">		//	Add	this	function	to	be	able	to	draw	to	the	HUD!</text>
<text top="370" left="54" width="352" height="14" font="5">		virtual	void	DrawHUD()	override;</text>
<text top="390" left="54" width="21" height="14" font="5">};</text>
<text top="421" left="54" width="490" height="20" font="2">The	HUD	font	will	be	set	in	a	blueprinted	version	of	the	</text>
<text top="426" left="544" width="62" height="14" font="5">AMyHUD</text>
<text top="421" left="606" width="97" height="20" font="2">	class.	The	</text>
<text top="426" left="704" width="93" height="14" font="5">DrawHUD()</text>
<text top="447" left="54" width="736" height="20" font="2">function	runs	once	per	frame.	In	order	to	draw	within	the	frame,	add	a	function	to	the</text>
<text top="478" left="54" width="104" height="14" font="5">AMyHUD.cpp</text>
<text top="473" left="158" width="40" height="20" font="2">	file:</text>
<text top="517" left="54" width="228" height="14" font="5">void	AMyHUD::DrawHUD()</text>
<text top="537" left="54" width="10" height="14" font="5">{</text>
<text top="558" left="54" width="466" height="14" font="5">		//	call	superclass	DrawHUD()	function	first</text>
<text top="578" left="54" width="197" height="14" font="5">		Super::DrawHUD();</text>
<text top="599" left="54" width="383" height="14" font="5">		//	then	proceed	to	draw	your	stuff.</text>
<text top="619" left="54" width="249" height="14" font="5">		//	we	can	draw	lines..</text>
<text top="640" left="54" width="549" height="14" font="5">		DrawLine(	200,	300,	400,	500,	FLinearColor::Blue	);</text>
<text top="660" left="54" width="269" height="14" font="5">		//	and	we	can	draw	text!</text>
<text top="681" left="54" width="694" height="14" font="5">		DrawText(	&#34;Greetings	from	Unreal!&#34;,	FVector2D(	0,	0	),	hudFont,		</text>
<text top="701" left="54" width="363" height="14" font="5">FVector2D(	1,	1	),	FColor::White	);</text>
<text top="722" left="54" width="10" height="14" font="5">}</text>
<text top="753" left="54" width="743" height="20" font="2">Wait!	We	haven’t	initialized	our	font	yet.	To	do	this,	we	need	to	set	it	up	in	blueprints.</text>
<text top="779" left="54" width="699" height="20" font="2">Compile	and	run	your	Visual	Studio	project.	Once	you	are	in	the	editor,	go	to	the</text>
<text top="805" left="54" width="744" height="19" font="3"><b>Blueprints</b>	menu	at	the	top	and	navigate	to	<b>GameMode	</b>|<b>	HUD	</b>|<b>	+	Create	</b>|<b>	MyHUD</b>.</text>
</page>
<page number="327" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="785" height="393" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-327_1.jpg"/>
<image top="609" left="54" width="745" height="477" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-327_2.jpg"/>
<text top="482" left="267" width="359" height="20" font="4"><i>Creating	a	blueprint	of	the	MyHUD	class</i></text>
<text top="551" left="54" width="118" height="20" font="2">I	called	mine	</text>
<text top="555" left="172" width="83" height="14" font="5">BP_MyHUD</text>
<text top="551" left="255" width="52" height="20" font="2">.	Edit	</text>
<text top="555" left="307" width="83" height="14" font="5">BP_MyHUD</text>
<text top="551" left="390" width="433" height="20" font="2">	and	select	a	font	from	the	drop-down	menu	under</text>
<text top="577" left="54" width="97" height="19" font="3"><b>HUDFont</b>:</text>
<text top="1124" left="234" width="424" height="20" font="4"><i>I	selected	RobotoDistanceField	for	my	HUD	font</i></text>
</page>
<page number="328" position="absolute" top="0" left="0" height="1262" width="892">
<image top="116" left="54" width="751" height="473" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-328_1.jpg"/>
<image top="690" left="54" width="540" height="418" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-328_2.jpg"/>
<text top="57" left="54" width="779" height="20" font="2">Next,	edit	your	<b>Game	Mode</b>	blueprint	(<b>BP_GameModeGoldenEgg</b>)	and	select	your	new</text>
<text top="88" left="54" width="83" height="14" font="5">BP_MyHUD</text>
<text top="83" left="137" width="46" height="20" font="2">	(not	</text>
<text top="88" left="182" width="52" height="14" font="5">MyHUD</text>
<text top="83" left="234" width="283" height="20" font="2">	class)	for	the	<b>HUD	Class</b>	panel:</text>
<text top="658" left="54" width="649" height="20" font="2">Test	your	program	by	running	it!	You	should	see	text	printed	on	the	screen.</text>
</page>
<page number="329" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="379" height="32" font="7"><b>Using	TArray&lt;Message&gt;</b></text>
<text top="110" left="54" width="647" height="20" font="2">Each	message	we	want	to	display	for	the	player	will	have	a	few	properties:</text>
<text top="147" left="97" width="32" height="20" font="2">An	</text>
<text top="151" left="129" width="73" height="14" font="5">FString</text>
<text top="147" left="201" width="216" height="20" font="2">	variable	for	the	message</text>
<text top="173" left="97" width="20" height="20" font="2">A	</text>
<text top="177" left="117" width="52" height="14" font="5">float</text>
<text top="173" left="169" width="288" height="20" font="2">	variable	for	the	time	to	display	it</text>
<text top="199" left="97" width="32" height="20" font="2">An	</text>
<text top="203" left="129" width="62" height="14" font="5">FColor</text>
<text top="199" left="191" width="321" height="20" font="2">	variable	for	the	color	of	the	message</text>
<text top="236" left="54" width="345" height="20" font="2">So	it	makes	sense	for	us	to	write	a	little	</text>
<text top="240" left="399" width="62" height="14" font="5">struct</text>
<text top="236" left="461" width="345" height="20" font="2">	function	to	contain	all	this	information.</text>
<text top="272" left="54" width="115" height="20" font="2">At	the	top	of	</text>
<text top="277" left="169" width="73" height="14" font="5">MyHUD.h</text>
<text top="272" left="242" width="185" height="20" font="2">,	insert	the	following	</text>
<text top="277" left="427" width="62" height="14" font="5">struct</text>
<text top="272" left="489" width="107" height="20" font="2">	declaration:</text>
<text top="316" left="54" width="145" height="14" font="5">struct	Message</text>
<text top="336" left="54" width="10" height="14" font="5">{</text>
<text top="357" left="54" width="186" height="14" font="5">		FString	message;</text>
<text top="377" left="54" width="135" height="14" font="5">		float	time;</text>
<text top="398" left="54" width="155" height="14" font="5">		FColor	color;</text>
<text top="418" left="54" width="114" height="14" font="5">		Message()</text>
<text top="439" left="54" width="31" height="14" font="5">		{</text>
<text top="459" left="54" width="290" height="14" font="5">				//	Set	the	default	time.</text>
<text top="480" left="54" width="155" height="14" font="5">				time	=	5.f;</text>
<text top="500" left="54" width="269" height="14" font="5">				color	=	FColor::White;</text>
<text top="521" left="54" width="31" height="14" font="5">		}</text>
<text top="541" left="54" width="590" height="14" font="5">		Message(	FString	iMessage,	float	iTime,	FColor	iColor	)</text>
<text top="562" left="54" width="31" height="14" font="5">		{</text>
<text top="582" left="54" width="238" height="14" font="5">				message	=	iMessage;</text>
<text top="603" left="54" width="176" height="14" font="5">				time	=	iTime;</text>
<text top="624" left="54" width="197" height="14" font="5">				color	=	iColor;</text>
<text top="644" left="54" width="31" height="14" font="5">		}</text>
<text top="665" left="54" width="21" height="14" font="5">};</text>
<text top="697" left="54" width="50" height="22" font="8"><b>Note</b></text>
<text top="736" left="54" width="243" height="20" font="2">An	enhanced	version	of	the	</text>
<text top="740" left="297" width="73" height="14" font="5">Message</text>
<text top="736" left="369" width="431" height="20" font="2">	structure	(with	a	background	color)	is	in	the	code</text>
<text top="762" left="54" width="782" height="20" font="2">package	for	this	chapter.	We	used	simpler	code	here	so	that	it’d	be	easier	to	understand	the</text>
<text top="788" left="54" width="68" height="20" font="2">chapter.</text>
<text top="824" left="54" width="140" height="20" font="2">Now,	inside	the	</text>
<text top="829" left="194" width="62" height="14" font="5">AMyHUD</text>
<text top="824" left="256" width="210" height="20" font="2">	class,	we	want	to	add	a	</text>
<text top="829" left="466" width="62" height="14" font="5">TArray</text>
<text top="824" left="528" width="191" height="20" font="2">	of	these	messages.	A	</text>
<text top="829" left="719" width="62" height="14" font="5">TArray</text>
<text top="824" left="781" width="35" height="20" font="2">	is	a</text>
<text top="850" left="54" width="770" height="20" font="2">UE4-defined	special	type	of	dynamically	growable	C++	array.	We	will	cover	the	detailed</text>
<text top="876" left="54" width="58" height="20" font="2">use	of	</text>
<text top="881" left="112" width="62" height="14" font="5">TArray</text>
<text top="876" left="174" width="386" height="20" font="2">	in	the	next	chapter,	but	this	simple	usage	of	</text>
<text top="881" left="560" width="62" height="14" font="5">TArray</text>
<text top="876" left="622" width="145" height="20" font="2">	should	be	a	nice</text>
<text top="902" left="54" width="730" height="20" font="2">introduction	to	garner	your	interest	in	the	usefulness	of	arrays	in	games.	This	will	be</text>
<text top="928" left="54" width="102" height="20" font="2">declared	as	</text>
<text top="932" left="156" width="155" height="14" font="5">TArray&lt;Message&gt;</text>
<text top="928" left="311" width="6" height="20" font="2">:</text>
<text top="971" left="54" width="83" height="14" font="5">UCLASS()</text>
<text top="992" left="54" width="414" height="14" font="5">class	GOLDENEGG_API	AMyHUD	:	public	AHUD</text>
<text top="1012" left="54" width="10" height="14" font="5">{</text>
<text top="1033" left="54" width="259" height="14" font="5">		GENERATED_UCLASS_BODY()</text>
<text top="1053" left="54" width="508" height="14" font="5">		//	The	font	used	to	render	the	text	in	the	HUD.</text>
<text top="1074" left="54" width="673" height="14" font="5">		UPROPERTY(EditAnywhere,	BlueprintReadWrite,	Category	=	HUDFont)</text>
<text top="1095" left="54" width="176" height="14" font="5">		UFont*	hudFont;</text>
<text top="1115" left="54" width="435" height="14" font="5">		//	New!	An	array	of	messages	for	display</text>
<text top="1136" left="54" width="280" height="14" font="5">		TArray&lt;Message&gt;	messages;</text>
<text top="1156" left="54" width="352" height="14" font="5">		virtual	void	DrawHUD()	override;</text>
<text top="1177" left="54" width="611" height="14" font="5">		//	New!	A	function	to	be	able	to	add	a	message	to	display</text>
</page>
<page number="330" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="342" height="14" font="5">		void	addMessage(	Message	msg	);</text>
<text top="78" left="54" width="21" height="14" font="5">};</text>
<text top="109" left="54" width="632" height="20" font="2">Now,	whenever	the	NPC	has	a	message	to	display,	we’re	just	need	to	call</text>
<text top="140" left="54" width="207" height="14" font="5">AMyHud::addMessage()</text>
<text top="135" left="261" width="429" height="20" font="2">	with	our	message.	The	message	will	be	added	to	</text>
<text top="140" left="690" width="62" height="14" font="5">TArray</text>
<text top="135" left="752" width="55" height="20" font="2">	of	the</text>
<text top="161" left="54" width="779" height="20" font="2">messages	to	be	displayed.	When	a	message	expires	(after	a	certain	amount	of	time),	it	will</text>
<text top="187" left="54" width="238" height="20" font="2">be	removed	from	the	HUD.</text>
<text top="224" left="54" width="90" height="20" font="2">Inside	the	</text>
<text top="228" left="144" width="104" height="14" font="5">AMyHUD.cpp</text>
<text top="224" left="247" width="249" height="20" font="2">	file,	add	the	following	code:</text>
<text top="267" left="54" width="228" height="14" font="5">void	AMyHUD::DrawHUD()</text>
<text top="288" left="54" width="10" height="14" font="5">{</text>
<text top="308" left="54" width="197" height="14" font="5">		Super::DrawHUD();</text>
<text top="329" left="54" width="642" height="14" font="5">		//	iterate	from	back	to	front	thru	the	list,	so	if	we	remove</text>
<text top="349" left="54" width="590" height="14" font="5">		//	an	item	while	iterating,	there	won't	be	any	problems</text>
<text top="370" left="54" width="497" height="14" font="5">		for(	int	c	=	messages.Num()	-	1;	c	&gt;=	0;	c--	)</text>
<text top="390" left="54" width="31" height="14" font="5">		{</text>
<text top="411" left="54" width="466" height="14" font="5">				//	draw	the	background	box	the	right	size</text>
<text top="431" left="54" width="228" height="14" font="5">				//	for	the	message</text>
<text top="452" left="54" width="476" height="14" font="5">				float	outputWidth,	outputHeight,	pad=10.f;</text>
<text top="472" left="54" width="777" height="14" font="5">				GetTextSize(	messages[c].message,	outputWidth,	outputHeight,		hudFont,	</text>
<text top="493" left="54" width="62" height="14" font="5">1.f	);</text>
<text top="534" left="54" width="456" height="14" font="5">				float	messageH	=	outputHeight	+	2.f*pad;</text>
<text top="554" left="54" width="352" height="14" font="5">				float	x	=	0.f,	y	=	c*messageH;</text>
<text top="595" left="54" width="207" height="14" font="5">				//	black	backing</text>
<text top="616" left="54" width="704" height="14" font="5">				DrawRect(	FLinearColor::Black,	x,	y,	Canvas-&gt;SizeX,	messageH		);</text>
<text top="636" left="54" width="425" height="14" font="5">				//	draw	our	message	using	the	hudFont</text>
<text top="657" left="54" width="756" height="14" font="5">				DrawText(	messages[c].message,	messages[c].color,	x	+	pad,	y	+		pad,	</text>
<text top="678" left="54" width="104" height="14" font="5">hudFont	);</text>
<text top="719" left="54" width="601" height="14" font="5">				//	reduce	lifetime	by	the	time	that	passed	since	last	</text>
<text top="739" left="54" width="135" height="14" font="5">				//	frame.</text>
<text top="760" left="54" width="559" height="14" font="5">				messages[c].time	-=	GetWorld()-&gt;GetDeltaSeconds();</text>
<text top="801" left="54" width="466" height="14" font="5">				//	if	the	message's	time	is	up,	remove	it</text>
<text top="821" left="54" width="311" height="14" font="5">				if(	messages[c].time	&lt;	0	)</text>
<text top="842" left="54" width="52" height="14" font="5">				{</text>
<text top="862" left="54" width="300" height="14" font="5">						messages.RemoveAt(	c	);</text>
<text top="883" left="54" width="52" height="14" font="5">				}</text>
<text top="903" left="54" width="31" height="14" font="5">		}</text>
<text top="924" left="54" width="10" height="14" font="5">}</text>
<text top="965" left="54" width="394" height="14" font="5">void	AMyHUD::addMessage(	Message	msg	)</text>
<text top="985" left="54" width="10" height="14" font="5">{</text>
<text top="1006" left="54" width="228" height="14" font="5">		messages.Add(	msg	);</text>
<text top="1026" left="54" width="10" height="14" font="5">}</text>
<text top="1058" left="54" width="39" height="20" font="2">The	</text>
<text top="1062" left="93" width="176" height="14" font="5">AMyHUD::DrawHUD()</text>
<text top="1058" left="269" width="382" height="20" font="2">	function	now	draws	all	the	messages	in	the	</text>
<text top="1062" left="651" width="83" height="14" font="5">messages</text>
<text top="1058" left="734" width="90" height="20" font="2">	array,	and</text>
<text top="1084" left="54" width="256" height="20" font="2">arranges	each	message	in	the	</text>
<text top="1088" left="310" width="83" height="14" font="5">messages</text>
<text top="1084" left="393" width="428" height="20" font="2">	array	by	the	amount	of	time	that	passed	since	the</text>
<text top="1110" left="54" width="449" height="20" font="2">last	frame.	Expired	messages	are	removed	from	the	</text>
<text top="1114" left="503" width="83" height="14" font="5">messages</text>
<text top="1110" left="586" width="187" height="20" font="2">	collection	once	their	</text>
<text top="1114" left="773" width="41" height="14" font="5">time</text>
<text top="1136" left="54" width="180" height="20" font="2">value	drops	below	0.</text>
<text top="1174" left="54" width="89" height="22" font="8"><b>Exercise</b></text>
</page>
<page number="331" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="111" height="20" font="2">Refactor	the	</text>
<text top="62" left="165" width="93" height="14" font="5">DrawHUD()</text>
<text top="57" left="259" width="565" height="20" font="2">	function	so	that	the	code	that	draws	the	messages	to	the	screen	is</text>
<text top="83" left="54" width="248" height="20" font="2">in	a	separate	function	called	</text>
<text top="88" left="302" width="145" height="14" font="5">DrawMessages()</text>
<text top="83" left="447" width="5" height="20" font="2">.</text>
<text top="120" left="54" width="39" height="20" font="2">The	</text>
<text top="124" left="93" width="62" height="14" font="5">Canvas</text>
<text top="120" left="155" width="249" height="20" font="2">	variable	is	only	available	in	</text>
<text top="124" left="404" width="93" height="14" font="5">DrawHUD()</text>
<text top="120" left="498" width="224" height="20" font="2">,	so	you	will	have	to	save	</text>
<text top="124" left="722" width="73" height="14" font="5">Canvas-</text>
<text top="150" left="54" width="62" height="14" font="5">&gt;SizeX</text>
<text top="146" left="116" width="42" height="20" font="2">	and	</text>
<text top="150" left="158" width="135" height="14" font="5">Canvas-&gt;SizeY</text>
<text top="146" left="293" width="207" height="20" font="2">	in	class-level	variables.</text>
<text top="184" left="54" width="50" height="22" font="8"><b>Note</b></text>
<text top="223" left="54" width="779" height="20" font="2">Refactoring	means	to	change	the	way	code	works	internally	so	that	it	is	more	organized	or</text>
<text top="249" left="54" width="718" height="20" font="2">easier	to	read	but	still	has	the	same	apparent	result	to	the	user	running	the	program.</text>
<text top="275" left="54" width="783" height="20" font="2">Refactoring	often	is	a	good	practice.	The	reason	why	refactoring	occurs	is	because	nobody</text>
<text top="300" left="54" width="661" height="20" font="2">knows	exactly	what	the	final	code	should	look	like	once	they	start	writing	it.</text>
<text top="339" left="54" width="88" height="22" font="8"><b>Solution</b></text>
<text top="377" left="54" width="68" height="20" font="2">See	the	</text>
<text top="382" left="122" width="228" height="14" font="5">AMyHUD::DrawMessages()</text>
<text top="377" left="350" width="394" height="20" font="2">	function	in	the	code	package	for	this	chapter.</text>
</page>
<page number="332" position="absolute" top="0" left="0" height="1262" width="892">
<image top="220" left="54" width="583" height="540" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-332_1.jpg"/>
<text top="61" left="54" width="658" height="32" font="7"><b>Triggering	an	event	when	it	is	near	an	NPC</b></text>
<text top="110" left="54" width="771" height="20" font="2">To	trigger	an	event	near	the	NPC,	we	need	to	set	an	additional	collision	detection	volume</text>
<text top="136" left="54" width="785" height="20" font="2">that	is	a	bit	wider	than	the	default	capsule	shape.	The	additional	collision	detection	volume</text>
<text top="162" left="54" width="760" height="20" font="2">will	be	a	sphere	around	each	NPC.	When	the	player	steps	into	the	NPC	sphere,	the	NPC</text>
<text top="188" left="54" width="262" height="20" font="2">reacts	and	displays	a	message.</text>
<text top="797" left="66" width="760" height="20" font="4"><i>We’re	going	to	add	the	dark	red	sphere	to	the	NPC	so	that	he	can	tell	when	the	player	is</i></text>
<text top="823" left="416" width="60" height="20" font="4"><i>nearby</i></text>
<text top="892" left="54" width="103" height="20" font="2">Inside	your	</text>
<text top="897" left="157" width="52" height="14" font="5">NPC.h</text>
<text top="892" left="209" width="459" height="20" font="2">	class	file,	add	the	following	code	in	order	to	declare	</text>
<text top="897" left="668" width="104" height="14" font="5">ProxSphere</text>
<text top="892" left="772" width="37" height="20" font="2">	and</text>
<text top="923" left="54" width="93" height="14" font="5">UFUNCTION</text>
<text top="918" left="147" width="62" height="20" font="2">	called	</text>
<text top="923" left="210" width="41" height="14" font="5">Prox</text>
<text top="918" left="251" width="6" height="20" font="2">:</text>
<text top="962" left="54" width="83" height="14" font="5">UCLASS()</text>
<text top="982" left="54" width="456" height="14" font="5">class	GOLDENEGG_API	ANPC	:	public	ACharacter</text>
<text top="1003" left="54" width="10" height="14" font="5">{</text>
<text top="1023" left="54" width="259" height="14" font="5">		GENERATED_UCLASS_BODY()</text>
<text top="1044" left="54" width="559" height="14" font="5">		//	This	is	the	NPC's	message	that	he	has	to	tell	us.</text>
<text top="1064" left="54" width="715" height="14" font="5">		UPROPERTY(EditAnywhere,	BlueprintReadWrite,	Category	=		NPCMessage)</text>
<text top="1085" left="54" width="218" height="14" font="5">		FString	NpcMessage;</text>
<text top="1105" left="54" width="621" height="14" font="5">		//	The	sphere	that	the	player	can	collide	with	to	get	item</text>
<text top="1126" left="54" width="725" height="14" font="5">		UPROPERTY(VisibleAnywhere,	BlueprintReadOnly,	Category	=		Collision)</text>
<text top="1146" left="54" width="528" height="14" font="5">		TSubobjectPtr&lt;class	USphereComponent&gt;	ProxSphere;</text>
<text top="1167" left="54" width="497" height="14" font="5">		//	The	corresponding	body	of	this	function	is	</text>
<text top="1187" left="54" width="549" height="14" font="5">		//	ANPC::Prox_Implementation,	__not__	ANPC::Prox()!</text>
</page>
<page number="333" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="528" height="14" font="5">		//	This	is	a	bit	weird	and	not	what	you'd	expect,</text>
<text top="78" left="54" width="601" height="14" font="5">		//	but	it	happens	because	this	is	a	BlueprintNativeEvent</text>
<text top="99" left="54" width="590" height="14" font="5">		UFUNCTION(BlueprintNativeEvent,	Category	=	&#34;Collision&#34;)</text>
<text top="119" left="54" width="746" height="14" font="5">		void	Prox(	AActor*	OtherActor,	UPrimitiveComponent*	OtherComp,		int32	</text>
<text top="140" left="54" width="694" height="14" font="5">OtherBodyIndex,	bool	bFromSweep,	const	FHitResult	&amp;		SweepResult	);</text>
<text top="160" left="54" width="21" height="14" font="5">};</text>
<text top="191" left="54" width="753" height="20" font="2">This	looks	a	bit	messy,	but	it	is	actually	not	that	complicated.	Here,	we	declare	an	extra</text>
<text top="217" left="54" width="276" height="20" font="2">bounding	sphere	volume	called	</text>
<text top="222" left="330" width="104" height="14" font="5">ProxSphere</text>
<text top="217" left="433" width="366" height="20" font="2">,	which	detects	when	the	player	is	near	the</text>
<text top="243" left="54" width="47" height="20" font="2">NPC.</text>
<text top="280" left="54" width="55" height="20" font="2">In	the	</text>
<text top="284" left="109" width="73" height="14" font="5">NPC.cpp</text>
<text top="280" left="182" width="644" height="20" font="2">	file,	we	need	to	add	the	following	code	in	order	to	complete	the	proximity</text>
<text top="306" left="54" width="85" height="20" font="2">detection:</text>
<text top="349" left="54" width="694" height="14" font="5">ANPC::ANPC(const	class	FPostConstructInitializeProperties&amp;	PCIP)	:	</text>
<text top="370" left="54" width="114" height="14" font="5">Super(PCIP)</text>
<text top="390" left="54" width="10" height="14" font="5">{</text>
<text top="411" left="54" width="704" height="14" font="5">		ProxSphere	=	PCIP.CreateDefaultSubobject&lt;USphereComponent&gt;(this,		</text>
<text top="431" left="54" width="269" height="14" font="5">TEXT(&#34;Proximity	Sphere&#34;));</text>
<text top="452" left="54" width="414" height="14" font="5">		ProxSphere-&gt;AttachTo(	RootComponent	);</text>
<text top="472" left="54" width="394" height="14" font="5">		ProxSphere-&gt;SetSphereRadius(	32.f	);</text>
<text top="493" left="54" width="632" height="14" font="5">		//	Code	to	make	ANPC::Prox()	run	when	this	proximity	sphere</text>
<text top="513" left="54" width="290" height="14" font="5">		//	overlaps	another	actor.</text>
<text top="534" left="54" width="735" height="14" font="5">		ProxSphere-&gt;OnComponentBeginOverlap.AddDynamic(	this,		&amp;ANPC::Prox	);</text>
<text top="554" left="54" width="642" height="14" font="5">		NpcMessage	=	&#34;Hi,	I'm	Owen&#34;;//default	message,	can	be	edited</text>
<text top="575" left="54" width="186" height="14" font="5">		//	in	blueprints</text>
<text top="595" left="54" width="10" height="14" font="5">}</text>
<text top="616" left="54" width="653" height="14" font="5">//	Note!	Although	this	was	declared	ANPC::Prox()	in	the	header,</text>
<text top="636" left="54" width="456" height="14" font="5">//	it	is	now	ANPC::Prox_Implementation	here.</text>
<text top="657" left="54" width="766" height="14" font="5">void	ANPC::Prox_Implementation(	AActor*	OtherActor,		UPrimitiveComponent*	</text>
<text top="678" left="54" width="725" height="14" font="5">OtherComp,	int32	OtherBodyIndex,	bool		bFromSweep,	const	FHitResult	&amp;	</text>
<text top="698" left="54" width="135" height="14" font="5">SweepResult	)</text>
<text top="719" left="54" width="10" height="14" font="5">{</text>
<text top="739" left="54" width="539" height="14" font="5">		//	This	is	where	our	code	will	go	for	what	happens</text>
<text top="760" left="54" width="352" height="14" font="5">		//	when	there	is	an	intersection</text>
<text top="780" left="54" width="10" height="14" font="5">}</text>
<text top="813" left="54" width="763" height="22" font="8"><b>Make	the	NPC	display	something	to	the	HUD	when	something	is	nearby</b></text>
<text top="851" left="54" width="769" height="20" font="2">When	the	player	is	near	the	NPC	sphere	collision	volume,	display	a	message	to	the	HUD</text>
<text top="877" left="54" width="442" height="20" font="2">that	alerts	the	player	about	what	the	NPC	is	saying.</text>
<text top="914" left="54" width="344" height="20" font="2">This	is	the	complete	implementation	of	</text>
<text top="918" left="398" width="259" height="14" font="5">ANPC::Prox_Implementation</text>
<text top="914" left="657" width="6" height="20" font="2">:</text>
<text top="957" left="54" width="756" height="14" font="5">void	ANPC::Prox_Implementation(	AActor*	OtherActor,	UPrimitiveComponent*	</text>
<text top="978" left="54" width="715" height="14" font="5">OtherComp,	int32	OtherBodyIndex,	bool	bFromSweep,	const	FHitResult	&amp;	</text>
<text top="998" left="54" width="135" height="14" font="5">SweepResult	)</text>
<text top="1019" left="54" width="10" height="14" font="5">{</text>
<text top="1039" left="54" width="487" height="14" font="5">		//	if	the	overlapped	actor	is	not	the	player,</text>
<text top="1060" left="54" width="539" height="14" font="5">		//	you	should	just	simply	return	from	the	function</text>
<text top="1080" left="54" width="476" height="14" font="5">		if(	Cast&lt;AAvatar&gt;(	OtherActor	)	==	nullptr	)</text>
<text top="1101" left="54" width="31" height="14" font="5">		{</text>
<text top="1122" left="54" width="114" height="14" font="5">				return;</text>
<text top="1142" left="54" width="31" height="14" font="5">		}</text>
<text top="1163" left="54" width="777" height="14" font="5">		APlayerController*	PController	=	GetWorld()-	&gt;GetFirstPlayerController();</text>
<text top="1183" left="54" width="197" height="14" font="5">		if(	PController	)</text>
</page>
<page number="334" position="absolute" top="0" left="0" height="1262" width="892">
<image top="307" left="54" width="432" height="658" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-334_1.jpg"/>
<text top="57" left="54" width="31" height="14" font="5">		{</text>
<text top="78" left="54" width="590" height="14" font="5">				AMyHUD	*	hud	=	Cast&lt;AMyHUD&gt;(	PController-&gt;GetHUD()	);</text>
<text top="99" left="54" width="673" height="14" font="5">				hud-&gt;addMessage(	Message(	NpcMessage,	5.f,	FColor::White	)	);</text>
<text top="119" left="54" width="31" height="14" font="5">		}</text>
<text top="140" left="54" width="10" height="14" font="5">}</text>
<text top="171" left="54" width="403" height="20" font="2">The	first	thing	we	do	in	this	function	is	to	cast	</text>
<text top="175" left="457" width="104" height="14" font="5">OtherActor</text>
<text top="171" left="561" width="252" height="20" font="2">	(the	thing	that	came	near	the</text>
<text top="197" left="54" width="77" height="20" font="2">NPC)	to	</text>
<text top="201" left="131" width="73" height="14" font="5">AAvatar</text>
<text top="197" left="203" width="267" height="20" font="2">.	The	cast	succeeds	(and	is	not	</text>
<text top="201" left="471" width="73" height="14" font="5">nullptr</text>
<text top="197" left="543" width="65" height="20" font="2">)	when	</text>
<text top="201" left="608" width="104" height="14" font="5">OtherActor</text>
<text top="197" left="711" width="51" height="20" font="2">	is	an	</text>
<text top="201" left="762" width="73" height="14" font="5">AAvatar</text>
<text top="223" left="54" width="779" height="20" font="2">object.	We	get	the	HUD	object	(which	happens	to	be	attached	to	the	player	controller)	and</text>
<text top="249" left="54" width="774" height="20" font="2">pass	a	message	from	the	NPC	to	the	HUD.	The	message	is	displayed	whenever	the	player</text>
<text top="275" left="54" width="483" height="20" font="2">is	within	the	red	bounding	sphere	surrounding	the	NPC.</text>
<text top="1002" left="377" width="140" height="20" font="4"><i>Owen’s	greeting</i></text>
<text top="1072" left="54" width="99" height="22" font="8"><b>Exercises</b></text>
<text top="1111" left="69" width="86" height="20" font="2">1.	 Add	a	</text>
<text top="1115" left="155" width="93" height="14" font="5">UPROPERTY</text>
<text top="1111" left="248" width="574" height="20" font="2">	function	name	for	the	NPC’s	name	so	that	the	name	of	the	NPC	is</text>
<text top="1137" left="97" width="717" height="20" font="2">editable	in	blueprints,	similar	to	the	message	that	the	NPC	has	for	the	player.	Show</text>
<text top="1163" left="97" width="260" height="20" font="2">the	NPC’s	name	in	the	output.</text>
<text top="1188" left="69" width="86" height="20" font="2">2.	 Add	a	</text>
<text top="1193" left="155" width="93" height="14" font="5">UPROPERTY</text>
<text top="1188" left="248" width="132" height="20" font="2">	function	(type	</text>
<text top="1193" left="380" width="114" height="14" font="5">UTexture2D*</text>
<text top="1188" left="494" width="328" height="20" font="2">)	for	the	NPC’s	face	texture.	Draw	the</text>
</page>
<page number="335" position="absolute" top="0" left="0" height="1262" width="892">
<image top="773" left="54" width="540" height="292" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-335_1.jpg"/>
<text top="57" left="97" width="382" height="20" font="2">NPC’s	face	beside	its	message	in	the	output.</text>
<text top="83" left="69" width="455" height="20" font="2">3.	 Render	the	player’s	HP	as	a	bar	(filled	rectangle).</text>
<text top="143" left="54" width="98" height="22" font="8"><b>Solutions</b></text>
<text top="182" left="54" width="212" height="20" font="2">Add	this	property	to	the	</text>
<text top="186" left="266" width="41" height="14" font="5">ANPC</text>
<text top="182" left="307" width="53" height="20" font="2">	class:</text>
<text top="225" left="54" width="259" height="14" font="5">//	This	is	the	NPC's	name</text>
<text top="245" left="54" width="684" height="14" font="5">UPROPERTY(EditAnywhere,	BlueprintReadWrite,	Category	=	NPCMessage)</text>
<text top="266" left="54" width="135" height="14" font="5">FString	name;</text>
<text top="297" left="54" width="77" height="20" font="2">Then,	in	</text>
<text top="302" left="131" width="259" height="14" font="5">ANPC::Prox_Implementation</text>
<text top="297" left="390" width="356" height="20" font="2">,	change	the	string	passed	to	the	HUD	to:</text>
<text top="340" left="54" width="311" height="14" font="5">name	+	FString(&#34;:	&#34;)	+	message</text>
<text top="372" left="54" width="509" height="20" font="2">This	way,	the	NPC’s	name	will	be	attached	to	the	message.</text>
<text top="408" left="54" width="43" height="20" font="2">Add	</text>
<text top="413" left="97" width="41" height="14" font="5">this</text>
<text top="408" left="138" width="138" height="20" font="2">	property	to	the	</text>
<text top="413" left="276" width="41" height="14" font="5">ANPC</text>
<text top="408" left="317" width="53" height="20" font="2">	class:</text>
<text top="452" left="54" width="684" height="14" font="5">UPROPERTY(EditAnywhere,	BlueprintReadWrite,	Category	=	NPCMessage)</text>
<text top="472" left="54" width="176" height="14" font="5">UTexture2D*	Face;</text>
<text top="504" left="54" width="666" height="20" font="2">Then	you	can	select	face	icons	to	be	attached	to	the	NPC’s	face	in	blueprints.</text>
<text top="540" left="54" width="210" height="20" font="2">Attach	a	texture	to	your	</text>
<text top="545" left="264" width="145" height="14" font="5">struct	Message</text>
<text top="540" left="409" width="6" height="20" font="2">:</text>
<text top="584" left="54" width="166" height="14" font="5">UTexture2D*	tex;</text>
<text top="615" left="54" width="411" height="20" font="2">To	render	these	icons,	you	need	to	add	a	call	to	</text>
<text top="619" left="465" width="135" height="14" font="5">DrawTexture()</text>
<text top="615" left="600" width="187" height="20" font="2">	with	the	right	texture</text>
<text top="641" left="54" width="125" height="20" font="2">passed	in	to	it:</text>
<text top="684" left="54" width="725" height="14" font="5">DrawTexture(	messages[c].tex,	x,	y,	messageH,	messageH,	0,	0,	1,	1		);</text>
<text top="715" left="54" width="762" height="20" font="2">Be	sure	to	check	whether	the	texture	is	valid	before	you	render	it.	The	icons	should	look</text>
<text top="741" left="54" width="466" height="20" font="2">similar	to	what	is	shown	here,	at	the	top	of	the	screen:</text>
<text top="1134" left="54" width="680" height="20" font="2">This	is	how	a	function	to	draw	the	player’s	remaining	health	in	a	bar	will	look:</text>
<text top="1178" left="54" width="290" height="14" font="5">void	AMyHUD::DrawHealthbar()</text>
</page>
<page number="336" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="10" height="14" font="5">{</text>
<text top="78" left="54" width="249" height="14" font="5">		//	Draw	the	healthbar.</text>
<text top="99" left="54" width="373" height="14" font="5">		AAvatar	*avatar	=	Cast&lt;AAvatar&gt;(		</text>
<text top="119" left="54" width="508" height="14" font="5">UGameplayStatics::GetPlayerPawn(GetWorld(),	0)	);</text>
<text top="140" left="54" width="621" height="14" font="5">		float	barWidth=200,	barHeight=50,	barPad=12,	barMargin=50;</text>
<text top="160" left="54" width="456" height="14" font="5">		float	percHp	=	avatar-&gt;Hp	/	avatar-&gt;MaxHp;</text>
<text top="181" left="54" width="777" height="14" font="5">		DrawRect(	FLinearColor(	0,	0,	0,	1	),	Canvas-&gt;SizeX	-	barWidth	-		barPad	</text>
<text top="201" left="54" width="756" height="14" font="5">-	barMargin,	Canvas-&gt;SizeY	-	barHeight	-	barPad	-		barMargin,	barWidth	+	</text>
<text top="222" left="54" width="342" height="14" font="5">2*barPad,	barHeight	+	2*barPad	);</text>
<text top="242" left="54" width="715" height="14" font="5">		DrawRect(	FLinearColor(	1-percHp,	percHp,	0,	1	),	Canvas-&gt;SizeX		-	</text>
<text top="263" left="54" width="642" height="14" font="5">barWidth	-	barMargin,	Canvas-&gt;SizeY	-	barHeight	-	barMargin,		</text>
<text top="283" left="54" width="300" height="14" font="5">barWidth*percHp,	barHeight	);</text>
<text top="304" left="54" width="10" height="14" font="5">}</text>
</page>
<page number="337" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="338" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="182" height="39" font="0"><b>Summary</b></text>
<text top="120" left="54" width="706" height="20" font="2">In	this	chapter,	we	went	through	a	lot	of	material.	We	showed	you	how	to	create	a</text>
<text top="146" left="54" width="784" height="20" font="2">character	and	display	it	on	the	screen,	control	your	character	with	axis	bindings,	and	create</text>
<text top="172" left="54" width="468" height="20" font="2">and	display	NPCs	that	can	post	messages	to	the	HUD.</text>
<text top="209" left="54" width="723" height="20" font="2">In	the	upcoming	chapters,	we	will	develop	our	game	further	by	adding	an	<i>Inventory</i></text>
<text top="235" left="54" width="243" height="20" font="4"><i>System	and	Pickup	Items</i>	in	</text>
<text top="235" left="297" width="95" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#367">Chapter	10</a></text>
<text top="235" left="392" width="439" height="20" font="2">,	as	well	as	the	code	and	the	concept	to	account	for</text>
<text top="260" left="54" width="774" height="20" font="2">what	the	player	is	carrying.	Before	we	do	that,	though,	we	will	do	an	in-depth	exploration</text>
<text top="286" left="54" width="333" height="20" font="2">of	some	of	the	UE4	container-fluid	types	in<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#339">	</a></text>
<text top="286" left="387" width="85" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#339">Chapter	9</a></text>
<text top="286" left="472" width="284" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#339">,</a>	<i>Templates	and	Commonly	Used</i></text>
<text top="312" left="54" width="101" height="20" font="4"><i>container-fluids</i>.</text>
</page>
<page number="339" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="340" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="690" height="39" font="0"><b>Chapter	9.	Templates	and	Commonly</b></text>
<text top="116" left="54" width="306" height="39" font="0"><b>Used	container-fluids</b></text>
<text top="172" left="54" width="23" height="20" font="2">In<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#250">	</a></text>
<text top="172" left="77" width="85" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#250">Chapter	7</a></text>
<text top="172" left="162" width="640" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#250">,</a>	<i>Dynamic	Memory	Allocation</i>,	we	spoke	about	how	you	will	use	dynamic</text>
<text top="198" left="54" width="754" height="20" font="2">memory	allocation	if	you	want	to	create	a	new	array	whose	size	isn’t	known	at	compile</text>
<text top="224" left="54" width="444" height="20" font="2">time.	Dynamic	memory	allocations	are	of	the	form	</text>
<text top="228" left="498" width="228" height="14" font="5">int	*	array	=	new	int[</text>
<text top="254" left="54" width="207" height="14" font="5">number_of_elements	]</text>
<text top="250" left="261" width="5" height="20" font="2">.</text>
<text top="286" left="54" width="420" height="20" font="2">You	also	saw	that	dynamic	allocations	using	the	</text>
<text top="291" left="474" width="52" height="14" font="5">new[]</text>
<text top="286" left="526" width="244" height="20" font="2">	keyword	require	you	to	call</text>
<text top="317" left="54" width="83" height="14" font="5">delete[]</text>
<text top="312" left="137" width="651" height="20" font="2">	on	the	array	later,	otherwise	you’d	have	a	memory	leak.	Having	to	manage</text>
<text top="338" left="54" width="269" height="20" font="2">memory	this	way	is	hard	work.</text>
<text top="375" left="54" width="732" height="20" font="2">Is	there	a	way	to	create	an	array	of	dynamic	size	and	have	the	memory	automatically</text>
<text top="401" left="54" width="737" height="20" font="2">managed	for	you	by	C++?	The	answer	is	yes.	There	are	C++	object	types	(commonly</text>
<text top="427" left="54" width="665" height="20" font="2">called	container-fluids)	that	handle	dynamic	memory	allocations	and	deallocations</text>
<text top="453" left="54" width="774" height="20" font="2">automatically.	UE4	provides	a	couple	of	container-fluid	types	to	store	your	data	in	dynamically</text>
<text top="479" left="54" width="181" height="20" font="2">resizable	collections.</text>
<text top="515" left="54" width="703" height="20" font="2">There	are	two	different	groups	of	template	container-fluids.	There	is	the	UE4	family	of</text>
<text top="541" left="54" width="237" height="20" font="2">container-fluids	(beginning	with	</text>
<text top="546" left="291" width="21" height="14" font="5">T*</text>
<text top="541" left="311" width="526" height="20" font="2">)	and	the	C++	<b>Standard	Template	Library</b>	(<b>STL</b>)	family	of</text>
<text top="567" left="54" width="738" height="20" font="2">container-fluids.	There	are	some	differences	between	the	UE4	container-fluids	and	the	C++	STL</text>
<text top="593" left="54" width="755" height="20" font="2">container-fluids,	but	the	differences	are	not	major.	UE4	container-fluids	sets	are	written	with	game</text>
<text top="619" left="54" width="748" height="20" font="2">performance	in	mind.	C++	STL	container-fluids	also	perform	well,	and	their	interfaces	are	a</text>
<text top="645" left="54" width="724" height="20" font="2">little	more	consistent	(consistency	in	an	API	is	something	that	you’d	prefer).	Which</text>
<text top="671" left="54" width="734" height="20" font="2">container-fluid	set	you	use	is	up	to	you.	However,	it	is	recommended	that	you	use	the	UE4</text>
<text top="697" left="54" width="781" height="20" font="2">container-fluid	set	since	it	guarantees	that	you	won’t	have	cross-platform	issues	when	you	try	to</text>
<text top="723" left="54" width="166" height="20" font="2">compile	your	code.</text>
</page>
<page number="341" position="absolute" top="0" left="0" height="1262" width="892">
<image top="589" left="54" width="130" height="93" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-341_1.jpg"/>
<text top="64" left="54" width="540" height="39" font="0"><b>Debugging	the	output	in	UE4</b></text>
<text top="120" left="54" width="773" height="20" font="2">All	of	the	code	in	this	chapter	(as	well	as	in	the	later	chapters)	will	require	you	to	work	in</text>
<text top="146" left="54" width="358" height="20" font="2">a	UE4	project.	For	the	purpose	of	testing	</text>
<text top="150" left="412" width="62" height="14" font="5">TArray</text>
<text top="146" left="474" width="319" height="20" font="2">,	I	created	a	basic	code	project	called</text>
<text top="176" left="54" width="73" height="14" font="5">TArrays</text>
<text top="172" left="127" width="66" height="20" font="2">.	In	the	</text>
<text top="176" left="192" width="352" height="14" font="5">ATArraysGameMode::ATArraysGameMode</text>
<text top="172" left="545" width="293" height="20" font="2">	constructor,	I	am	using	the	debug</text>
<text top="198" left="54" width="357" height="20" font="2">output	feature	to	print	text	to	the	console.</text>
<text top="235" left="54" width="266" height="20" font="2">Here’s	how	the	code	will	look:</text>
<text top="278" left="54" width="487" height="14" font="5">ATArraysGameMode::ATArraysGameMode(const	class	</text>
<text top="298" left="54" width="570" height="14" font="5">FPostConstructInitializeProperties&amp;	PCIP)	:	Super(PCIP)</text>
<text top="319" left="54" width="10" height="14" font="5">{</text>
<text top="339" left="54" width="155" height="14" font="5">		if(	GEngine	)</text>
<text top="360" left="54" width="31" height="14" font="5">		{</text>
<text top="380" left="54" width="746" height="14" font="5">				GEngine-&gt;AddOnScreenDebugMessage(	0,	30.f,	FColor::Red,		&#34;Hello!&#34;	);</text>
<text top="401" left="54" width="31" height="14" font="5">		}</text>
<text top="422" left="54" width="10" height="14" font="5">}</text>
<text top="453" left="54" width="749" height="20" font="2">If	you	compile	and	run	this	project,	you	will	see	the	debug	text	in	the	top-left	corner	of</text>
<text top="479" left="54" width="719" height="20" font="2">your	game	window	when	you	start	the	game.	You	can	use	a	debug	output	to	see	the</text>
<text top="505" left="54" width="535" height="20" font="2">internals	of	your	program	at	any	time.	Just	make	sure	that	the	</text>
<text top="509" left="589" width="73" height="14" font="5">GEngine</text>
<text top="505" left="662" width="165" height="20" font="2">	object	exists	at	the</text>
<text top="531" left="54" width="772" height="20" font="2">time	of	debugging	the	output.	The	output	of	the	preceding	code	is	shown	in	the	following</text>
<text top="556" left="54" width="97" height="20" font="2">screenshot:</text>
</page>
<page number="342" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="343" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="338" height="39" font="0"><b>UE4’s	TArray&lt;T&gt;</b></text>
<text top="120" left="54" width="598" height="20" font="2">TArrays	are	UE4’s	version	of	a	dynamic	array.	To	understand	what	a	</text>
<text top="124" left="652" width="93" height="14" font="5">TArray&lt;T&gt;</text>
<text top="120" left="745" width="75" height="20" font="2">	variable</text>
<text top="146" left="54" width="304" height="20" font="2">is,	you	first	have	to	know	what	the	</text>
<text top="150" left="358" width="31" height="14" font="5">&lt;T&gt;</text>
<text top="146" left="389" width="406" height="20" font="2">	option	between	angle	brackets	stands	for.	The	</text>
<text top="150" left="795" width="31" height="14" font="5">&lt;T&gt;</text>
<text top="172" left="54" width="762" height="20" font="2">option	means	that	the	type	of	data	stored	in	the	array	is	a	variable.	Do	you	want	an	array</text>
<text top="198" left="54" width="23" height="20" font="2">of	</text>
<text top="202" left="77" width="31" height="14" font="5">int</text>
<text top="198" left="108" width="137" height="20" font="2">?	Then	create	a	</text>
<text top="202" left="245" width="114" height="14" font="5">TArray&lt;int&gt;</text>
<text top="198" left="359" width="107" height="20" font="2">	variable.	A	</text>
<text top="202" left="466" width="62" height="14" font="5">TArray</text>
<text top="198" left="528" width="104" height="20" font="2">	variable	of	</text>
<text top="202" left="632" width="62" height="14" font="5">double</text>
<text top="198" left="694" width="86" height="20" font="2">?	Create	a</text>
<text top="228" left="54" width="145" height="14" font="5">TArray&lt;double&gt;</text>
<text top="224" left="199" width="80" height="20" font="2">	variable.</text>
<text top="260" left="54" width="231" height="20" font="2">So,	in	general,	wherever	a	</text>
<text top="265" left="285" width="31" height="14" font="5">&lt;T&gt;</text>
<text top="260" left="316" width="502" height="20" font="2">	appears,	you	can	plug	in	a	C++	type	of	your	choice.	Let’s</text>
<text top="286" left="54" width="353" height="20" font="2">move	on	and	show	this	with	an	example.</text>
</page>
<page number="344" position="absolute" top="0" left="0" height="1262" width="892">
<image top="571" left="54" width="432" height="188" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-344_1.jpg"/>
<text top="61" left="54" width="511" height="32" font="7"><b>An	example	that	uses	TArray&lt;T&gt;</b></text>
<text top="110" left="54" width="20" height="20" font="2">A	</text>
<text top="115" left="74" width="114" height="14" font="5">TArray&lt;int&gt;</text>
<text top="110" left="188" width="236" height="20" font="2">	variable	is	just	an	array	of	</text>
<text top="115" left="423" width="31" height="14" font="5">int</text>
<text top="110" left="454" width="31" height="20" font="2">.	A	</text>
<text top="115" left="485" width="155" height="14" font="5">TArray&lt;Player*&gt;</text>
<text top="110" left="640" width="165" height="20" font="2">	variable	will	be	an</text>
<text top="136" left="54" width="73" height="20" font="2">array	of	</text>
<text top="141" left="127" width="73" height="14" font="5">Player*</text>
<text top="136" left="200" width="639" height="20" font="2">	pointers.	An	array	is	dynamically	resizable,	and	elements	can	be	added	at</text>
<text top="162" left="54" width="319" height="20" font="2">the	end	of	the	array	after	its	creation.</text>
<text top="199" left="54" width="100" height="20" font="2">To	create	a	</text>
<text top="203" left="154" width="114" height="14" font="5">TArray&lt;int&gt;</text>
<text top="199" left="268" width="558" height="20" font="2">	variable,	all	you	have	to	do	is	use	the	normal	variable	allocation</text>
<text top="225" left="54" width="62" height="20" font="2">syntax:</text>
<text top="268" left="54" width="186" height="14" font="5">TArray&lt;int&gt;	array;</text>
<text top="299" left="54" width="134" height="20" font="2">Changes	to	the	</text>
<text top="304" left="188" width="62" height="14" font="5">TArray</text>
<text top="299" left="250" width="562" height="20" font="2">	variable	are	done	using	member	functions.	There	are	a	couple	of</text>
<text top="325" left="54" width="349" height="20" font="2">member	functions	that	you	can	use	on	a	</text>
<text top="330" left="403" width="62" height="14" font="5">TArray</text>
<text top="325" left="465" width="351" height="20" font="2">	variable.	The	first	member	function	that</text>
<text top="351" left="54" width="778" height="20" font="2">you	need	to	know	about	is	the	way	you	add	a	value	to	the	array,	as	shown	in	the	following</text>
<text top="377" left="54" width="47" height="20" font="2">code:</text>
<text top="420" left="54" width="155" height="14" font="5">array.Add(	1	);</text>
<text top="441" left="54" width="166" height="14" font="5">array.Add(	10	);</text>
<text top="461" left="54" width="155" height="14" font="5">array.Add(	5	);</text>
<text top="482" left="54" width="166" height="14" font="5">array.Add(	20	);</text>
<text top="513" left="54" width="699" height="20" font="2">These	four	lines	of	code	will	produce	the	array	value	in	memory,	as	shown	in	the</text>
<text top="539" left="54" width="147" height="20" font="2">following	figure:</text>
<text top="829" left="54" width="131" height="20" font="2">When	you	call	</text>
<text top="833" left="185" width="197" height="14" font="5">array.Add(	number	)</text>
<text top="829" left="382" width="448" height="20" font="2">,	the	new	number	goes	to	the	end	of	the	array.	Since</text>
<text top="855" left="54" width="775" height="20" font="2">we	added	the	numbers	<b>1</b>,	<b>10</b>,	<b>5</b>,	and	<b>20</b>	to	the	array,	in	this	order,	that	is	the	order	in	which</text>
<text top="881" left="54" width="228" height="20" font="2">they	will	go	into	the	array.</text>
<text top="917" left="54" width="752" height="20" font="2">If	you	want	to	insert	a	number	in	the	front	or	middle	of	the	array,	it	is	also	possible.	All</text>
<text top="943" left="54" width="219" height="20" font="2">you	have	to	do	is	use	the	</text>
<text top="948" left="273" width="269" height="14" font="5">array.Insert(value,	index)</text>
<text top="943" left="542" width="222" height="20" font="2">	function,	as	shown	in	the</text>
<text top="969" left="54" width="197" height="20" font="2">following	line	of	code:</text>
<text top="1012" left="54" width="218" height="14" font="5">array.Insert(	9,	0	);</text>
<text top="1044" left="54" width="751" height="20" font="2">This	function	will	push	the	number	<b>9</b>	into	the	position	<b>0</b>	of	the	array	(at	the	front).	This</text>
<text top="1070" left="54" width="712" height="20" font="2">means	that	the	rest	of	the	array	elements	will	be	offset	to	the	right,	as	shown	in	the</text>
<text top="1096" left="54" width="147" height="20" font="2">following	figure:</text>
</page>
<page number="345" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="432" height="143" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-345_1.jpg"/>
<image top="372" left="54" width="540" height="162" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-345_2.jpg"/>
<text top="265" left="54" width="782" height="20" font="2">We	can	insert	another	element	into	position	<b>2</b>	of	the	array	using	the	following	line	of	code:</text>
<text top="308" left="54" width="228" height="14" font="5">array.Insert(	30,	2	);</text>
<text top="339" left="54" width="614" height="20" font="2">This	function	will	rearrange	the	array	as	shown	in	the	following	figure:</text>
<text top="604" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="643" left="54" width="780" height="20" font="2">If	you	insert	a	number	into	a	position	in	the	array	that	is	out	of	bounds,	UE4	will	crash.	So</text>
<text top="669" left="54" width="211" height="20" font="2">be	careful	not	to	do	that.</text>
</page>
<page number="346" position="absolute" top="0" left="0" height="1262" width="892">
<image top="743" left="54" width="540" height="188" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-346_1.jpg"/>
<text top="61" left="54" width="284" height="32" font="7"><b>Iterating	a	TArray</b></text>
<text top="110" left="54" width="393" height="20" font="2">You	can	iterate	(walk	over)	the	elements	of	a	</text>
<text top="115" left="447" width="62" height="14" font="5">TArray</text>
<text top="110" left="509" width="297" height="20" font="2">	variable	in	two	ways:	either	using</text>
<text top="136" left="54" width="684" height="20" font="2">integer-based	indexing	or	using	an	iterator.	I	will	show	you	both	the	ways	here.</text>
<text top="174" left="54" width="524" height="22" font="8"><b>The	vanilla	for	loop	and	square	brackets	notation</b></text>
<text top="213" left="54" width="692" height="20" font="2">Using	integers	to	index	the	elements	of	an	array	is	sometimes	called	a	“vanilla”	</text>
<text top="217" left="746" width="31" height="14" font="5">for</text>
<text top="213" left="777" width="49" height="20" font="2">	loop.</text>
<text top="239" left="54" width="420" height="20" font="2">The	elements	of	the	array	can	be	accessed	using	</text>
<text top="243" left="474" width="145" height="14" font="5">array[	index	]</text>
<text top="239" left="619" width="69" height="20" font="2">,	where	</text>
<text top="243" left="688" width="52" height="14" font="5">index</text>
<text top="239" left="740" width="52" height="20" font="2">	is	the</text>
<text top="265" left="54" width="400" height="20" font="2">numerical	position	of	the	element	in	the	array:</text>
<text top="308" left="54" width="518" height="14" font="5">for(	int	index	=	0;	index	&lt;	array.Num();	index++	)</text>
<text top="329" left="54" width="10" height="14" font="5">{</text>
<text top="349" left="54" width="642" height="14" font="5">		//	print	the	array	element	to	the	screen	using	debug	message</text>
<text top="370" left="54" width="653" height="14" font="5">		GEngine-&gt;AddOnScreenDebugMessage(	index,	30.f,	FColor::Red,		</text>
<text top="390" left="54" width="383" height="14" font="5">FString::FromInt(	array[	index	]	)	);</text>
<text top="411" left="54" width="10" height="14" font="5">}</text>
<text top="443" left="54" width="94" height="22" font="8"><b>Iterators</b></text>
<text top="482" left="54" width="783" height="20" font="2">You	can	also	use	an	iterator	to	walk	over	the	elements	of	the	array	one	by	one,	as	shown	in</text>
<text top="508" left="54" width="168" height="20" font="2">the	following	code:</text>
<text top="551" left="54" width="590" height="14" font="5">int	count	=	0;	 //	keep	track	of	numerical	index	in	array</text>
<text top="572" left="54" width="704" height="14" font="5">for(	TArray&lt;int&gt;::TIterator	it	=	array.CreateIterator();	it;	++it		)</text>
<text top="592" left="54" width="10" height="14" font="5">{</text>
<text top="613" left="54" width="673" height="14" font="5">		GEngine-&gt;AddOnScreenDebugMessage(	count++,	30.f,	FColor::Red,		</text>
<text top="633" left="54" width="269" height="14" font="5">FString::FromInt(	*it	)	);</text>
<text top="654" left="54" width="10" height="14" font="5">}</text>
<text top="685" left="54" width="783" height="20" font="2">Iterators	are	pointers	into	the	array.	Iterators	can	be	used	to	inspect	or	change	values	inside</text>
<text top="711" left="54" width="595" height="20" font="2">the	array.	An	example	of	an	iterator	is	shown	in	the	following	figure:</text>
<text top="1000" left="54" width="776" height="20" font="2">The	concept	of	an	iterator:	it	is	an	external	object	that	can	look	into	and	inspect	the	values</text>
<text top="1026" left="54" width="619" height="20" font="2">of	an	array.	Doing	++	it	moves	the	iterator	to	examine	the	next	element.</text>
<text top="1063" left="54" width="745" height="20" font="2">An	iterator	must	be	suitable	for	the	collection	it	is	walking	through.	To	walk	through	a</text>
<text top="1093" left="54" width="114" height="14" font="5">TArray&lt;int&gt;</text>
<text top="1089" left="168" width="185" height="20" font="2">	variable,	you	need	a	</text>
<text top="1093" left="353" width="228" height="14" font="5">TArray&lt;int&gt;::TIterator</text>
<text top="1089" left="580" width="114" height="20" font="2">	type	iterator.</text>
<text top="1126" left="54" width="68" height="20" font="2">We	use	</text>
<text top="1130" left="122" width="10" height="14" font="5">*</text>
<text top="1126" left="132" width="611" height="20" font="2">	to	look	at	the	value	behind	an	iterator.	In	the	preceding	code,	we	used	</text>
<text top="1130" left="743" width="52" height="14" font="5">(*it)</text>
<text top="1126" left="795" width="22" height="20" font="2">	to</text>
<text top="1152" left="54" width="736" height="20" font="2">get	the	integer	value	from	the	iterator.	This	is	called	dereferencing.	To	dereference	an</text>
<text top="1178" left="54" width="293" height="20" font="2">iterator	means	to	look	at	its	value.</text>
</page>
<page number="347" position="absolute" top="0" left="0" height="1262" width="892">
<image top="648" left="54" width="123" height="165" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-347_1.jpg"/>
<text top="57" left="54" width="39" height="20" font="2">The	</text>
<text top="62" left="93" width="41" height="14" font="5">++it</text>
<text top="57" left="134" width="496" height="20" font="2">	operation	that	happens	at	the	end	of	each	iteration	of	the	</text>
<text top="62" left="631" width="31" height="14" font="5">for</text>
<text top="57" left="662" width="176" height="20" font="2">	loop	increments	the</text>
<text top="83" left="54" width="516" height="20" font="2">iterator,	moving	it	on	to	point	to	the	next	element	in	the	list.</text>
<text top="120" left="54" width="766" height="20" font="2">Insert	the	code	into	the	program	and	try	it	out	now.	Here’s	the	example	program	we	have</text>
<text top="146" left="54" width="174" height="20" font="2">created	so	far	using	</text>
<text top="150" left="228" width="62" height="14" font="5">TArray</text>
<text top="146" left="290" width="93" height="20" font="2">	(all	in	the	</text>
<text top="150" left="383" width="373" height="14" font="5">ATArraysGameMode::ATArraysGameMode()</text>
<text top="172" left="54" width="110" height="20" font="2">constructor):</text>
<text top="215" left="54" width="487" height="14" font="5">ATArraysGameMode::ATArraysGameMode(const	class	</text>
<text top="236" left="54" width="570" height="14" font="5">FPostConstructInitializeProperties&amp;	PCIP)	:	Super(PCIP)</text>
<text top="256" left="54" width="10" height="14" font="5">{</text>
<text top="277" left="54" width="207" height="14" font="5">		TArray&lt;int&gt;	array;</text>
<text top="297" left="54" width="176" height="14" font="5">		array.Add(	1	);</text>
<text top="318" left="54" width="186" height="14" font="5">		array.Add(	10	);</text>
<text top="338" left="54" width="176" height="14" font="5">		array.Add(	5	);</text>
<text top="359" left="54" width="186" height="14" font="5">		array.Add(	20	);</text>
<text top="379" left="54" width="476" height="14" font="5">		array.Insert(	9,	0	);//	put	a	9	in	the	front</text>
<text top="400" left="54" width="476" height="14" font="5">		array.Insert(	30,	2	);//	put	a	30	at	index	2</text>
<text top="420" left="54" width="155" height="14" font="5">		if(	GEngine	)</text>
<text top="441" left="54" width="31" height="14" font="5">		{</text>
<text top="461" left="54" width="559" height="14" font="5">				for(	int	index	=	0;	index	&lt;	array.Num();	index++	)</text>
<text top="482" left="54" width="52" height="14" font="5">				{</text>
<text top="503" left="54" width="694" height="14" font="5">						GEngine-&gt;AddOnScreenDebugMessage(	index,	30.f,	FColor::Red,		</text>
<text top="523" left="54" width="383" height="14" font="5">FString::FromInt(	array[	index	]	)	);</text>
<text top="544" left="54" width="52" height="14" font="5">				}</text>
<text top="564" left="54" width="31" height="14" font="5">		}</text>
<text top="585" left="54" width="10" height="14" font="5">}</text>
<text top="616" left="54" width="613" height="20" font="2">The	output	of	the	preceding	code	is	shown	in	the	following	screenshot:</text>
</page>
<page number="348" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="676" height="32" font="7"><b>Finding	whether	an	element	is	in	the	TArray</b></text>
<text top="110" left="54" width="599" height="20" font="2">Searching	out	UE4	container-fluids	is	easy.	It	is	commonly	done	using	the	</text>
<text top="115" left="653" width="41" height="14" font="5">Find</text>
<text top="110" left="694" width="76" height="20" font="2">	member</text>
<text top="136" left="54" width="718" height="20" font="2">function.	Using	the	array	we	created	previously,	we	can	find	the	index	of	the	value	</text>
<text top="141" left="772" width="21" height="14" font="5">10</text>
<text top="136" left="793" width="27" height="20" font="2">	by</text>
<text top="162" left="54" width="290" height="20" font="2">typing	the	following	line	of	code:</text>
<text top="205" left="54" width="663" height="14" font="5">int	index	=	array.Find(	10	);	//	would	be	index	3	in	image	above</text>
</page>
<page number="349" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="350" position="absolute" top="0" left="0" height="1262" width="892">
<image top="444" left="54" width="216" height="104" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-350_1.jpg"/>
<text top="64" left="54" width="164" height="39" font="0"><b>TSet&lt;T&gt;</b></text>
<text top="120" left="54" width="20" height="20" font="2">A	</text>
<text top="124" left="74" width="93" height="14" font="5">TSet&lt;int&gt;</text>
<text top="120" left="167" width="303" height="20" font="2">	variable	stores	a	set	of	integers.	A	</text>
<text top="124" left="470" width="135" height="14" font="5">TSet&lt;FString&gt;</text>
<text top="120" left="604" width="204" height="20" font="2">	variable.	stores	a	set	of</text>
<text top="146" left="54" width="326" height="20" font="2">strings.	The	main	difference	between	</text>
<text top="150" left="380" width="41" height="14" font="5">TSet</text>
<text top="146" left="421" width="42" height="20" font="2">	and	</text>
<text top="150" left="463" width="62" height="14" font="5">TArray</text>
<text top="146" left="525" width="63" height="20" font="2">	is	that	</text>
<text top="150" left="588" width="41" height="14" font="5">TSet</text>
<text top="146" left="630" width="131" height="20" font="2">	does	not	allow</text>
<text top="172" left="54" width="322" height="20" font="2">duplicates—all	the	elements	inside	a	</text>
<text top="176" left="376" width="41" height="14" font="5">TSet</text>
<text top="172" left="417" width="275" height="20" font="2">	are	guaranteed	to	be	unique.	A	</text>
<text top="176" left="692" width="62" height="14" font="5">TArray</text>
<text top="172" left="754" width="75" height="20" font="2">	variable</text>
<text top="198" left="54" width="408" height="20" font="2">does	not	mind	duplicates	of	the	same	elements.</text>
<text top="235" left="54" width="166" height="20" font="2">To	add	numbers	to	</text>
<text top="239" left="220" width="41" height="14" font="5">TSet</text>
<text top="235" left="262" width="111" height="20" font="2">,	simply	call	</text>
<text top="239" left="373" width="31" height="14" font="5">Add</text>
<text top="235" left="404" width="408" height="20" font="2">.	Take	an	example	of	the	following	declaration:</text>
<text top="278" left="54" width="145" height="14" font="5">TSet&lt;int&gt;	set;</text>
<text top="298" left="54" width="135" height="14" font="5">set.Add(	1	);</text>
<text top="319" left="54" width="135" height="14" font="5">set.Add(	2	);</text>
<text top="339" left="54" width="135" height="14" font="5">set.Add(	3	);</text>
<text top="360" left="54" width="425" height="14" font="5">set.Add(	1	);//	duplicate!	won't	be	added</text>
<text top="380" left="54" width="425" height="14" font="5">set.Add(	1	);//	duplicate!	won't	be	added</text>
<text top="412" left="54" width="106" height="20" font="2">This	is	how	</text>
<text top="416" left="160" width="41" height="14" font="5">TSet</text>
<text top="412" left="202" width="379" height="20" font="2">	will	look,	as	shown	in	the	following	figure:</text>
<text top="617" left="54" width="363" height="20" font="2">Duplicate	entries	of	the	same	value	in	the	</text>
<text top="621" left="417" width="41" height="14" font="5">TSet</text>
<text top="617" left="459" width="377" height="20" font="2">	will	not	be	allowed.	Notice	how	the	entries</text>
<text top="643" left="54" width="37" height="20" font="2">in	a	</text>
<text top="647" left="91" width="41" height="14" font="5">TSet</text>
<text top="643" left="133" width="308" height="20" font="2">	aren’t	numbered,	as	they	were	in	a	</text>
<text top="647" left="441" width="62" height="14" font="5">TArray</text>
<text top="643" left="503" width="287" height="20" font="2">:	you	can’t	use	square	brackets	to</text>
<text top="669" left="54" width="158" height="20" font="2">access	an	entry	in	</text>
<text top="673" left="212" width="41" height="14" font="5">TSet</text>
<text top="669" left="254" width="64" height="20" font="2">	arrays.</text>
</page>
<page number="351" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="241" height="32" font="7"><b>Iterating	a	TSet</b></text>
<text top="110" left="54" width="194" height="20" font="2">In	order	to	look	into	a	</text>
<text top="115" left="248" width="41" height="14" font="5">TSet</text>
<text top="110" left="290" width="533" height="20" font="2">	array,	you	must	use	an	iterator.	You	can’t	use	square	brackets</text>
<text top="136" left="54" width="311" height="20" font="2">notation	to	access	the	elements	of	a	</text>
<text top="141" left="365" width="41" height="14" font="5">TSet</text>
<text top="136" left="407" width="6" height="20" font="2">:</text>
<text top="180" left="54" width="570" height="14" font="5">int	count	=	0;	 //	keep	track	of	numerical	index	in	set</text>
<text top="200" left="54" width="653" height="14" font="5">for(	TSet&lt;int&gt;::TIterator	it	=	set.CreateIterator();	it;	++it	)</text>
<text top="221" left="54" width="10" height="14" font="5">{</text>
<text top="241" left="54" width="673" height="14" font="5">		GEngine-&gt;AddOnScreenDebugMessage(	count++,	30.f,	FColor::Red,		</text>
<text top="262" left="54" width="269" height="14" font="5">FString::FromInt(	*it	)	);</text>
<text top="282" left="54" width="10" height="14" font="5">}</text>
</page>
<page number="352" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="262" height="32" font="7"><b>Intersecting	TSet</b></text>
<text top="110" left="54" width="39" height="20" font="2">The	</text>
<text top="115" left="93" width="41" height="14" font="5">TSet</text>
<text top="110" left="134" width="342" height="20" font="2">array	has	two	special	functions	that	the	</text>
<text top="115" left="477" width="62" height="14" font="5">TArray</text>
<text top="110" left="539" width="197" height="20" font="2">	variable	does	not.	The</text>
<text top="136" left="54" width="167" height="20" font="2">intersection	of	two	</text>
<text top="141" left="221" width="41" height="14" font="5">TSet</text>
<text top="136" left="263" width="568" height="20" font="2">	arrays	is	basically	the	elements	they	have	in	common.	If	we	have</text>
<text top="162" left="54" width="38" height="20" font="2">two	</text>
<text top="167" left="92" width="41" height="14" font="5">TSet</text>
<text top="162" left="133" width="132" height="20" font="2">	arrays	such	as	</text>
<text top="167" left="265" width="10" height="14" font="5">X</text>
<text top="162" left="275" width="42" height="20" font="2">	and	</text>
<text top="167" left="317" width="10" height="14" font="5">Y</text>
<text top="162" left="328" width="463" height="20" font="2">	and	we	intersect	them,	the	result	will	be	a	third,	new	</text>
<text top="167" left="790" width="41" height="14" font="5">TSet</text>
<text top="188" left="54" width="722" height="20" font="2">array	that	contains	only	the	elements	common	between	them.	Look	at	the	following</text>
<text top="214" left="54" width="79" height="20" font="2">example:</text>
<text top="257" left="54" width="124" height="14" font="5">TSet&lt;int&gt;	X;</text>
<text top="278" left="54" width="114" height="14" font="5">X.Add(	1	);</text>
<text top="298" left="54" width="114" height="14" font="5">X.Add(	2	);</text>
<text top="319" left="54" width="114" height="14" font="5">X.Add(	3	);</text>
<text top="339" left="54" width="124" height="14" font="5">TSet&lt;int&gt;	Y;</text>
<text top="360" left="54" width="114" height="14" font="5">Y.Add(	2	);</text>
<text top="380" left="54" width="114" height="14" font="5">Y.Add(	4	);</text>
<text top="401" left="54" width="114" height="14" font="5">Y.Add(	8	);</text>
<text top="422" left="54" width="404" height="14" font="5">TSet&lt;int&gt;	common	=	X.Intersect(Y);	//	2</text>
<text top="453" left="54" width="279" height="20" font="2">The	common	elements	between	</text>
<text top="457" left="333" width="10" height="14" font="5">X</text>
<text top="453" left="344" width="42" height="20" font="2">	and	</text>
<text top="457" left="386" width="10" height="14" font="5">Y</text>
<text top="453" left="396" width="255" height="20" font="2">	will	then	just	be	the	element	</text>
<text top="457" left="651" width="10" height="14" font="5">2</text>
<text top="453" left="661" width="5" height="20" font="2">.</text>
</page>
<page number="353" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="221" height="32" font="7"><b>Unioning	TSet</b></text>
<text top="110" left="54" width="781" height="20" font="2">Mathematically,	the	union	of	two	sets	is	when	you	basically	insert	all	the	elements	into	the</text>
<text top="136" left="54" width="664" height="20" font="2">same	set.	Since	we	are	talking	about	sets	here,	there	won’t	be	any	duplicates.</text>
<text top="173" left="54" width="123" height="20" font="2">If	we	take	the	</text>
<text top="177" left="177" width="10" height="14" font="5">X</text>
<text top="173" left="188" width="42" height="20" font="2">	and	</text>
<text top="177" left="230" width="10" height="14" font="5">Y</text>
<text top="173" left="240" width="560" height="20" font="2">	sets	from	the	previous	example	and	create	a	union,	we	will	get	a</text>
<text top="199" left="54" width="170" height="20" font="2">new	set,	as	follows:</text>
<text top="242" left="54" width="456" height="14" font="5">TSet&lt;int&gt;	uni	=	X.Union(Y);	//	1,	2,	3,	4,	8</text>
</page>
<page number="354" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="199" height="32" font="7"><b>Finding	TSet</b></text>
<text top="110" left="54" width="434" height="20" font="2">You	can	determine	whether	an	element	is	inside	a	</text>
<text top="115" left="488" width="41" height="14" font="5">TSet</text>
<text top="110" left="529" width="173" height="20" font="2">	or	not	by	using	the	</text>
<text top="115" left="702" width="62" height="14" font="5">Find()</text>
<text top="136" left="54" width="286" height="20" font="2">member	function	on	the	set.	The	</text>
<text top="141" left="340" width="41" height="14" font="5">TSet</text>
<text top="136" left="381" width="340" height="20" font="2">	will	return	a	pointer	to	the	entry	in	the	</text>
<text top="141" left="722" width="41" height="14" font="5">TSet</text>
<text top="136" left="763" width="38" height="20" font="2">	that</text>
<text top="162" left="54" width="408" height="20" font="2">matches	your	query	if	the	element	exists	in	the	</text>
<text top="167" left="462" width="41" height="14" font="5">TSet</text>
<text top="162" left="504" width="147" height="20" font="2">,	or	it	will	return	</text>
<text top="167" left="651" width="41" height="14" font="5">NULL</text>
<text top="162" left="693" width="124" height="20" font="2">	if	the	element</text>
<text top="188" left="54" width="332" height="20" font="2">you’re	asking	for	does	not	exist	in	the	</text>
<text top="192" left="386" width="41" height="14" font="5">TSet</text>
<text top="188" left="428" width="5" height="20" font="2">.</text>
</page>
<page number="355" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="356" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="236" height="39" font="0"><b>TMap&lt;T,	S&gt;</b></text>
<text top="120" left="54" width="20" height="20" font="2">A	</text>
<text top="124" left="74" width="104" height="14" font="5">TMap&lt;T,	S&gt;</text>
<text top="120" left="177" width="336" height="20" font="2">	creates	a	table	of	sorts	in	the	RAM.	A	</text>
<text top="124" left="514" width="41" height="14" font="5">TMap</text>
<text top="120" left="555" width="244" height="20" font="2">	represents	a	mapping	of	the</text>
<text top="146" left="54" width="619" height="20" font="2">keys	at	the	left	to	the	values	on	the	right-hand	side.	You	can	visualize	a	</text>
<text top="150" left="673" width="41" height="14" font="5">TMap</text>
<text top="146" left="714" width="83" height="20" font="2">	as	a	two-</text>
<text top="172" left="54" width="637" height="20" font="2">column	table,	with	keys	in	the	left	column	and	values	in	the	right	column.</text>
</page>
<page number="357" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="603" height="32" font="7"><b>A	list	of	items	for	the	player’s	inventory</b></text>
<text top="110" left="54" width="772" height="20" font="2">For	example,	say	we	wanted	to	create	a	C++	data	structure	in	order	to	store	a	list	of	items</text>
<text top="136" left="54" width="730" height="20" font="2">for	the	player’s	inventory.	On	the	left-hand	side	of	the	table	(the	keys),	we’d	have	an</text>
<text top="167" left="54" width="73" height="14" font="5">FString</text>
<text top="162" left="127" width="615" height="20" font="2">	for	the	item’s	name.	On	the	right-hand	side	(the	values),	we’d	have	an	</text>
<text top="167" left="742" width="31" height="14" font="5">int</text>
<text top="162" left="773" width="62" height="20" font="2">	for	the</text>
<text top="188" left="54" width="181" height="20" font="2">quantity	of	that	item.</text>
<text top="239" left="59" width="198" height="14" font="9"><b>Item	(Key) Quantity	(Value)</b></text>
<text top="283" left="59" width="41" height="15" font="10">apples</text>
<text top="283" left="141" width="8" height="15" font="10">4</text>
<text top="325" left="59" width="43" height="15" font="10">donuts</text>
<text top="325" left="141" width="16" height="15" font="10">12</text>
<text top="367" left="59" width="46" height="15" font="10">swords</text>
<text top="367" left="141" width="8" height="15" font="10">1</text>
<text top="409" left="59" width="45" height="15" font="10">shields</text>
<text top="409" left="141" width="8" height="15" font="10">2</text>
<text top="453" left="54" width="434" height="20" font="2">To	do	this	in	code,	we’d	simply	use	the	following:</text>
<text top="496" left="54" width="259" height="14" font="5">TMap&lt;FString,	int&gt;	items;</text>
<text top="517" left="54" width="259" height="14" font="5">items.Add(	&#34;apples&#34;,	4	);</text>
<text top="537" left="54" width="269" height="14" font="5">items.Add(	&#34;donuts&#34;,	12	);</text>
<text top="558" left="54" width="259" height="14" font="5">items.Add(	&#34;swords&#34;,	1	);</text>
<text top="578" left="54" width="269" height="14" font="5">items.Add(	&#34;shields&#34;,	2	);</text>
<text top="609" left="54" width="248" height="20" font="2">Once	you	have	created	your	</text>
<text top="614" left="302" width="41" height="14" font="5">TMap</text>
<text top="609" left="343" width="294" height="20" font="2">,	you	can	access	values	inside	the	</text>
<text top="614" left="637" width="41" height="14" font="5">TMap</text>
<text top="609" left="678" width="114" height="20" font="2">	using	square</text>
<text top="635" left="54" width="628" height="20" font="2">brackets	and	by	passing	a	key	between	the	brackets.	For	example,	in	the	</text>
<text top="640" left="682" width="52" height="14" font="5">items</text>
<text top="635" left="733" width="97" height="20" font="2">	map	in	the</text>
<text top="661" left="54" width="142" height="20" font="2">preceding	code,	</text>
<text top="666" left="196" width="176" height="14" font="5">items[	&#34;apples&#34;	]</text>
<text top="661" left="372" width="41" height="20" font="2">	is	4.</text>
<text top="699" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="738" left="54" width="779" height="20" font="2">UE4	will	crash	if	you	use	square	brackets	to	access	a	key	that	doesn’t	exist	in	the	map	yet,</text>
<text top="764" left="54" width="498" height="20" font="2">so	be	careful!	The	C++	STL	does	not	crash	if	you	do	this.</text>
</page>
<page number="358" position="absolute" top="0" left="0" height="1262" width="892">
<image top="351" left="54" width="378" height="382" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-358_1.jpg"/>
<text top="61" left="54" width="265" height="32" font="7"><b>Iterating	a	TMap</b></text>
<text top="110" left="54" width="171" height="20" font="2">In	order	to	iterate	a	</text>
<text top="115" left="225" width="41" height="14" font="5">TMap</text>
<text top="110" left="266" width="243" height="20" font="2">,	you	use	an	iterator	as	well:</text>
<text top="154" left="54" width="766" height="14" font="5">for(	TMap&lt;FString,	int&gt;::TIterator	it	=	items.CreateIterator();	it;	++it	)</text>
<text top="174" left="54" width="10" height="14" font="5">{</text>
<text top="195" left="54" width="653" height="14" font="5">		GEngine-&gt;AddOnScreenDebugMessage(	count++,	30.f,	FColor::Red,</text>
<text top="215" left="54" width="621" height="14" font="5">		it-&gt;Key	+	FString(&#34;:	&#34;)	+	FString::FromInt(	it-&gt;Value	)	);</text>
<text top="236" left="54" width="10" height="14" font="5">}</text>
<text top="271" left="54" width="41" height="14" font="5">TMap</text>
<text top="267" left="95" width="310" height="20" font="2">	iterators	are	slightly	different	from	</text>
<text top="271" left="405" width="62" height="14" font="5">TArray</text>
<text top="267" left="468" width="29" height="20" font="2">	or	</text>
<text top="271" left="496" width="41" height="14" font="5">TSet</text>
<text top="267" left="538" width="107" height="20" font="2">	iterators.	A	</text>
<text top="271" left="645" width="41" height="14" font="5">TMap</text>
<text top="267" left="686" width="145" height="20" font="2">	iterator	contains</text>
<text top="293" left="54" width="59" height="20" font="2">both	a	</text>
<text top="297" left="113" width="31" height="14" font="5">Key</text>
<text top="293" left="144" width="57" height="20" font="2">	and	a	</text>
<text top="297" left="201" width="52" height="14" font="5">Value</text>
<text top="293" left="253" width="309" height="20" font="2">.	We	can	access	the	key	inside	with	</text>
<text top="297" left="562" width="73" height="14" font="5">it-&gt;Key</text>
<text top="293" left="634" width="177" height="20" font="2">	and	the	value	inside</text>
<text top="319" left="54" width="32" height="20" font="2">the	</text>
<text top="323" left="86" width="41" height="14" font="5">TMap</text>
<text top="319" left="127" width="49" height="20" font="2">	with	</text>
<text top="323" left="176" width="93" height="14" font="5">it-&gt;Value</text>
<text top="319" left="270" width="5" height="20" font="2">.</text>
</page>
<page number="359" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="360" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="676" height="39" font="0"><b>C++	STL	versions	of	commonly	used</b></text>
<text top="116" left="54" width="192" height="39" font="0"><b>container-fluids</b></text>
<text top="172" left="54" width="723" height="20" font="2">I	want	to	cover	the	C++	STL	versions	of	a	couple	of	container-fluids.	STL	is	the	standard</text>
<text top="198" left="54" width="748" height="20" font="2">template	library,	which	is	shipped	with	most	C++	compilers.	The	reason	why	I	want	to</text>
<text top="224" left="54" width="770" height="20" font="2">cover	these	STL	versions	is	that	they	behave	somewhat	differently	than	the	UE4	versions</text>
<text top="250" left="54" width="778" height="20" font="2">of	the	same	container-fluids.	In	some	ways,	their	behavior	is	very	good,	but	game	programmers</text>
<text top="276" left="54" width="750" height="20" font="2">often	complain	of	STL	having	performance	issues.	In	particular,	I	want	to	cover	STL’s	</text>
<text top="280" left="804" width="31" height="14" font="5">set</text>
<text top="302" left="54" width="37" height="20" font="2">and	</text>
<text top="306" left="91" width="31" height="14" font="5">map</text>
<text top="302" left="122" width="99" height="20" font="2">	container-fluids.</text>
<text top="340" left="54" width="50" height="22" font="8"><b>Note</b></text>
<text top="378" left="54" width="673" height="20" font="2">If	you	like	STL’s	interface	but	want	better	performance,	there	is	a	well-known</text>
<text top="404" left="54" width="783" height="20" font="2">reimplementation	of	the	STL	library	by	Electronic	Arts	called	EASTL,	which	you	can	use.</text>
<text top="430" left="54" width="740" height="20" font="2">It	provides	the	same	functionality	as	STL	but	is	implemented	with	better	performance</text>
<text top="456" left="54" width="778" height="20" font="2">(basically	by	doing	things	such	as	eliminating	bounds	checking).	It	is	available	on	GitHub</text>
<text top="482" left="54" width="21" height="20" font="2">at	</text>
<text top="482" left="75" width="327" height="20" font="1"><a href="https://github.com/paulhodge/EASTL">https://github.com/paulhodge/EASTL</a></text>
<text top="482" left="402" width="5" height="20" font="2"><a href="https://github.com/paulhodge/EASTL">.</a></text>
</page>
<page number="361" position="absolute" top="0" left="0" height="1262" width="892">
<image top="916" left="54" width="432" height="199" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-361_1.jpg"/>
<text top="61" left="54" width="191" height="32" font="7"><b>C++	STL	set</b></text>
<text top="110" left="54" width="772" height="20" font="2">A	C++	set	is	a	bunch	of	items	that	are	unique	and	sorted.	The	good	feature	about	the	STL</text>
<text top="141" left="54" width="31" height="14" font="5">set</text>
<text top="136" left="85" width="751" height="20" font="2">	is	that	it	keeps	the	set	elements	sorted.	A	quick	and	dirty	way	to	sort	a	bunch	of	values</text>
<text top="162" left="54" width="377" height="20" font="2">is	actually	to	just	shove	them	into	the	same	</text>
<text top="167" left="431" width="31" height="14" font="5">set</text>
<text top="162" left="462" width="50" height="20" font="2">.	The	</text>
<text top="167" left="512" width="31" height="14" font="5">set</text>
<text top="162" left="543" width="273" height="20" font="2">	will	take	care	of	the	sorting	for</text>
<text top="188" left="54" width="38" height="20" font="2">you.</text>
<text top="225" left="54" width="759" height="20" font="2">We	can	return	to	a	simple	C++	console	application	for	the	usage	of	sets.	To	use	the	C++</text>
<text top="251" left="54" width="247" height="20" font="2">STL	set	you	need	to	include	</text>
<text top="255" left="301" width="52" height="14" font="5">&lt;set&gt;</text>
<text top="251" left="353" width="139" height="20" font="2">,	as	shown	here:</text>
<text top="294" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="315" left="54" width="145" height="14" font="5">#include	&lt;set&gt;</text>
<text top="335" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="376" left="54" width="104" height="14" font="5">int	main()</text>
<text top="397" left="54" width="10" height="14" font="5">{</text>
<text top="417" left="54" width="186" height="14" font="5">		set&lt;int&gt;	intSet;</text>
<text top="438" left="54" width="218" height="14" font="5">		intSet.insert(	7	);</text>
<text top="458" left="54" width="218" height="14" font="5">		intSet.insert(	7	);</text>
<text top="479" left="54" width="218" height="14" font="5">		intSet.insert(	8	);</text>
<text top="499" left="54" width="218" height="14" font="5">		intSet.insert(	1	);</text>
<text top="540" left="54" width="766" height="14" font="5">		for(	set&lt;int&gt;::iterator	it	=	intSet.begin();	it	!=	intSet.end();		++it	)</text>
<text top="561" left="54" width="31" height="14" font="5">		{</text>
<text top="581" left="54" width="249" height="14" font="5">				cout	&lt;&lt;	*it	&lt;&lt;	endl;</text>
<text top="602" left="54" width="31" height="14" font="5">		}</text>
<text top="622" left="54" width="10" height="14" font="5">}</text>
<text top="654" left="54" width="433" height="20" font="2">The	following	is	the	output	of	the	preceding	code:</text>
<text top="697" left="54" width="10" height="14" font="5">1</text>
<text top="718" left="54" width="10" height="14" font="5">7</text>
<text top="738" left="54" width="10" height="14" font="5">8</text>
<text top="769" left="54" width="123" height="20" font="2">The	duplicate	</text>
<text top="774" left="177" width="10" height="14" font="5">7</text>
<text top="769" left="188" width="612" height="20" font="2">	is	filtered	out,	and	the	elements	are	kept	in	increasing	order	inside	the	</text>
<text top="774" left="800" width="31" height="14" font="5">set</text>
<text top="769" left="831" width="5" height="20" font="2">.</text>
<text top="795" left="54" width="672" height="20" font="2">The	way	we	iterate	over	the	elements	of	an	STL	container-fluid	is	similar	to	UE4’s	</text>
<text top="800" left="726" width="41" height="14" font="5">TSet</text>
<text top="795" left="768" width="54" height="20" font="2">	array.</text>
<text top="821" left="54" width="39" height="20" font="2">The	</text>
<text top="826" left="93" width="145" height="14" font="5">intSet.begin()</text>
<text top="821" left="238" width="493" height="20" font="2">	function	returns	an	iterator	that	points	to	the	head	of	the	</text>
<text top="826" left="731" width="62" height="14" font="5">intSet</text>
<text top="821" left="793" width="5" height="20" font="2">.</text>
<text top="858" left="54" width="339" height="20" font="2">The	condition	to	stop	iterating	is	when	</text>
<text top="862" left="393" width="21" height="14" font="5">it</text>
<text top="858" left="413" width="86" height="20" font="2">	becomes	</text>
<text top="862" left="500" width="124" height="14" font="5">intSet.end()</text>
<text top="858" left="624" width="11" height="20" font="2">.	</text>
<text top="862" left="635" width="124" height="14" font="5">intSet.end()</text>
<text top="858" left="759" width="20" height="20" font="2">	is</text>
<text top="884" left="54" width="349" height="20" font="2">actually	one	position	past	the	end	of	the	</text>
<text top="888" left="403" width="31" height="14" font="5">set</text>
<text top="884" left="434" width="297" height="20" font="2">,	as	shown	in	the	following	figure:</text>
<text top="1186" left="54" width="313" height="22" font="8"><b>Finding	an	element	in	a	&lt;set&gt;</b></text>
</page>
<page number="362" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="293" height="20" font="2">To	find	an	element	inside	an	STL	</text>
<text top="62" left="347" width="31" height="14" font="5">set</text>
<text top="57" left="378" width="143" height="20" font="2">,	we	can	use	the	</text>
<text top="62" left="521" width="62" height="14" font="5">find()</text>
<text top="57" left="583" width="254" height="20" font="2">	member	function.	If	the	item</text>
<text top="83" left="54" width="286" height="20" font="2">we’re	looking	for	turns	up	in	the	</text>
<text top="88" left="340" width="31" height="14" font="5">set</text>
<text top="83" left="371" width="463" height="20" font="2">,	we	get	an	iterator	that	points	to	the	element	we	were</text>
<text top="109" left="54" width="542" height="20" font="2">searching	for.	If	the	item	that	we	were	looking	for	is	not	in	the	</text>
<text top="114" left="596" width="31" height="14" font="5">set</text>
<text top="109" left="628" width="114" height="20" font="2">,	we	get	back</text>
<text top="140" left="54" width="93" height="14" font="5">set.end()</text>
<text top="135" left="147" width="200" height="20" font="2">instead,	as	shown	here:</text>
<text top="178" left="54" width="425" height="14" font="5">set&lt;int&gt;::iterator	it	=	intSet.find(	7	);</text>
<text top="199" left="54" width="249" height="14" font="5">if(	it	!=	intSet.end()	)</text>
<text top="220" left="54" width="10" height="14" font="5">{</text>
<text top="240" left="54" width="508" height="14" font="5">		//		7		was	inside	intSet,	and	*it	has	its	value</text>
<text top="261" left="54" width="352" height="14" font="5">		cout	&lt;&lt;	&#34;Found	&#34;	&lt;&lt;	*it	&lt;&lt;	endl;</text>
<text top="281" left="54" width="10" height="14" font="5">}</text>
<text top="314" left="54" width="89" height="22" font="8"><b>Exercise</b></text>
<text top="352" left="54" width="741" height="20" font="2">Ask	the	user	for	a	set	of	three	unique	names.	Take	each	name	in,	one	by	one,	and	then</text>
<text top="378" left="54" width="779" height="20" font="2">print	them	in	a	sorted	order.	If	the	user	repeats	a	name,	then	ask	them	for	another	one	until</text>
<text top="404" left="54" width="140" height="20" font="2">you	get	to	three.</text>
<text top="442" left="54" width="88" height="22" font="8"><b>Solution</b></text>
<text top="481" left="54" width="673" height="20" font="2">The	solution	of	the	preceding	exercise	can	be	found	using	the	following	code:</text>
<text top="524" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="545" left="54" width="176" height="14" font="5">#include	&lt;string&gt;</text>
<text top="565" left="54" width="145" height="14" font="5">#include	&lt;set&gt;</text>
<text top="586" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="606" left="54" width="104" height="14" font="5">int	main()</text>
<text top="627" left="54" width="10" height="14" font="5">{</text>
<text top="647" left="54" width="207" height="14" font="5">		set&lt;string&gt;	names;</text>
<text top="668" left="54" width="580" height="14" font="5">		//	so	long	as	we	don't	have	3	names	yet,	keep	looping,</text>
<text top="688" left="54" width="280" height="14" font="5">		while(	names.size()	&lt;	3	)</text>
<text top="709" left="54" width="31" height="14" font="5">		{</text>
<text top="729" left="54" width="684" height="14" font="5">				cout	&lt;&lt;	names.size()	&lt;&lt;	&#34;	names	so	far.	Enter	a	name&#34;	&lt;&lt;	endl;</text>
<text top="750" left="54" width="166" height="14" font="5">				string	name;</text>
<text top="770" left="54" width="166" height="14" font="5">				cin	&gt;&gt;	name;</text>
<text top="791" left="54" width="611" height="14" font="5">				names.insert(	name	);	//	won't	insert	if	already	there,</text>
<text top="811" left="54" width="31" height="14" font="5">		}</text>
<text top="832" left="54" width="559" height="14" font="5">		//	now	print	the	names.	the	set	will	have	kept	order</text>
<text top="853" left="54" width="777" height="14" font="5">		for(	set&lt;string&gt;::iterator	it	=	names.begin();	it	!=		names.end();	++it	)</text>
<text top="873" left="54" width="31" height="14" font="5">		{</text>
<text top="894" left="54" width="249" height="14" font="5">				cout	&lt;&lt;	*it	&lt;&lt;	endl;</text>
<text top="914" left="54" width="31" height="14" font="5">		}</text>
<text top="935" left="54" width="10" height="14" font="5">}</text>
</page>
<page number="363" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="217" height="32" font="7"><b>C++	STL	map</b></text>
<text top="110" left="54" width="126" height="20" font="2">The	C++	STL	</text>
<text top="115" left="180" width="31" height="14" font="5">map</text>
<text top="110" left="211" width="224" height="20" font="2">	object	is	a	lot	like	UE4’s	</text>
<text top="115" left="435" width="41" height="14" font="5">TMap</text>
<text top="110" left="476" width="294" height="20" font="2">	object.	The	one	thing	it	does	that	</text>
<text top="115" left="770" width="41" height="14" font="5">TMap</text>
<text top="136" left="54" width="712" height="20" font="2">does	not	is	to	maintain	a	sorted	order	inside	the	map	as	well.	Sorting	introduces	an</text>
<text top="162" left="54" width="784" height="20" font="2">additional	cost,	but	if	you	want	your	map	to	be	sorted,	opting	for	the	STL	version	might	be</text>
<text top="188" left="54" width="125" height="20" font="2">a	good	choice.</text>
<text top="225" left="54" width="181" height="20" font="2">To	use	the	C++	STL	</text>
<text top="229" left="235" width="31" height="14" font="5">map</text>
<text top="225" left="266" width="168" height="20" font="2">	object,	we	include	</text>
<text top="229" left="434" width="52" height="14" font="5">&lt;map&gt;</text>
<text top="225" left="486" width="343" height="20" font="2">.	In	the	following	example	program,	we</text>
<text top="251" left="54" width="446" height="20" font="2">populate	a	map	of	items	with	some	key-value	pairs:</text>
<text top="294" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="315" left="54" width="176" height="14" font="5">#include	&lt;string&gt;</text>
<text top="335" left="54" width="145" height="14" font="5">#include	&lt;map&gt;</text>
<text top="356" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="376" left="54" width="104" height="14" font="5">int	main()</text>
<text top="397" left="54" width="10" height="14" font="5">{</text>
<text top="417" left="54" width="259" height="14" font="5">		map&lt;string,	int&gt;	items;</text>
<text top="438" left="54" width="445" height="14" font="5">		items.insert(	make_pair(	&#34;apple&#34;,	12	)	);</text>
<text top="458" left="54" width="445" height="14" font="5">		items.insert(	make_pair(	&#34;orange&#34;,	1	)	);</text>
<text top="479" left="54" width="445" height="14" font="5">		items.insert(	make_pair(	&#34;banana&#34;,	3	)	);</text>
<text top="499" left="54" width="611" height="14" font="5">		//	can	also	use	square	brackets	to	insert	into	an	STL	map</text>
<text top="520" left="54" width="249" height="14" font="5">		items[	&#34;kiwis&#34;	]	=	44;</text>
<text top="561" left="54" width="766" height="14" font="5">		for(	map&lt;string,	int&gt;::iterator	it	=	items.begin();	it	!=		items.end();	</text>
<text top="581" left="54" width="62" height="14" font="5">++it	)</text>
<text top="602" left="54" width="31" height="14" font="5">		{</text>
<text top="622" left="54" width="715" height="14" font="5">				cout	&lt;&lt;	&#34;items[	&#34;	&lt;&lt;	it-&gt;first	&lt;&lt;	&#34;	]	=	&#34;	&lt;&lt;	it-&gt;second	&lt;&lt;		endl;</text>
<text top="643" left="54" width="31" height="14" font="5">		}</text>
<text top="663" left="54" width="10" height="14" font="5">}</text>
<text top="695" left="54" width="381" height="20" font="2">This	is	the	output	of	the	preceding	program:</text>
<text top="738" left="54" width="197" height="14" font="5">items[	apple	]	=	12</text>
<text top="759" left="54" width="197" height="14" font="5">items[	banana	]	=	3</text>
<text top="779" left="54" width="197" height="14" font="5">items[	kiwis	]	=	44</text>
<text top="800" left="54" width="197" height="14" font="5">items[	orange	]	=	1</text>
<text top="831" left="54" width="697" height="20" font="2">Notice	how	the	iterator’s	syntax	for	an	STL	map	is	slightly	different	than	that	of	</text>
<text top="835" left="751" width="41" height="14" font="5">TMap</text>
<text top="831" left="792" width="37" height="20" font="2">:	we</text>
<text top="857" left="54" width="181" height="20" font="2">access	the	key	using	</text>
<text top="861" left="235" width="93" height="14" font="5">it-&gt;first</text>
<text top="857" left="328" width="178" height="20" font="2">	and	the	value	using	</text>
<text top="861" left="506" width="104" height="14" font="5">it-&gt;second</text>
<text top="857" left="610" width="5" height="20" font="2">.</text>
<text top="894" left="54" width="533" height="20" font="2">Notice	how	C++	STL	also	offers	a	bit	of	syntactic	sugar	over	</text>
<text top="898" left="587" width="41" height="14" font="5">TMap</text>
<text top="894" left="628" width="175" height="20" font="2">;	you	can	use	square</text>
<text top="919" left="54" width="311" height="20" font="2">brackets	to	insert	into	the	C++	STL	</text>
<text top="924" left="365" width="31" height="14" font="5">map</text>
<text top="919" left="396" width="411" height="20" font="2">.	You	cannot	use	square	brackets	to	insert	into	a</text>
<text top="950" left="54" width="41" height="14" font="5">TMap</text>
<text top="945" left="95" width="5" height="20" font="2">.</text>
<text top="984" left="54" width="331" height="22" font="8"><b>Finding	an	element	in	a	&lt;map&gt;</b></text>
<text top="1022" left="54" width="252" height="20" font="2">You	can	search	a	map	for	a	&lt;</text>
<text top="1026" left="306" width="31" height="14" font="5">key</text>
<text top="1022" left="337" width="11" height="20" font="2">,	</text>
<text top="1026" left="347" width="52" height="14" font="5">value</text>
<text top="1022" left="399" width="240" height="20" font="2">&gt;	pair	using	the	STL	map’s	</text>
<text top="1026" left="640" width="41" height="14" font="5">find</text>
<text top="1022" left="681" width="76" height="20" font="2">	member</text>
<text top="1048" left="54" width="77" height="20" font="2">function.</text>
<text top="1086" left="54" width="89" height="22" font="8"><b>Exercise</b></text>
<text top="1125" left="54" width="570" height="20" font="2">Ask	the	user	to	enter	five	items	and	their	quantities	into	an	empty	</text>
<text top="1129" left="624" width="31" height="14" font="5">map</text>
<text top="1125" left="655" width="168" height="20" font="2">.	Print	the	results	in</text>
<text top="1151" left="54" width="108" height="20" font="2">sorted	order.</text>
</page>
<page number="364" position="absolute" top="0" left="0" height="1262" width="892">
<text top="59" left="54" width="88" height="22" font="8"><b>Solution</b></text>
<text top="97" left="54" width="546" height="20" font="2">The	solution	of	the	preceding	exercise	uses	the	following	code:</text>
<text top="141" left="54" width="197" height="14" font="5">#include	&lt;iostream&gt;</text>
<text top="161" left="54" width="176" height="14" font="5">#include	&lt;string&gt;</text>
<text top="182" left="54" width="145" height="14" font="5">#include	&lt;map&gt;</text>
<text top="202" left="54" width="207" height="14" font="5">using	namespace	std;</text>
<text top="223" left="54" width="104" height="14" font="5">int	main()</text>
<text top="243" left="54" width="10" height="14" font="5">{</text>
<text top="264" left="54" width="259" height="14" font="5">		map&lt;string,	int&gt;	items;</text>
<text top="284" left="54" width="580" height="14" font="5">		cout	&lt;&lt;	&#34;Enter	5	items,	and	their	quantities&#34;	&lt;&lt;	endl;</text>
<text top="305" left="54" width="280" height="14" font="5">		while(	items.size()	&lt;	5	)</text>
<text top="325" left="54" width="31" height="14" font="5">		{</text>
<text top="346" left="54" width="342" height="14" font="5">				cout	&lt;&lt;	&#34;Enter	item&#34;	&lt;&lt;	endl;</text>
<text top="366" left="54" width="166" height="14" font="5">				string	item;</text>
<text top="387" left="54" width="166" height="14" font="5">				cin	&gt;&gt;	item;</text>
<text top="407" left="54" width="383" height="14" font="5">				cout	&lt;&lt;	&#34;Enter	quantity&#34;	&lt;&lt;	endl;</text>
<text top="428" left="54" width="124" height="14" font="5">				int	qty;</text>
<text top="449" left="54" width="155" height="14" font="5">				cin	&gt;&gt;	qty;</text>
<text top="469" left="54" width="580" height="14" font="5">				items[	item	]	=	qty;	//	save	in	map,	square	brackets</text>
<text top="490" left="54" width="155" height="14" font="5">				//	notation</text>
<text top="510" left="54" width="31" height="14" font="5">		}</text>
<text top="551" left="54" width="766" height="14" font="5">		for(	map&lt;string,	int&gt;::iterator	it	=	items.begin();	it	!=		items.end();	</text>
<text top="572" left="54" width="62" height="14" font="5">++it	)</text>
<text top="592" left="54" width="31" height="14" font="5">		{</text>
<text top="613" left="54" width="715" height="14" font="5">				cout	&lt;&lt;	&#34;items[	&#34;	&lt;&lt;	it-&gt;first	&lt;&lt;	&#34;	]	=	&#34;	&lt;&lt;	it-&gt;second	&lt;&lt;		endl;</text>
<text top="633" left="54" width="31" height="14" font="5">		}</text>
<text top="654" left="54" width="10" height="14" font="5">}</text>
<text top="685" left="54" width="361" height="20" font="2">In	this	solution	code,	we	start	by	creating	</text>
<text top="689" left="415" width="228" height="14" font="5">map&lt;string,	int&gt;	items</text>
<text top="685" left="643" width="180" height="20" font="2">	to	store	all	the	items</text>
<text top="711" left="54" width="696" height="20" font="2">we’re	going	to	take	in.	Ask	the	user	for	an	item	and	a	quantity;	then	we	save	the	</text>
<text top="715" left="750" width="41" height="14" font="5">item</text>
<text top="711" left="791" width="22" height="20" font="2">	in</text>
<text top="737" left="54" width="32" height="20" font="2">the	</text>
<text top="741" left="86" width="52" height="14" font="5">items</text>
<text top="737" left="138" width="315" height="20" font="2">	map	using	square	brackets	notation.</text>
</page>
<page number="365" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="366" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="182" height="39" font="0"><b>Summary</b></text>
<text top="120" left="54" width="737" height="20" font="2">UE4’s	container-fluids	and	the	C++	STL	family	of	container-fluids	are	both	excellent	for	storing</text>
<text top="146" left="54" width="769" height="20" font="2">game	data.	Often,	a	programming	problem	can	be	simplified	many	times	by	selecting	the</text>
<text top="172" left="54" width="238" height="20" font="2">right	type	of	data	container-fluid.</text>
<text top="209" left="54" width="746" height="20" font="2">In	the	next	chapter,	we	will	actually	get	to	programming	the	beginning	of	our	game	by</text>
<text top="235" left="54" width="665" height="20" font="2">keeping	track	of	what	the	player	is	carrying	and	storing	that	information	in	a	</text>
<text top="239" left="719" width="41" height="14" font="5">TMap</text>
<text top="235" left="761" width="64" height="20" font="2">	object.</text>
</page>
<page number="367" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="368" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="775" height="39" font="0"><b>Chapter	10.	Inventory	System	and	Pickup</b></text>
<text top="116" left="54" width="103" height="39" font="0"><b>Items</b></text>
<text top="172" left="54" width="759" height="20" font="2">We	want	our	player	to	be	able	to	pick	up	items	from	the	game	world.	In	this	chapter,	we</text>
<text top="198" left="54" width="751" height="20" font="2">will	code	and	design	a	backpack	for	our	player	to	store	items.	We	will	display	what	the</text>
<text top="224" left="54" width="529" height="20" font="2">player	is	carrying	in	the	pack	when	the	user	presses	the	<i>I</i>	key.</text>
<text top="260" left="54" width="351" height="20" font="2">As	a	data	representation,	we	can	use	the	</text>
<text top="265" left="405" width="186" height="14" font="5">TMap&lt;FString,	int&gt;</text>
<text top="260" left="591" width="180" height="20" font="2">	items	covered	in	the</text>
<text top="286" left="54" width="744" height="20" font="2">previous	chapter	to	store	our	items.	When	the	player	picks	up	an	item,	we	add	it	to	the</text>
<text top="312" left="54" width="781" height="20" font="2">map.	If	the	item	is	already	in	the	map,	we	just	increase	its	value	by	the	quantity	of	the	new</text>
<text top="338" left="54" width="142" height="20" font="2">items	picked	up.</text>
</page>
<page number="369" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="437" height="39" font="0"><b>Declaring	the	backpack</b></text>
<text top="120" left="54" width="448" height="20" font="2">We	can	represent	the	player’s	backpack	as	a	simple	</text>
<text top="124" left="502" width="186" height="14" font="5">TMap&lt;FString,	int&gt;</text>
<text top="120" left="688" width="130" height="20" font="2">	item.	To	allow</text>
<text top="146" left="54" width="457" height="20" font="2">your	player	to	gather	items	from	the	world,	open	the	</text>
<text top="150" left="511" width="83" height="14" font="5">Avatar.h</text>
<text top="146" left="594" width="228" height="20" font="2">	file	and	add	the	following</text>
<text top="176" left="54" width="41" height="14" font="5">TMap</text>
<text top="172" left="95" width="107" height="20" font="2">	declaration:</text>
<text top="215" left="54" width="632" height="14" font="5">class	APickupItem;	//		forward	declare	the	APickupItem	class,</text>
<text top="236" left="54" width="756" height="14" font="5">																			//	since	it	will	be	&#34;mentioned&#34;	in	a	member		function	</text>
<text top="256" left="54" width="104" height="14" font="5">decl	below</text>
<text top="277" left="54" width="83" height="14" font="5">UCLASS()</text>
<text top="297" left="54" width="487" height="14" font="5">class	GOLDENEGG_API	AAvatar	:	public	ACharacter</text>
<text top="318" left="54" width="10" height="14" font="5">{</text>
<text top="338" left="54" width="259" height="14" font="5">		GENERATED_UCLASS_BODY()</text>
<text top="379" left="54" width="373" height="14" font="5">		//	A	map	for	the	player's	backpack</text>
<text top="400" left="54" width="311" height="14" font="5">		TMap&lt;FString,	int&gt;	Backpack;</text>
<text top="441" left="54" width="642" height="14" font="5">		//	The	icons	for	the	items	in	the	backpack,	lookup	by	string</text>
<text top="461" left="54" width="363" height="14" font="5">		TMap&lt;FString,	UTexture2D*&gt;	Icons;</text>
<text top="503" left="54" width="425" height="14" font="5">		//	A	flag	alerting	us	the	UI	is	showing</text>
<text top="523" left="54" width="249" height="14" font="5">		bool	inventoryShowing;</text>
<text top="544" left="54" width="580" height="14" font="5">		//	member	function	for	letting	the	avatar	have	an	item</text>
<text top="564" left="54" width="363" height="14" font="5">		void	Pickup(	APickupItem	*item	);</text>
<text top="585" left="54" width="414" height="14" font="5">		//	...	rest	of	Avatar.h	same	as	before</text>
<text top="605" left="54" width="21" height="14" font="5">};</text>
</page>
<page number="370" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="14" size="10" family="Times" color="#000000"/>
<image top="508" left="276" width="279" height="279" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-370_1.jpg"/>
<image top="856" left="276" width="279" height="279" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-370_2.jpg"/>
<text top="61" left="54" width="316" height="32" font="7"><b>Forward	declaration</b></text>
<text top="110" left="54" width="64" height="20" font="2">Before	</text>
<text top="115" left="118" width="73" height="14" font="5">AAvatar</text>
<text top="110" left="191" width="246" height="20" font="2">	class,	notice	that	we	have	a	</text>
<text top="115" left="436" width="176" height="14" font="5">class	APickupItem</text>
<text top="110" left="612" width="180" height="20" font="2">	forward	declaration.</text>
<text top="136" left="54" width="737" height="20" font="2">Forward	declarations	are	needed	in	a	code	file	when	a	class	is	mentioned	(such	as	the</text>
<text top="167" left="54" width="425" height="14" font="5">APickupItem::Pickup(	APickupItem	*item	);</text>
<text top="162" left="479" width="352" height="20" font="2">	function	prototype),	but	there	is	no	code</text>
<text top="188" left="54" width="615" height="20" font="2">in	the	file	actually	using	an	object	of	that	type	inside	the	file.	Since	the	</text>
<text top="192" left="669" width="83" height="14" font="5">Avatar.h</text>
<text top="188" left="752" width="63" height="20" font="2">	header</text>
<text top="214" left="54" width="587" height="20" font="2">file	does	not	contain	executable	code	that	uses	an	object	of	the	type	</text>
<text top="218" left="641" width="114" height="14" font="5">APickupItem</text>
<text top="214" left="755" width="20" height="20" font="2">,	a</text>
<text top="240" left="54" width="319" height="20" font="2">forward	declaration	is	what	we	need.</text>
<text top="277" left="54" width="770" height="20" font="2">The	absence	of	a	forward	declaration	will	give	a	compiler	error,	since	the	compiler	won’t</text>
<text top="303" left="54" width="123" height="20" font="2">have	heard	of	</text>
<text top="307" left="177" width="176" height="14" font="5">class	APickupItem</text>
<text top="303" left="353" width="259" height="20" font="2">	before	compiling	the	code	in	</text>
<text top="307" left="612" width="135" height="14" font="5">class	AAvatar</text>
<text top="303" left="747" width="44" height="20" font="2">.	The</text>
<text top="329" left="54" width="430" height="20" font="2">compiler	error	will	come	at	the	declaration	of	the	</text>
<text top="333" left="484" width="331" height="14" font="5">APickupItem::Pickup(	APickupItem</text>
<text top="359" left="54" width="83" height="14" font="5">*item	);</text>
<text top="354" left="137" width="272" height="20" font="2">	function	prototype	declaration.</text>
<text top="391" left="54" width="150" height="20" font="2">We	declared	two	</text>
<text top="396" left="204" width="41" height="14" font="5">TMap</text>
<text top="391" left="245" width="161" height="20" font="2">	objects	inside	the	</text>
<text top="396" left="406" width="73" height="14" font="5">AAvatar</text>
<text top="391" left="478" width="345" height="20" font="2">	class.	This	is	how	the	objects	will	look,</text>
<text top="417" left="54" width="276" height="20" font="2">as	shown	in	the	following	table:</text>
<text top="470" left="59" width="54" height="11" font="14"><b>FString</b></text>
<text top="468" left="114" width="53" height="14" font="9"><b>	(name)</b></text>
<text top="470" left="173" width="23" height="11" font="14"><b>int</b></text>
<text top="468" left="196" width="73" height="14" font="9"><b>	(quantity)</b></text>
<text top="470" left="276" width="85" height="11" font="14"><b>UTexture2D*</b></text>
<text top="468" left="362" width="33" height="14" font="9"><b>	(im)</b></text>
<text top="664" left="59" width="74" height="15" font="10">GoldenEgg</text>
<text top="664" left="173" width="8" height="15" font="10">2</text>
<text top="1012" left="59" width="78" height="15" font="10">MetalDonut</text>
<text top="1012" left="173" width="8" height="15" font="10">1</text>
</page>
<page number="371" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="276" width="279" height="279" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-371_1.jpg"/>
<image top="605" left="54" width="279" height="163" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-371_2.jpg"/>
<text top="206" left="59" width="31" height="15" font="10">Cow</text>
<text top="206" left="173" width="8" height="15" font="10">2</text>
<text top="406" left="54" width="55" height="20" font="2">In	the	</text>
<text top="411" left="109" width="41" height="14" font="5">TMap</text>
<text top="406" left="151" width="207" height="20" font="2">	backpack,	we	store	the	</text>
<text top="411" left="358" width="73" height="14" font="5">FString</text>
<text top="406" left="430" width="399" height="20" font="2">	variable	of	the	item	that	the	player	is	holding.</text>
<text top="432" left="54" width="55" height="20" font="2">In	the	</text>
<text top="437" left="109" width="52" height="14" font="5">Icons</text>
<text top="432" left="161" width="605" height="20" font="2">	map,	we	store	a	single	reference	to	the	image	of	the	item	the	player	is</text>
<text top="458" left="54" width="71" height="20" font="2">holding.</text>
<text top="495" left="54" width="773" height="20" font="2">At	render	time,	we	can	use	the	two	maps	working	together	to	look	up	both	the	quantity	of</text>
<text top="521" left="54" width="293" height="20" font="2">an	item	that	the	player	has	(in	his	</text>
<text top="525" left="347" width="83" height="14" font="5">Backpack</text>
<text top="521" left="429" width="378" height="20" font="2">	mapping)	and	the	texture	asset	reference	of</text>
<text top="547" left="54" width="143" height="20" font="2">that	item	(in	the	</text>
<text top="551" left="197" width="52" height="14" font="5">Icons</text>
<text top="547" left="248" width="557" height="20" font="2">	map).	The	following	screenshot	shows	how	the	rendering	of	the</text>
<text top="573" left="54" width="135" height="20" font="2">HUD	will	look:</text>
<text top="839" left="54" width="50" height="22" font="8"><b>Note</b></text>
<text top="877" left="54" width="324" height="20" font="2">Note	that	we	can	also	use	an	array	of	</text>
<text top="882" left="378" width="62" height="14" font="5">struct</text>
<text top="877" left="440" width="75" height="20" font="2">	with	an	</text>
<text top="882" left="515" width="73" height="14" font="5">FString</text>
<text top="877" left="588" width="117" height="20" font="2">	variable	and	</text>
<text top="882" left="705" width="114" height="14" font="5">UTexture2D*</text>
<text top="903" left="54" width="270" height="20" font="2">in	it	instead	of	using	two	maps.</text>
<text top="940" left="54" width="231" height="20" font="2">For	example,	we	can	keep	</text>
<text top="944" left="285" width="228" height="14" font="5">TArray&lt;Item&gt;	Backpack;</text>
<text top="940" left="513" width="64" height="20" font="2">	with	a	</text>
<text top="944" left="577" width="62" height="14" font="5">struct</text>
<text top="940" left="640" width="188" height="20" font="2">	variable,	as	shown	in</text>
<text top="966" left="54" width="168" height="20" font="2">the	following	code:</text>
<text top="1009" left="54" width="114" height="14" font="5">struct	Item</text>
<text top="1030" left="54" width="10" height="14" font="5">{</text>
<text top="1050" left="54" width="155" height="14" font="5">		FString	name;</text>
<text top="1071" left="54" width="104" height="14" font="5">		int	qty;</text>
<text top="1091" left="54" width="186" height="14" font="5">		UTexture2D*	tex;</text>
<text top="1112" left="54" width="21" height="14" font="5">};</text>
<text top="1143" left="54" width="759" height="20" font="2">Then,	as	we	pick	up	items,	they	will	be	added	to	the	linear	array.	However,	counting	the</text>
<text top="1169" left="54" width="717" height="20" font="2">number	of	each	item	we	have	in	the	backpack	will	require	constant	reevaluation	by</text>
</page>
<page number="372" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="755" height="20" font="2">iterating	through	the	array	of	items	each	time	we	want	to	see	the	count.	For	example,	to</text>
<text top="83" left="54" width="735" height="20" font="2">see	how	many	hairbrushes	you	have,	you	will	need	to	make	a	pass	through	the	whole</text>
<text top="109" left="54" width="384" height="20" font="2">array.	This	is	not	as	efficient	as	using	a	map.</text>
</page>
<page number="373" position="absolute" top="0" left="0" height="1262" width="892">
<image top="346" left="97" width="742" height="530" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-373_1.jpg"/>
<text top="61" left="54" width="252" height="32" font="7"><b>Importing	assets</b></text>
<text top="110" left="54" width="767" height="20" font="2">You	might	have	noticed	the	<b>Cow</b>	asset	in	the	preceding	screenshot,	which	is	not	a	part	of</text>
<text top="136" left="54" width="735" height="20" font="2">the	standard	set	of	assets	that	UE4	provides	in	a	new	project.	In	order	to	use	the	<b>Cow</b></text>
<text top="162" left="54" width="783" height="20" font="2">asset,	you	need	to	import	the	cow	from	the	<b>Content	Examples</b>	project.	There	is	a	standard</text>
<text top="188" left="54" width="308" height="20" font="2">importing	procedure	that	UE4	uses.</text>
<text top="225" left="54" width="752" height="20" font="2">In	the	following	screenshot,	I	have	outlined	the	procedure	for	importing	the	<b>Cow</b>	asset.</text>
<text top="251" left="54" width="776" height="20" font="2">Other	assets	will	be	imported	from	other	projects	in	UE4	using	the	same	method.	Perform</text>
<text top="277" left="54" width="382" height="20" font="2">the	following	steps	to	import	the	<b>Cow</b>	asset:</text>
<text top="313" left="69" width="508" height="20" font="2">1.	 Download	and	open	UE4’s	<b>Content	Examples</b>	project:</text>
<text top="944" left="69" width="692" height="20" font="2">2.	 After	you	have	downloaded	<b>Content	Examples</b>,	open	it	and	click	on	<b>Create</b></text>
<text top="971" left="97" width="73" height="19" font="3"><b>Project</b>:</text>
</page>
<page number="374" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="742" height="306" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-374_1.jpg"/>
<image top="563" left="97" width="742" height="432" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-374_2.jpg"/>
<text top="427" left="69" width="457" height="20" font="2">3.	 Next,	name	the	folder	in	which	you	will	put	your	</text>
<text top="431" left="526" width="155" height="14" font="5">ContentExamples</text>
<text top="427" left="681" width="111" height="20" font="2">	and	click	on</text>
<text top="453" left="97" width="67" height="19" font="3"><b>Create</b>.</text>
<text top="479" left="69" width="125" height="20" font="2">4.	 Open	your	</text>
<text top="483" left="194" width="155" height="14" font="5">ContentExamples</text>
<text top="479" left="350" width="476" height="20" font="2">	project	from	the	library.	Browse	the	assets	available	in</text>
<text top="505" left="97" width="498" height="20" font="2">the	project	until	you	find	one	that	you	like.	Searching	for	</text>
<text top="509" left="595" width="31" height="14" font="5">SM_</text>
<text top="505" left="626" width="209" height="20" font="2">	will	help	since	all	static</text>
<text top="531" left="97" width="234" height="20" font="2">meshes	usually	begin	with	</text>
<text top="535" left="331" width="31" height="14" font="5">SM_</text>
<text top="531" left="362" width="134" height="20" font="2">	by	convention.</text>
<text top="1032" left="270" width="396" height="20" font="4"><i>Lists	of	static	meshes,	all	beginning	with	SM_</i></text>
<text top="1101" left="69" width="756" height="20" font="2">5.	 When	you	find	an	asset	that	you	like,	import	it	into	your	project	by	right-clicking	on</text>
<text top="1127" left="97" width="362" height="20" font="2">the	asset	and	then	clicking	on	<b>Migrate…</b>:</text>
</page>
<page number="375" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="411" height="443" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-375_1.jpg"/>
<image top="597" left="97" width="502" height="212" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-375_2.jpg"/>
<text top="565" left="69" width="385" height="20" font="2">6.	 Click	on	<b>OK</b>	in	the	<b>Asset	Report</b>	dialog:</text>
<text top="878" left="69" width="750" height="20" font="2">7.	 Select	the	<b>Content</b>	folder	from	your	project	that	you	want	to	add	the	<b>SM_Door</b>	file</text>
<text top="904" left="97" width="258" height="20" font="2">to.	For	me,	I	want	to	add	it	to	</text>
<text top="909" left="356" width="373" height="14" font="5">Y:/Unreal	Projects/GoldenEgg/Content</text>
<text top="904" left="728" width="91" height="20" font="2">,	as	shown</text>
<text top="930" left="97" width="240" height="20" font="2">in	the	following	screenshot:</text>
</page>
<page number="376" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="335" height="436" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-376_1.jpg"/>
<image top="591" left="97" width="534" height="103" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-376_2.jpg"/>
<image top="821" left="97" width="474" height="281" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-376_3.jpg"/>
<text top="559" left="69" width="689" height="20" font="2">8.	 If	the	import	was	completed	successfully,	you	will	see	a	message	as	follows:</text>
<text top="763" left="69" width="769" height="20" font="2">9.	 Once	you	import	your	asset,	you	will	see	it	show	up	in	your	asset	browser	inside	your</text>
<text top="789" left="97" width="66" height="20" font="2">project:</text>
</page>
<page number="377" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="481" height="20" font="2">You	can	then	use	the	asset	inside	your	project	normally.</text>
</page>
<page number="378" position="absolute" top="0" left="0" height="1262" width="892">
<image top="169" left="54" width="622" height="414" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-378_1.jpg"/>
<text top="61" left="54" width="570" height="32" font="7"><b>Attaching	an	action	mapping	to	a	key</b></text>
<text top="110" left="54" width="756" height="20" font="2">We	need	to	attach	a	key	to	activate	the	display	of	the	player’s	inventory.	Inside	the	UE4</text>
<text top="136" left="54" width="362" height="20" font="2">editor,	add	an	<b>Action	Mappings	+</b>	called	</text>
<text top="141" left="416" width="93" height="14" font="5">Inventory</text>
<text top="136" left="509" width="308" height="20" font="2">	and	assign	it	to	the	keyboard	key	<i>I</i>:</text>
<text top="652" left="54" width="55" height="20" font="2">In	the	</text>
<text top="656" left="109" width="83" height="14" font="5">Avatar.h</text>
<text top="652" left="192" width="628" height="20" font="2">	file,	add	a	member	function	to	be	run	when	the	player’s	inventory	needs</text>
<text top="677" left="54" width="137" height="20" font="2">to	be	displayed:</text>
<text top="721" left="54" width="238" height="14" font="5">void	ToggleInventory();</text>
<text top="752" left="54" width="55" height="20" font="2">In	the	</text>
<text top="756" left="109" width="104" height="14" font="5">Avatar.cpp</text>
<text top="752" left="213" width="174" height="20" font="2">	file,	implement	the	</text>
<text top="756" left="387" width="176" height="14" font="5">ToggleInventory()</text>
<text top="752" left="563" width="222" height="20" font="2">	function,	as	shown	in	the</text>
<text top="778" left="54" width="136" height="20" font="2">following	code:</text>
<text top="821" left="54" width="321" height="14" font="5">void	AAvatar::ToggleInventory()</text>
<text top="842" left="54" width="10" height="14" font="5">{</text>
<text top="862" left="54" width="155" height="14" font="5">		if(	GEngine	)</text>
<text top="883" left="54" width="31" height="14" font="5">		{</text>
<text top="903" left="54" width="715" height="14" font="5">				GEngine-&gt;AddOnScreenDebugMessage(	0,	5.f,	FColor::Red,		&#34;Showing	</text>
<text top="924" left="54" width="145" height="14" font="5">inventory…&#34;	);</text>
<text top="944" left="54" width="31" height="14" font="5">		}</text>
<text top="965" left="54" width="10" height="14" font="5">}</text>
<text top="996" left="54" width="159" height="20" font="2">Then,	connect	the	</text>
<text top="1001" left="213" width="114" height="14" font="5">&#34;Inventory&#34;</text>
<text top="996" left="327" width="86" height="20" font="2">	action	to	</text>
<text top="1001" left="413" width="269" height="14" font="5">AAvatar::ToggleInventory()</text>
<text top="996" left="682" width="22" height="20" font="2">	in</text>
<text top="1026" left="54" width="280" height="14" font="5">SetupPlayerInputComponent()</text>
<text top="1022" left="334" width="6" height="20" font="2">:</text>
<text top="1065" left="54" width="663" height="14" font="5">void	AAvatar::SetupPlayerInputComponent(class	UInputComponent*		</text>
<text top="1086" left="54" width="155" height="14" font="5">InputComponent)</text>
<text top="1106" left="54" width="10" height="14" font="5">{</text>
<text top="1127" left="54" width="642" height="14" font="5">		InputComponent-&gt;BindAction(	&#34;Inventory&#34;,	IE_Pressed,	this,		</text>
<text top="1147" left="54" width="290" height="14" font="5">&amp;AAvatar::ToggleInventory	);</text>
<text top="1168" left="54" width="549" height="14" font="5">		//	rest	of	SetupPlayerInputComponent	same	as	before</text>
<text top="1189" left="54" width="10" height="14" font="5">}</text>
</page>
<page number="379" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="380" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="381" position="absolute" top="0" left="0" height="1262" width="892">
<image top="293" left="54" width="785" height="173" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-381_1.jpg"/>
<text top="64" left="54" width="410" height="39" font="0"><b>Base	class	PickupItem</b></text>
<text top="120" left="54" width="764" height="20" font="2">We	need	to	define	how	a	pickup	item	looks	in	code.	Each	pickup	item	will	derive	from	a</text>
<text top="146" left="54" width="479" height="20" font="2">common	base	class.	Let’s	construct	the	base	class	for	a	</text>
<text top="150" left="533" width="104" height="14" font="5">PickupItem</text>
<text top="146" left="637" width="94" height="20" font="2">	class	now.</text>
<text top="183" left="54" width="39" height="20" font="2">The	</text>
<text top="187" left="93" width="104" height="14" font="5">PickupItem</text>
<text top="183" left="197" width="300" height="20" font="2">	base	class	should	inherit	from	the	</text>
<text top="187" left="497" width="62" height="14" font="5">AActor</text>
<text top="183" left="559" width="217" height="20" font="2">	class.	Similar	to	how	we</text>
<text top="209" left="54" width="702" height="20" font="2">created	multiple	NPC	blueprints	from	the	base	NPC	class,	we	can	create	multiple</text>
<text top="239" left="54" width="104" height="14" font="5">PickupItem</text>
<text top="235" left="158" width="216" height="20" font="2">	blueprints	from	a	single	</text>
<text top="239" left="374" width="104" height="14" font="5">PickupItem</text>
<text top="235" left="478" width="325" height="20" font="2">	base	class,	as	shown	in	the	following</text>
<text top="260" left="54" width="97" height="20" font="2">screenshot:</text>
<text top="534" left="54" width="234" height="20" font="2">Once	you	have	created	the	</text>
<text top="538" left="288" width="104" height="14" font="5">PickupItem</text>
<text top="534" left="392" width="322" height="20" font="2">	class,	open	its	code	in	Visual	Studio.</text>
<text top="571" left="54" width="39" height="20" font="2">The	</text>
<text top="575" left="93" width="114" height="14" font="5">APickupItem</text>
<text top="571" left="207" width="423" height="20" font="2">	class	will	need	quite	a	few	members,	as	follows:</text>
<text top="607" left="97" width="32" height="20" font="2">An	</text>
<text top="612" left="129" width="73" height="14" font="5">FString</text>
<text top="607" left="201" width="432" height="20" font="2">	variable	for	the	name	of	the	item	being	picked	up</text>
<text top="633" left="97" width="32" height="20" font="2">An	</text>
<text top="638" left="129" width="52" height="14" font="5">int32</text>
<text top="633" left="181" width="456" height="20" font="2">	variable	for	the	quantity	of	the	item	being	picked	up</text>
<text top="659" left="97" width="20" height="20" font="2">A	</text>
<text top="663" left="117" width="166" height="14" font="5">USphereComponent</text>
<text top="659" left="283" width="550" height="20" font="2">	variable	for	the	sphere	that	you	will	collide	with	for	the	item	to</text>
<text top="685" left="97" width="110" height="20" font="2">be	picked	up</text>
<text top="711" left="97" width="20" height="20" font="2">A	</text>
<text top="715" left="117" width="207" height="14" font="5">UStaticMeshComponent</text>
<text top="711" left="324" width="235" height="20" font="2">	variable	to	hold	the	actual	</text>
<text top="715" left="559" width="41" height="14" font="5">Mesh</text>
<text top="737" left="97" width="20" height="20" font="2">A	</text>
<text top="741" left="117" width="104" height="14" font="5">UTexture2D</text>
<text top="737" left="221" width="386" height="20" font="2">	variable	for	the	icon	that	represents	the	item</text>
<text top="763" left="97" width="462" height="20" font="2">A	pointer	for	the	HUD	(which	we	will	initialize	later)</text>
<text top="800" left="54" width="206" height="20" font="2">This	is	how	the	code	in	</text>
<text top="804" left="260" width="124" height="14" font="5">PickupItem.h</text>
<text top="800" left="385" width="58" height="20" font="2">	looks:</text>
<text top="843" left="54" width="83" height="14" font="5">UCLASS()</text>
<text top="863" left="54" width="487" height="14" font="5">class	GOLDENEGG_API	APickupItem	:	public	AActor</text>
<text top="884" left="54" width="10" height="14" font="5">{</text>
<text top="904" left="54" width="259" height="14" font="5">		GENERATED_UCLASS_BODY()</text>
<text top="945" left="54" width="425" height="14" font="5">		//	The	name	of	the	item	you	are	getting</text>
<text top="966" left="54" width="642" height="14" font="5">		UPROPERTY(EditAnywhere,	BlueprintReadWrite,	Category	=	Item)</text>
<text top="986" left="54" width="155" height="14" font="5">		FString	Name;</text>
<text top="1028" left="54" width="300" height="14" font="5">		//	How	much	you	are	getting</text>
<text top="1048" left="54" width="642" height="14" font="5">		UPROPERTY(EditAnywhere,	BlueprintReadWrite,	Category	=	Item)</text>
<text top="1069" left="54" width="176" height="14" font="5">		int32	Quantity;</text>
<text top="1110" left="54" width="497" height="14" font="5">		//	the	sphere	you	collide	with	to	pick	item	up</text>
<text top="1130" left="54" width="715" height="14" font="5">		UPROPERTY(VisibleDefaultsOnly,	BlueprintReadOnly,	Category	=		Item)</text>
<text top="1151" left="54" width="466" height="14" font="5">		TSubobjectPtr&lt;USphereComponent&gt;	ProxSphere;</text>
<text top="1192" left="54" width="259" height="14" font="5">		//	The	mesh	of	the	item</text>
</page>
<page number="382" position="absolute" top="0" left="0" height="1262" width="892">
<image top="399" left="54" width="622" height="184" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-382_1.jpg"/>
<text top="57" left="54" width="715" height="14" font="5">		UPROPERTY(VisibleDefaultsOnly,	BlueprintReadOnly,	Category	=		Item)</text>
<text top="78" left="54" width="445" height="14" font="5">		TSubobjectPtr&lt;UStaticMeshComponent&gt;	Mesh;</text>
<text top="119" left="54" width="549" height="14" font="5">		//	The	icon	that	represents	the	object	in	UI/canvas</text>
<text top="140" left="54" width="642" height="14" font="5">		UPROPERTY(EditAnywhere,	BlueprintReadWrite,	Category	=	Item)</text>
<text top="160" left="54" width="197" height="14" font="5">		UTexture2D*	Icon;</text>
<text top="201" left="54" width="653" height="14" font="5">		//	When	something	comes	inside	ProxSphere,	this	function	runs</text>
<text top="222" left="54" width="570" height="14" font="5">		UFUNCTION(BlueprintNativeEvent,	Category	=	Collision)</text>
<text top="242" left="54" width="746" height="14" font="5">		void	Prox(	AActor*	OtherActor,	UPrimitiveComponent*	OtherComp,		int32	</text>
<text top="263" left="54" width="694" height="14" font="5">OtherBodyIndex,	bool	bFromSweep,	const	FHitResult	&amp;		SweepResult	);</text>
<text top="283" left="54" width="21" height="14" font="5">};</text>
<text top="315" left="54" width="189" height="20" font="2">The	point	of	all	these	</text>
<text top="319" left="243" width="114" height="14" font="5">UPROPERTY()</text>
<text top="315" left="357" width="209" height="20" font="2">	declarations	is	to	make	</text>
<text top="319" left="566" width="114" height="14" font="5">APickupItem</text>
<text top="315" left="680" width="101" height="20" font="2">	completely</text>
<text top="340" left="54" width="705" height="20" font="2">configurable	by	blueprints.	For	example,	the	items	in	the	<b>Pickup</b>	category	will	be</text>
<text top="366" left="54" width="384" height="20" font="2">displayed	as	follows	in	the	blueprints	editor:</text>
<text top="652" left="54" width="55" height="20" font="2">In	the	</text>
<text top="656" left="109" width="145" height="14" font="5">PickupItem.cpp</text>
<text top="652" left="254" width="357" height="20" font="2">	file,	we	complete	the	constructor	for	the	</text>
<text top="656" left="611" width="114" height="14" font="5">APickupItem</text>
<text top="652" left="725" width="76" height="20" font="2">	class,	as</text>
<text top="677" left="54" width="252" height="20" font="2">shown	in	the	following	code:</text>
<text top="721" left="54" width="756" height="14" font="5">APickupItem::APickupItem(const	class	FPostConstructInitializeProperties&amp;	</text>
<text top="741" left="54" width="197" height="14" font="5">PCIP)	:	Super(PCIP)</text>
<text top="762" left="54" width="10" height="14" font="5">{</text>
<text top="782" left="54" width="249" height="14" font="5">		Name	=	&#34;UNKNOWN	ITEM&#34;;</text>
<text top="803" left="54" width="155" height="14" font="5">		Quantity	=	0;</text>
<text top="844" left="54" width="352" height="14" font="5">		//	initialize	the	unreal	objects</text>
<text top="864" left="54" width="704" height="14" font="5">		ProxSphere	=	PCIP.CreateDefaultSubobject&lt;USphereComponent&gt;(this,		</text>
<text top="885" left="54" width="207" height="14" font="5">TEXT(&#34;ProxSphere&#34;));</text>
<text top="905" left="54" width="684" height="14" font="5">		Mesh	=	PCIP.CreateDefaultSubobject&lt;UStaticMeshComponent&gt;(this,		</text>
<text top="926" left="54" width="145" height="14" font="5">TEXT(&#34;Mesh&#34;));</text>
<text top="967" left="54" width="352" height="14" font="5">		//	make	the	root	object	the	Mesh</text>
<text top="988" left="54" width="238" height="14" font="5">		RootComponent	=	Mesh;</text>
<text top="1008" left="54" width="342" height="14" font="5">		Mesh-&gt;SetSimulatePhysics(true);</text>
<text top="1049" left="54" width="528" height="14" font="5">		//	Code	to	make	APickupItem::Prox()	run	when	this</text>
<text top="1070" left="54" width="559" height="14" font="5">		//	object's	proximity	sphere	overlaps	another	actor.</text>
<text top="1090" left="54" width="580" height="14" font="5">		ProxSphere-&gt;OnComponentBeginOverlap.AddDynamic(this,		</text>
<text top="1111" left="54" width="207" height="14" font="5">&amp;APickupItem::Prox);</text>
<text top="1131" left="54" width="528" height="14" font="5">		ProxSphere-&gt;AttachTo(	Mesh	);	//	very	important!	</text>
<text top="1152" left="54" width="10" height="14" font="5">}</text>
<text top="1183" left="54" width="454" height="20" font="2">In	the	first	two	lines,	we	perform	an	initialization	of	</text>
<text top="1187" left="508" width="41" height="14" font="5">Name</text>
<text top="1183" left="549" width="42" height="20" font="2">	and	</text>
<text top="1187" left="591" width="83" height="14" font="5">Quantity</text>
<text top="1183" left="674" width="120" height="20" font="2">	to	values	that</text>
</page>
<page number="383" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="766" height="20" font="2">should	stand	out	to	the	game	designer	as	being	uninitialized.	I	used	block	capitals	so	that</text>
<text top="83" left="54" width="673" height="20" font="2">the	designer	can	clearly	see	that	the	variable	has	never	been	initialized	before.</text>
<text top="120" left="54" width="189" height="20" font="2">We	then	initialize	the	</text>
<text top="124" left="243" width="104" height="14" font="5">ProxSphere</text>
<text top="120" left="346" width="42" height="20" font="2">	and	</text>
<text top="124" left="388" width="41" height="14" font="5">Mesh</text>
<text top="120" left="430" width="162" height="20" font="2">	components	using</text>
<text top="150" left="54" width="280" height="14" font="5">PCIP.CreateDefaultSubobject</text>
<text top="146" left="334" width="489" height="20" font="2">.	The	freshly	initialized	objects	might	have	some	of	their</text>
<text top="172" left="54" width="256" height="20" font="2">default	values	initialized,	but	</text>
<text top="176" left="310" width="41" height="14" font="5">Mesh</text>
<text top="172" left="351" width="457" height="20" font="2">	will	start	out	empty.	You	will	have	to	load	the	actual</text>
<text top="198" left="54" width="248" height="20" font="2">mesh	later,	inside	blueprints.</text>
<text top="235" left="54" width="762" height="20" font="2">For	the	mesh,	we	set	it	to	simulate	realistic	physics	so	that	pickup	items	will	bounce	and</text>
<text top="260" left="54" width="638" height="20" font="2">roll	around	if	they	are	dropped	or	moved.	Pay	special	attention	to	the	line	</text>
<text top="265" left="692" width="114" height="14" font="5">ProxSphere-</text>
<text top="291" left="54" width="176" height="14" font="5">&gt;AttachTo(	Mesh	)</text>
<text top="286" left="230" width="441" height="20" font="2">.	This	line	tells	you	to	make	sure	the	pickup	item’s	</text>
<text top="291" left="671" width="104" height="14" font="5">ProxSphere</text>
<text top="312" left="54" width="252" height="20" font="2">component	is	attached	to	the	</text>
<text top="317" left="306" width="41" height="14" font="5">Mesh</text>
<text top="312" left="348" width="486" height="20" font="2">	root	component.	This	means	that	when	the	mesh	moves</text>
<text top="338" left="54" width="107" height="20" font="2">in	the	level,	</text>
<text top="343" left="161" width="104" height="14" font="5">ProxSphere</text>
<text top="338" left="264" width="527" height="20" font="2">	follows.	If	you	forget	this	step	(or	if	you	did	it	the	other	way</text>
<text top="364" left="54" width="121" height="20" font="2">around),	then	</text>
<text top="369" left="174" width="104" height="14" font="5">ProxSphere</text>
<text top="364" left="278" width="367" height="20" font="2">	will	not	follow	the	mesh	when	it	bounces.</text>
</page>
<page number="384" position="absolute" top="0" left="0" height="1262" width="892">
<image top="553" left="54" width="785" height="490" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-384_1.jpg"/>
<text top="61" left="54" width="308" height="32" font="7"><b>The	root	component</b></text>
<text top="110" left="54" width="308" height="20" font="2">In	the	preceding	code,	we	assigned	</text>
<text top="115" left="362" width="135" height="14" font="5">RootComponent</text>
<text top="110" left="496" width="29" height="20" font="2">	of	</text>
<text top="115" left="525" width="114" height="14" font="5">APickupItem</text>
<text top="110" left="639" width="59" height="20" font="2">	to	the	</text>
<text top="115" left="698" width="41" height="14" font="5">Mesh</text>
<text top="110" left="740" width="64" height="20" font="2">	object.</text>
<text top="136" left="54" width="39" height="20" font="2">The	</text>
<text top="141" left="93" width="135" height="14" font="5">RootComponent</text>
<text top="136" left="228" width="210" height="20" font="2">	member	is	a	part	of	the	</text>
<text top="141" left="438" width="62" height="14" font="5">AActor</text>
<text top="136" left="500" width="180" height="20" font="2">	base	class,	so	every	</text>
<text top="141" left="680" width="62" height="14" font="5">AActor</text>
<text top="136" left="742" width="62" height="20" font="2">	and	its</text>
<text top="162" left="54" width="777" height="20" font="2">derivatives	has	a	root	component.	The	root	component	is	basically	meant	to	be	the	core	of</text>
<text top="188" left="54" width="562" height="20" font="2">the	object,	and	also	defines	how	you	collide	with	the	object.	The	</text>
<text top="192" left="616" width="135" height="14" font="5">RootComponent</text>
<text top="188" left="751" width="78" height="20" font="2">	object	is</text>
<text top="214" left="54" width="124" height="20" font="2">defined	in	the	</text>
<text top="218" left="178" width="73" height="14" font="5">Actor.h</text>
<text top="214" left="251" width="320" height="20" font="2">	file,	as	shown	in	the	following	code:</text>
<text top="257" left="54" width="31" height="14" font="5">/**</text>
<text top="278" left="54" width="746" height="14" font="5">	*	Collision	primitive	that	defines	the	transform	(location,		rotation,	</text>
<text top="298" left="54" width="218" height="14" font="5">scale)	of	this	Actor.</text>
<text top="319" left="54" width="31" height="14" font="5">	*/</text>
<text top="339" left="54" width="114" height="14" font="5">UPROPERTY()</text>
<text top="360" left="54" width="383" height="14" font="5">class	USceneComponent*	RootComponent;</text>
<text top="391" left="54" width="258" height="20" font="2">So	the	UE4	creators	intended	</text>
<text top="396" left="312" width="135" height="14" font="5">RootComponent</text>
<text top="391" left="447" width="348" height="20" font="2">	to	always	be	a	reference	to	the	collision</text>
<text top="417" left="54" width="764" height="20" font="2">primitive.	Sometimes	the	collision	primitive	can	be	capsule	shaped,	other	times	it	can	be</text>
<text top="443" left="54" width="780" height="20" font="2">spherical	or	even	box	shaped,	or	it	can	be	arbitrarily	shaped,	as	in	our	case,	with	the	mesh.</text>
<text top="469" left="54" width="769" height="20" font="2">It’s	rare	that	a	character	should	have	a	box-shaped	root	component,	however,	because	the</text>
<text top="495" left="54" width="724" height="20" font="2">corners	of	the	box	can	get	caught	on	walls.	Round	shapes	are	usually	preferred.	The</text>
<text top="525" left="54" width="135" height="14" font="5">RootComponent</text>
<text top="521" left="189" width="641" height="20" font="2">	property	shows	up	in	the	blueprints,	where	you	can	see	and	manipulate	it.</text>
<text top="1079" left="94" width="706" height="20" font="4"><i>You	can	edit	the	ProxSphere	root	component	from	its	blueprints	once	you	create	a</i></text>
<text top="1105" left="274" width="346" height="20" font="4"><i>blueprint	based	on	the	PickupItem	class</i></text>
<text top="1174" left="54" width="102" height="20" font="2">Finally,	the	</text>
<text top="1179" left="156" width="197" height="14" font="5">Prox_Implementation</text>
<text top="1174" left="353" width="340" height="20" font="2">	function	gets	implemented,	as	follows:</text>
</page>
<page number="385" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="621" height="14" font="5">void	APickupItem::Prox_Implementation(	AActor*	OtherActor,		</text>
<text top="78" left="54" width="746" height="14" font="5">UPrimitiveComponent*	OtherComp,	int32	OtherBodyIndex,	bool		bFromSweep,	</text>
<text top="99" left="54" width="331" height="14" font="5">const	FHitResult	&amp;	SweepResult	)</text>
<text top="119" left="54" width="10" height="14" font="5">{</text>
<text top="140" left="54" width="487" height="14" font="5">		//	if	the	overlapped	actor	is	NOT	the	player,</text>
<text top="160" left="54" width="300" height="14" font="5">		//	you	simply	should	return</text>
<text top="181" left="54" width="476" height="14" font="5">		if(	Cast&lt;AAvatar&gt;(	OtherActor	)	==	nullptr	)</text>
<text top="201" left="54" width="31" height="14" font="5">		{</text>
<text top="222" left="54" width="114" height="14" font="5">				return;</text>
<text top="242" left="54" width="31" height="14" font="5">		}</text>
<text top="283" left="54" width="559" height="14" font="5">		//	Get	a	reference	to	the	player	avatar,	to	give	him</text>
<text top="304" left="54" width="135" height="14" font="5">		//	the	item</text>
<text top="324" left="54" width="715" height="14" font="5">		AAvatar	*avatar	=	Cast&lt;AAvatar&gt;(		UGameplayStatics::GetPlayerPawn(	</text>
<text top="345" left="54" width="186" height="14" font="5">GetWorld(),	0	)	);</text>
<text top="386" left="54" width="331" height="14" font="5">		//	Let	the	player	pick	up	item</text>
<text top="406" left="54" width="331" height="14" font="5">		//	Notice	use	of	keyword	this!</text>
<text top="427" left="54" width="528" height="14" font="5">		//	That	is	how	_this_	Pickup	can	refer	to	itself.</text>
<text top="447" left="54" width="259" height="14" font="5">		avatar-&gt;Pickup(	this	);</text>
<text top="488" left="54" width="394" height="14" font="5">		//	Get	a	reference	to	the	controller</text>
<text top="509" left="54" width="777" height="14" font="5">		APlayerController*	PController	=	GetWorld()-	&gt;GetFirstPlayerController();</text>
<text top="550" left="54" width="528" height="14" font="5">		//	Get	a	reference	to	the	HUD	from	the	controller</text>
<text top="571" left="54" width="559" height="14" font="5">		AMyHUD*	hud	=	Cast&lt;AMyHUD&gt;(	PController-&gt;GetHUD()	);</text>
<text top="591" left="54" width="601" height="14" font="5">		hud-&gt;addMessage(	Message(	Icon,	FString(&#34;Picked	up	&#34;)	+	</text>
<text top="612" left="54" width="725" height="14" font="5">FString::FromInt(Quantity)	+	FString(&#34;	&#34;)	+	Name,	5.f,	FColor::White,	</text>
<text top="632" left="54" width="186" height="14" font="5">FColor::Black	)	);</text>
<text top="673" left="54" width="124" height="14" font="5">		Destroy();</text>
<text top="694" left="54" width="10" height="14" font="5">}</text>
<text top="725" left="54" width="776" height="20" font="2">A	couple	of	tips	here	that	are	pretty	important:	first,	we	have	to	access	a	couple	of	<i>globals</i></text>
<text top="751" left="54" width="766" height="20" font="2">to	get	the	objects	we	need.	There	are	three	main	objects	we’ll	be	accessing	through	these</text>
<text top="777" left="54" width="443" height="20" font="2">functions	that	manipulate	the	HUD:	the	controller	(</text>
<text top="781" left="497" width="176" height="14" font="5">APlayerController</text>
<text top="777" left="673" width="97" height="20" font="2">),	the	HUD</text>
<text top="803" left="54" width="7" height="20" font="2">(</text>
<text top="807" left="61" width="62" height="14" font="5">AMyHUD</text>
<text top="803" left="123" width="223" height="20" font="2">),	and	the	player	himself	(</text>
<text top="807" left="346" width="73" height="14" font="5">AAvatar</text>
<text top="803" left="419" width="409" height="20" font="2">).	There	is	only	one	of	each	of	these	three	types</text>
<text top="829" left="54" width="567" height="20" font="2">of	objects	in	the	game	instance.	UE4	has	made	finding	them	easy.</text>
<text top="867" left="54" width="194" height="22" font="8"><b>Getting	the	avatar</b></text>
<text top="905" left="54" width="39" height="20" font="2">The	</text>
<text top="910" left="93" width="62" height="14" font="5">player</text>
<text top="905" left="155" width="650" height="20" font="2">	class	object	can	be	found	at	any	time	from	any	place	in	the	code	by	simply</text>
<text top="931" left="54" width="232" height="20" font="2">calling	the	following	code:</text>
<text top="975" left="54" width="331" height="14" font="5">AAvatar	*avatar	=	Cast&lt;AAvatar&gt;(</text>
<text top="995" left="54" width="549" height="14" font="5">		UGameplayStatics::GetPlayerPawn(	GetWorld(),	0	)	);</text>
<text top="1026" left="54" width="356" height="20" font="2">We	then	pass	him	the	item	by	calling	the	</text>
<text top="1031" left="410" width="176" height="14" font="5">AAvatar::Pickup()</text>
<text top="1026" left="586" width="212" height="20" font="2">	function	defined	earlier.</text>
<text top="1063" left="54" width="109" height="20" font="2">Because	the	</text>
<text top="1068" left="163" width="104" height="14" font="5">PlayerPawn</text>
<text top="1063" left="267" width="164" height="20" font="2">	object	is	really	an	</text>
<text top="1068" left="430" width="73" height="14" font="5">AAvatar</text>
<text top="1063" left="503" width="290" height="20" font="2">	instance,	we	cast	the	result	to	the</text>
<text top="1093" left="54" width="73" height="14" font="5">AAvatar</text>
<text top="1089" left="127" width="142" height="20" font="2">	class,	using	the	</text>
<text top="1093" left="269" width="135" height="14" font="5">Cast&lt;AAvatar&gt;</text>
<text top="1089" left="403" width="140" height="20" font="2">	command.	The	</text>
<text top="1093" left="544" width="166" height="14" font="5">UGameplayStatics</text>
<text top="1089" left="709" width="85" height="20" font="2">	family	of</text>
<text top="1115" left="54" width="649" height="20" font="2">functions	are	accessible	anywhere	in	your	code—they	are	global	functions.</text>
<text top="1153" left="54" width="303" height="22" font="8"><b>Getting	the	player	controller</b></text>
</page>
<page number="386" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="533" height="20" font="2">Retrieving	the	player	controller	is	from	a	<i>superglobal</i>	as	well:</text>
<text top="101" left="54" width="331" height="14" font="5">APlayerController*	PController	=</text>
<text top="121" left="54" width="425" height="14" font="5">		GetWorld()-&gt;GetFirstPlayerController();</text>
<text top="152" left="54" width="39" height="20" font="2">The	</text>
<text top="157" left="93" width="104" height="14" font="5">GetWorld()</text>
<text top="152" left="197" width="300" height="20" font="2">	function	is	actually	defined	in	the	</text>
<text top="157" left="497" width="73" height="14" font="5">UObject</text>
<text top="152" left="569" width="222" height="20" font="2">	base	class.	Since	all	UE4</text>
<text top="178" left="54" width="173" height="20" font="2">objects	derive	from	</text>
<text top="183" left="227" width="73" height="14" font="5">UObject</text>
<text top="178" left="300" width="434" height="20" font="2">,	any	object	in	the	game	actually	has	access	to	the	</text>
<text top="183" left="734" width="52" height="14" font="5">world</text>
<text top="204" left="54" width="58" height="20" font="2">object.</text>
<text top="242" left="54" width="181" height="22" font="8"><b>Getting	the	HUD</b></text>
<text top="281" left="54" width="779" height="20" font="2">Although	this	organization	might	seem	strange	at	first,	the	HUD	is	actually	attached	to	the</text>
<text top="307" left="54" width="493" height="20" font="2">player’s	controller.	You	can	retrieve	the	HUD	as	follows:</text>
<text top="350" left="54" width="539" height="14" font="5">AMyHUD*	hud	=	Cast&lt;AMyHUD&gt;(	PController-&gt;GetHUD()	);</text>
<text top="381" left="54" width="606" height="20" font="2">We	cast	the	HUD	object	since	we	previously	set	the	HUD	to	being	an	</text>
<text top="386" left="660" width="62" height="14" font="5">AMyHUD</text>
<text top="381" left="722" width="98" height="20" font="2">	instance	in</text>
<text top="407" left="54" width="730" height="20" font="2">blueprints.	Since	we	will	be	using	the	HUD	often,	we	can	actually	store	a	permanent</text>
<text top="433" left="54" width="264" height="20" font="2">pointer	to	the	HUD	inside	our	</text>
<text top="438" left="318" width="114" height="14" font="5">APickupItem</text>
<text top="433" left="432" width="327" height="20" font="2">	class.	We	will	discuss	this	point	later.</text>
<text top="470" left="54" width="181" height="20" font="2">Next,	we	implement	</text>
<text top="474" left="235" width="155" height="14" font="5">AAvatar::Pickup</text>
<text top="470" left="390" width="296" height="20" font="2">,	which	adds	an	object	of	the	type	</text>
<text top="474" left="686" width="114" height="14" font="5">APickupItem</text>
<text top="470" left="800" width="22" height="20" font="2">	to</text>
<text top="496" left="54" width="165" height="20" font="2">Avatar’s	backpack:</text>
<text top="539" left="54" width="425" height="14" font="5">void	AAvatar::Pickup(	APickupItem	*item	)</text>
<text top="560" left="54" width="10" height="14" font="5">{</text>
<text top="580" left="54" width="363" height="14" font="5">		if(	Backpack.Find(	item-&gt;Name	)	)</text>
<text top="601" left="54" width="31" height="14" font="5">		{</text>
<text top="621" left="54" width="621" height="14" font="5">				//	the	item	was	already	in	the	pack..	increase	qty	of	it</text>
<text top="642" left="54" width="466" height="14" font="5">				Backpack[	item-&gt;Name	]	+=	item-&gt;Quantity;</text>
<text top="662" left="54" width="31" height="14" font="5">		}</text>
<text top="683" left="54" width="62" height="14" font="5">		else</text>
<text top="703" left="54" width="31" height="14" font="5">		{</text>
<text top="724" left="54" width="580" height="14" font="5">				//	the	item	wasn't	in	the	pack	before,	add	it	in	now</text>
<text top="745" left="54" width="466" height="14" font="5">				Backpack.Add(item-&gt;Name,	item-&gt;Quantity);</text>
<text top="765" left="54" width="611" height="14" font="5">				//	record	ref	to	the	tex	the	first	time	it	is	picked	up</text>
<text top="786" left="54" width="394" height="14" font="5">				Icons.Add(item-&gt;Name,	item-&gt;Icon);</text>
<text top="806" left="54" width="31" height="14" font="5">		}</text>
<text top="827" left="54" width="10" height="14" font="5">}</text>
<text top="858" left="54" width="780" height="20" font="2">In	the	preceding	code,	we	check	whether	the	pickup	item	that	the	player	just	got	is	already</text>
<text top="884" left="54" width="749" height="20" font="2">in	his	pack.	If	it	is,	we	increase	its	quantity.	If	it	is	not	in	his	pack,	we	add	it	to	both	his</text>
<text top="910" left="54" width="114" height="20" font="2">pack	and	the	</text>
<text top="914" left="168" width="52" height="14" font="5">Icons</text>
<text top="910" left="220" width="86" height="20" font="2">	mapping.</text>
<text top="946" left="54" width="581" height="20" font="2">To	add	the	pickup	items	to	the	pack,	use	the	following	line	of	code:</text>
<text top="990" left="54" width="238" height="14" font="5">avatar-&gt;Pickup(	this	);</text>
<text top="1021" left="54" width="39" height="20" font="2">The	</text>
<text top="1025" left="93" width="331" height="14" font="5">APickupItem::Prox_Implementation</text>
<text top="1021" left="424" width="354" height="20" font="2">	is	the	way	this	member	function	will	get</text>
<text top="1047" left="54" width="57" height="20" font="2">called.</text>
<text top="1084" left="54" width="783" height="20" font="2">Now,	we	need	to	display	the	contents	of	our	backpack	in	the	HUD	when	the	player	presses</text>
<text top="1110" left="54" width="13" height="20" font="4"><i>I</i>.</text>
</page>
<page number="387" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="388" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="545" height="39" font="0"><b>Drawing	the	player	inventory</b></text>
<text top="120" left="54" width="782" height="20" font="2">An	inventory	screen	in	a	game	such	as	<i>Diablo</i>	features	a	pop-up	window,	with	the	icons	of</text>
<text top="146" left="54" width="734" height="20" font="2">the	items	you’ve	picked	up	in	the	past	arranged	in	a	grid.	We	can	achieve	this	type	of</text>
<text top="172" left="54" width="148" height="20" font="2">behavior	in	UE4.</text>
<text top="209" left="54" width="728" height="20" font="2">There	are	a	number	of	approaches	to	drawing	a	UI	in	UE4.	The	most	basic	way	is	to</text>
<text top="235" left="54" width="130" height="20" font="2">simply	use	the	</text>
<text top="239" left="184" width="186" height="14" font="5">HUD::DrawTexture()</text>
<text top="235" left="371" width="453" height="20" font="2">	calls.	Another	way	is	to	use	Slate.	Another	way	still</text>
<text top="260" left="54" width="754" height="20" font="2">is	to	use	the	newest	UE4	UI	functionality:	<b>Unreal	Motion	Graphics</b>	(<b>UMG</b>)	Designer.</text>
<text top="297" left="54" width="727" height="20" font="2">Slate	uses	a	declarative	syntax	to	lay	out	UI	elements	in	C++.	Slate	is	best	suited	for</text>
<text top="323" left="54" width="770" height="20" font="2">menus	and	the	like.	UMG	is	new	in	UE	4.5	and	uses	a	heavily	blueprint-based	workflow.</text>
<text top="349" left="54" width="629" height="20" font="2">Since	our	focus	here	is	on	exercises	that	use	C++	code,	we	will	stick	to	a</text>
<text top="379" left="54" width="186" height="14" font="5">HUD::DrawTexture()</text>
<text top="375" left="240" width="557" height="20" font="2">	implementation.	This	means	that	we	will	have	to	manage	all	the</text>
<text top="401" left="54" width="395" height="20" font="2">data	that	deals	with	the	inventory	in	our	code.</text>
</page>
<page number="389" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="424" height="32" font="7"><b>Using	HUD::DrawTexture()</b></text>
<text top="110" left="54" width="773" height="20" font="2">We	will	achieve	this	in	two	steps.	The	first	step	is	to	push	the	contents	of	our	inventory	to</text>
<text top="136" left="54" width="760" height="20" font="2">the	HUD	when	the	user	presses	the	<i>I</i>	key.	The	second	step	is	to	actually	render	the	icons</text>
<text top="162" left="54" width="309" height="20" font="2">into	the	HUD	in	a	grid-like	fashion.</text>
<text top="199" left="54" width="733" height="20" font="2">To	keep	all	the	information	about	how	a	widget	can	be	rendered,	we	declare	a	simple</text>
<text top="225" left="54" width="749" height="20" font="2">structure	to	keep	the	information	concerning	what	icon	it	uses,	its	current	position,	and</text>
<text top="251" left="54" width="105" height="20" font="2">current	size.</text>
<text top="288" left="54" width="138" height="20" font="2">This	is	how	the	</text>
<text top="292" left="192" width="41" height="14" font="5">Icon</text>
<text top="288" left="233" width="42" height="20" font="2">	and	</text>
<text top="292" left="275" width="62" height="14" font="5">Widget</text>
<text top="288" left="337" width="139" height="20" font="2">	structures	look:</text>
<text top="331" left="54" width="114" height="14" font="5">struct	Icon</text>
<text top="351" left="54" width="10" height="14" font="5">{</text>
<text top="372" left="54" width="155" height="14" font="5">		FString	name;</text>
<text top="392" left="54" width="186" height="14" font="5">		UTexture2D*	tex;</text>
<text top="413" left="54" width="445" height="14" font="5">		Icon(){	name	=	&#34;UNKNOWN	ICON&#34;;	tex	=	0;	}</text>
<text top="433" left="54" width="435" height="14" font="5">		Icon(	FString&amp;	iName,	UTexture2D*	iTex	)</text>
<text top="454" left="54" width="31" height="14" font="5">		{</text>
<text top="474" left="54" width="176" height="14" font="5">				name	=	iName;</text>
<text top="495" left="54" width="155" height="14" font="5">				tex	=	iTex;</text>
<text top="515" left="54" width="31" height="14" font="5">		}</text>
<text top="536" left="54" width="21" height="14" font="5">};</text>
<text top="577" left="54" width="135" height="14" font="5">struct	Widget</text>
<text top="598" left="54" width="10" height="14" font="5">{</text>
<text top="618" left="54" width="124" height="14" font="5">		Icon	icon;</text>
<text top="639" left="54" width="228" height="14" font="5">		FVector2D	pos,	size;</text>
<text top="659" left="54" width="207" height="14" font="5">		Widget(Icon	iicon)</text>
<text top="680" left="54" width="31" height="14" font="5">		{</text>
<text top="700" left="54" width="176" height="14" font="5">				icon	=	iicon;</text>
<text top="721" left="54" width="31" height="14" font="5">		}</text>
<text top="741" left="54" width="321" height="14" font="5">		float	left(){	return	pos.X;	}</text>
<text top="762" left="54" width="425" height="14" font="5">		float	right(){	return	pos.X	+	size.X;	}</text>
<text top="782" left="54" width="311" height="14" font="5">		float	top(){	return	pos.Y;	}</text>
<text top="803" left="54" width="435" height="14" font="5">		float	bottom(){	return	pos.Y	+	size.Y;	}</text>
<text top="823" left="54" width="21" height="14" font="5">};</text>
<text top="855" left="54" width="463" height="20" font="2">You	can	add	these	structure	declarations	to	the	top	of	</text>
<text top="859" left="517" width="73" height="14" font="5">MyHUD.h</text>
<text top="855" left="589" width="224" height="20" font="2">,	or	you	can	add	them	to	a</text>
<text top="881" left="54" width="611" height="20" font="2">separate	file	and	include	that	file	everywhere	those	structures	are	used.</text>
<text top="917" left="54" width="357" height="20" font="2">Notice	the	four	member	functions	on	the	</text>
<text top="922" left="411" width="62" height="14" font="5">Widget</text>
<text top="917" left="473" width="194" height="20" font="2">	structure	to	get	to	the	</text>
<text top="922" left="667" width="62" height="14" font="5">left()</text>
<text top="917" left="729" width="11" height="20" font="2">,	</text>
<text top="922" left="740" width="73" height="14" font="5">right()</text>
<text top="917" left="812" width="5" height="20" font="2">,</text>
<text top="948" left="54" width="52" height="14" font="5">top()</text>
<text top="943" left="106" width="47" height="20" font="2">,	and	</text>
<text top="948" left="153" width="83" height="14" font="5">bottom()</text>
<text top="943" left="236" width="599" height="20" font="2">	functions	of	the	widget.	We	will	use	these	later	to	determine	whether</text>
<text top="969" left="54" width="258" height="20" font="2">a	click	point	is	inside	the	box.</text>
<text top="1006" left="54" width="708" height="20" font="2">Next,	we	declare	the	function	that	will	render	the	widgets	out	on	the	screen	in	the	</text>
<text top="1010" left="762" width="62" height="14" font="5">AMyHUD</text>
<text top="1032" left="54" width="48" height="20" font="2">class:</text>
<text top="1075" left="54" width="269" height="14" font="5">void	AMyHUD::DrawWidgets()</text>
<text top="1096" left="54" width="10" height="14" font="5">{</text>
<text top="1116" left="54" width="435" height="14" font="5">		for(	int	c	=	0;	c	&lt;	widgets.Num();	c++	)</text>
<text top="1137" left="54" width="31" height="14" font="5">		{</text>
<text top="1157" left="54" width="777" height="14" font="5">				DrawTexture(	widgets[c].icon.tex,	widgets[c].pos.X,		widgets[c].pos.Y,	</text>
<text top="1178" left="54" width="539" height="14" font="5">widgets[c].size.X,	widgets[c].size.Y,	0,	0,		1,	1	);</text>
</page>
<page number="390" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="611" height="14" font="5">				DrawText(	widgets[c].icon.name,	FLinearColor::Yellow,		</text>
<text top="78" left="54" width="601" height="14" font="5">widgets[c].pos.X,	widgets[c].pos.Y,	hudFont,	.6f,	false	);</text>
<text top="99" left="54" width="31" height="14" font="5">		}</text>
<text top="119" left="54" width="10" height="14" font="5">}</text>
<text top="150" left="54" width="110" height="20" font="2">A	call	to	the	</text>
<text top="155" left="164" width="135" height="14" font="5">DrawWidgets()</text>
<text top="150" left="299" width="282" height="20" font="2">	function	should	be	added	to	the	</text>
<text top="155" left="581" width="93" height="14" font="5">DrawHUD()</text>
<text top="150" left="675" width="83" height="20" font="2">	function:</text>
<text top="194" left="54" width="228" height="14" font="5">void	AMyHUD::DrawHUD()</text>
<text top="214" left="54" width="10" height="14" font="5">{</text>
<text top="235" left="54" width="197" height="14" font="5">		Super::DrawHUD();</text>
<text top="255" left="54" width="518" height="14" font="5">		//	dims	only	exist	here	in	stock	variable	Canvas</text>
<text top="276" left="54" width="394" height="14" font="5">		//	Update	them	so	use	in	addWidget()</text>
<text top="296" left="54" width="259" height="14" font="5">		dims.X	=	Canvas-&gt;SizeX;</text>
<text top="317" left="54" width="259" height="14" font="5">		dims.Y	=	Canvas-&gt;SizeY;</text>
<text top="337" left="54" width="176" height="14" font="5">		DrawMessages();</text>
<text top="358" left="54" width="166" height="14" font="5">		DrawWidgets();</text>
<text top="378" left="54" width="10" height="14" font="5">}</text>
<text top="410" left="54" width="185" height="20" font="2">Next,	we	will	fill	the	</text>
<text top="414" left="239" width="176" height="14" font="5">ToggleInventory()</text>
<text top="410" left="415" width="420" height="20" font="2">	function.	This	is	the	function	that	runs	when	the</text>
<text top="435" left="54" width="122" height="20" font="2">user	presses	<i>I</i>:</text>
<text top="479" left="54" width="321" height="14" font="5">void	AAvatar::ToggleInventory()</text>
<text top="499" left="54" width="10" height="14" font="5">{</text>
<text top="520" left="54" width="300" height="14" font="5">		//	Get	the	controller	&amp;	hud</text>
<text top="540" left="54" width="777" height="14" font="5">		APlayerController*	PController	=	GetWorld()-	&gt;GetFirstPlayerController();</text>
<text top="561" left="54" width="559" height="14" font="5">		AMyHUD*	hud	=	Cast&lt;AMyHUD&gt;(	PController-&gt;GetHUD()	);</text>
<text top="602" left="54" width="466" height="14" font="5">		//	If	inventory	is	displayed,	undisplay	it.</text>
<text top="622" left="54" width="249" height="14" font="5">		if(	inventoryShowing	)</text>
<text top="643" left="54" width="31" height="14" font="5">		{</text>
<text top="663" left="54" width="249" height="14" font="5">				hud-&gt;clearWidgets();</text>
<text top="684" left="54" width="300" height="14" font="5">				inventoryShowing	=	false;</text>
<text top="705" left="54" width="435" height="14" font="5">				PController-&gt;bShowMouseCursor	=	false;</text>
<text top="725" left="54" width="114" height="14" font="5">				return;</text>
<text top="746" left="54" width="31" height="14" font="5">		}</text>
<text top="787" left="54" width="476" height="14" font="5">		//	Otherwise,	display	the	player's	inventory</text>
<text top="807" left="54" width="269" height="14" font="5">		inventoryShowing	=	true;</text>
<text top="828" left="54" width="404" height="14" font="5">		PController-&gt;bShowMouseCursor	=	true;</text>
<text top="848" left="54" width="756" height="14" font="5">		for(	TMap&lt;FString,int&gt;::TIterator	it	=		Backpack.CreateIterator();	it;	</text>
<text top="869" left="54" width="62" height="14" font="5">++it	)</text>
<text top="889" left="54" width="31" height="14" font="5">		{</text>
<text top="910" left="54" width="611" height="14" font="5">				//	Combine	string	name	of	the	item,	with	qty	eg	Cow	x	5</text>
<text top="930" left="54" width="746" height="14" font="5">				FString	fs	=	it-&gt;Key	+	FString::Printf(	TEXT(&#34;	x	%d&#34;),	it-	&gt;Value	);</text>
<text top="951" left="54" width="207" height="14" font="5">				UTexture2D*	tex;</text>
<text top="971" left="54" width="321" height="14" font="5">				if(	Icons.Find(	it-&gt;Key	)	)</text>
<text top="992" left="54" width="280" height="14" font="5">						tex	=	Icons[it-&gt;Key];</text>
<text top="1012" left="54" width="497" height="14" font="5">				hud-&gt;addWidget(	Widget(	Icon(	fs,	tex	)	)	);</text>
<text top="1033" left="54" width="31" height="14" font="5">		}</text>
<text top="1053" left="54" width="10" height="14" font="5">}</text>
<text top="1085" left="54" width="556" height="20" font="2">For	the	preceding	code	to	compile,	we	need	to	add	a	function	to	</text>
<text top="1089" left="610" width="62" height="14" font="5">AMyHUD</text>
<text top="1085" left="672" width="6" height="20" font="2">:</text>
<text top="1128" left="54" width="404" height="14" font="5">void	AMyHUD::addWidget(	Widget	widget	)</text>
<text top="1149" left="54" width="10" height="14" font="5">{</text>
<text top="1169" left="54" width="518" height="14" font="5">		//	find	the	pos	of	the	widget	based	on	the	grid.</text>
<text top="1190" left="54" width="218" height="14" font="5">		//	draw	the	icons..</text>
</page>
<page number="391" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="466" height="14" font="5">		FVector2D	start(	200,	200	),	pad(	12,	12	);</text>
<text top="78" left="54" width="394" height="14" font="5">		widget.size	=	FVector2D(	100,	100	);</text>
<text top="99" left="54" width="218" height="14" font="5">		widget.pos	=	start;</text>
<text top="119" left="54" width="311" height="14" font="5">		//	compute	the	position	here</text>
<text top="140" left="54" width="435" height="14" font="5">		for(	int	c	=	0;	c	&lt;	widgets.Num();	c++	)</text>
<text top="160" left="54" width="31" height="14" font="5">		{</text>
<text top="181" left="54" width="456" height="14" font="5">				//	Move	the	position	to	the	right	a	bit.</text>
<text top="201" left="54" width="435" height="14" font="5">				widget.pos.X	+=	widget.size.X	+	pad.X;</text>
<text top="222" left="54" width="508" height="14" font="5">				//	If	there	is	no	more	room	to	the	right	then</text>
<text top="242" left="54" width="290" height="14" font="5">				//	jump	to	the	next	line</text>
<text top="263" left="54" width="487" height="14" font="5">				if(	widget.pos.X	+	widget.size.X	&gt;	dims.X	)</text>
<text top="283" left="54" width="52" height="14" font="5">				{</text>
<text top="304" left="54" width="300" height="14" font="5">						widget.pos.X	=	start.X;</text>
<text top="324" left="54" width="456" height="14" font="5">						widget.pos.Y	+=	widget.size.Y	+	pad.Y;</text>
<text top="345" left="54" width="52" height="14" font="5">				}</text>
<text top="365" left="54" width="31" height="14" font="5">		}</text>
<text top="386" left="54" width="249" height="14" font="5">		widgets.Add(	widget	);</text>
<text top="406" left="54" width="10" height="14" font="5">}</text>
<text top="438" left="54" width="164" height="20" font="2">We	keep	using	the	</text>
<text top="442" left="218" width="73" height="14" font="5">Boolean</text>
<text top="438" left="290" width="102" height="20" font="2">	variable	in	</text>
<text top="442" left="393" width="166" height="14" font="5">inventoryShowing</text>
<text top="438" left="558" width="275" height="20" font="2">	to	tell	us	whether	the	inventory</text>
<text top="464" left="54" width="751" height="20" font="2">is	currently	displayed	or	not.	When	the	inventory	is	shown,	we	also	show	the	mouse	so</text>
<text top="490" left="54" width="738" height="20" font="2">that	the	user	knows	what	he’s	clicking	on.	Also,	when	the	inventory	is	displayed,	free</text>
<text top="515" left="54" width="752" height="20" font="2">motion	of	the	player	is	disabled.	The	easiest	way	to	disable	a	player’s	free	motion	is	by</text>
<text top="541" left="54" width="744" height="20" font="2">simply	returning	from	the	movement	functions	before	actually	moving.	The	following</text>
<text top="567" left="54" width="171" height="20" font="2">code	is	an	example:</text>
<text top="611" left="54" width="342" height="14" font="5">void	AAvatar::Yaw(	float	amount	)</text>
<text top="631" left="54" width="10" height="14" font="5">{</text>
<text top="652" left="54" width="249" height="14" font="5">		if(	inventoryShowing	)</text>
<text top="672" left="54" width="31" height="14" font="5">		{</text>
<text top="693" left="54" width="456" height="14" font="5">				return;	//	when	my	inventory	is	showing,</text>
<text top="713" left="54" width="249" height="14" font="5">				//	player	can't	move</text>
<text top="734" left="54" width="31" height="14" font="5">		}</text>
<text top="754" left="54" width="735" height="14" font="5">		AddControllerYawInput(200.f*amount	*	GetWorld()-	&gt;GetDeltaSeconds());</text>
<text top="775" left="54" width="10" height="14" font="5">}</text>
<text top="807" left="54" width="89" height="22" font="8"><b>Exercise</b></text>
<text top="846" left="54" width="451" height="20" font="2">Check	out	each	of	the	movement	functions	with	the	</text>
<text top="850" left="505" width="331" height="14" font="5">if(	inventoryShowing	)	{	return;</text>
<text top="876" left="54" width="10" height="14" font="5">}</text>
<text top="872" left="64" width="171" height="20" font="2">	short	circuit	return.</text>
</page>
<page number="392" position="absolute" top="0" left="0" height="1262" width="892">
<image top="531" left="54" width="324" height="244" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-392_1.jpg"/>
<text top="61" left="54" width="470" height="32" font="7"><b>Detecting	inventory	item	clicks</b></text>
<text top="110" left="54" width="730" height="20" font="2">We	can	detect	whether	someone	is	clicking	on	one	of	our	inventory	items	by	doing	a</text>
<text top="136" left="54" width="763" height="20" font="2">simple	hit	point-in-box	hit.	A	point-in-box	test	is	done	by	checking	the	point	of	the	click</text>
<text top="162" left="54" width="269" height="20" font="2">against	the	contents	of	the	box.</text>
<text top="199" left="54" width="339" height="20" font="2">Add	the	following	member	function	to	</text>
<text top="203" left="393" width="135" height="14" font="5">struct	Widget</text>
<text top="199" left="528" width="6" height="20" font="2">:</text>
<text top="242" left="54" width="135" height="14" font="5">struct	Widget</text>
<text top="263" left="54" width="10" height="14" font="5">{</text>
<text top="283" left="54" width="414" height="14" font="5">		//	..	rest	of	struct	same	as	before	..</text>
<text top="304" left="54" width="259" height="14" font="5">		bool	hit(	FVector2D	p	)</text>
<text top="324" left="54" width="31" height="14" font="5">		{</text>
<text top="345" left="54" width="207" height="14" font="5">				//	+---+	top	(0)</text>
<text top="365" left="54" width="124" height="14" font="5">				//	|			|</text>
<text top="386" left="54" width="394" height="14" font="5">				//	+---+	bottom	(2)	(bottom	&gt;	top)</text>
<text top="406" left="54" width="124" height="14" font="5">				//	L			R</text>
<text top="427" left="54" width="777" height="14" font="5">				return	p.X	&gt;	left()	&amp;&amp;	p.X	&lt;	right()	&amp;&amp;	p.Y	&gt;	top()	&amp;&amp;	p.Y	&lt;		bottom();</text>
<text top="447" left="54" width="31" height="14" font="5">		}</text>
<text top="468" left="54" width="21" height="14" font="5">};</text>
<text top="499" left="54" width="302" height="20" font="2">The	point-in-box	test	is	as	follows:</text>
<text top="845" left="54" width="132" height="20" font="2">So,	it	is	a	hit	if	</text>
<text top="849" left="186" width="31" height="14" font="5">p.X</text>
<text top="845" left="218" width="76" height="20" font="2">	is	all	of:</text>
<text top="882" left="97" width="77" height="20" font="2">Right	of	</text>
<text top="886" left="174" width="218" height="14" font="5">left()	(p.X	&gt;	left())</text>
<text top="908" left="97" width="65" height="20" font="2">Left	of	</text>
<text top="912" left="162" width="238" height="14" font="5">right()	(p.X	&lt;	right())</text>
<text top="934" left="97" width="94" height="20" font="2">Below	the	</text>
<text top="938" left="191" width="197" height="14" font="5">top()	(p.Y	&gt;	top())</text>
<text top="959" left="97" width="95" height="20" font="2">Above	the	</text>
<text top="964" left="192" width="259" height="14" font="5">bottom()	(p.Y	&lt;	bottom())</text>
<text top="996" left="54" width="783" height="20" font="2">Remember	that	in	UE4	(and	UI	rendering	in	general)	the	<i>y</i>	axis	is	inverted.	In	other	words,</text>
<text top="1022" left="54" width="329" height="20" font="2">y	goes	down	in	UE4.	This	means	that	</text>
<text top="1026" left="383" width="52" height="14" font="5">top()</text>
<text top="1022" left="435" width="106" height="20" font="2">	is	less	than	</text>
<text top="1026" left="540" width="83" height="14" font="5">bottom()</text>
<text top="1022" left="623" width="183" height="20" font="2">	since	the	origin	(the	</text>
<text top="1026" left="806" width="31" height="14" font="5">(0,</text>
<text top="1052" left="54" width="21" height="14" font="5">0)</text>
<text top="1048" left="75" width="380" height="20" font="2">	point)	is	at	the	top-left	corner	of	the	screen.</text>
<text top="1086" left="54" width="198" height="22" font="8"><b>Dragging	elements</b></text>
<text top="1125" left="54" width="738" height="20" font="2">We	can	drag	elements	easily.	The	first	step	to	enable	dragging	is	to	respond	to	the	left</text>
<text top="1151" left="54" width="782" height="20" font="2">mouse	button	click.	First,	we’ll	write	the	function	to	execute	when	the	left	mouse	button	is</text>
<text top="1177" left="54" width="128" height="20" font="2">clicked.	In	the	</text>
<text top="1181" left="182" width="83" height="14" font="5">Avatar.h</text>
<text top="1177" left="265" width="494" height="20" font="2">	file,	add	the	following	prototype	to	the	class	declaration:</text>
</page>
<page number="393" position="absolute" top="0" left="0" height="1262" width="892">
<image top="419" left="54" width="672" height="346" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-393_1.jpg"/>
<text top="57" left="54" width="207" height="14" font="5">void	MouseClicked();</text>
<text top="89" left="54" width="55" height="20" font="2">In	the	</text>
<text top="93" left="109" width="104" height="14" font="5">Avatar.cpp</text>
<text top="89" left="213" width="610" height="20" font="2">	file,	we	can	attach	a	function	to	execute	on	a	mouse	click	and	pass	the</text>
<text top="115" left="54" width="321" height="20" font="2">click	request	to	the	HUD,	as	follows:</text>
<text top="158" left="54" width="290" height="14" font="5">void	AAvatar::MouseClicked()</text>
<text top="178" left="54" width="10" height="14" font="5">{</text>
<text top="199" left="54" width="777" height="14" font="5">		APlayerController*	PController	=	GetWorld()-	&gt;GetFirstPlayerController();</text>
<text top="220" left="54" width="559" height="14" font="5">		AMyHUD*	hud	=	Cast&lt;AMyHUD&gt;(	PController-&gt;GetHUD()	);</text>
<text top="240" left="54" width="228" height="14" font="5">		hud-&gt;MouseClicked();</text>
<text top="261" left="54" width="10" height="14" font="5">}</text>
<text top="292" left="54" width="72" height="20" font="2">Then	in	</text>
<text top="296" left="126" width="352" height="14" font="5">AAvatar::SetupPlayerInputComponent</text>
<text top="292" left="478" width="292" height="20" font="2">,	we	have	to	attach	our	responder:</text>
<text top="335" left="54" width="684" height="14" font="5">InputComponent-&gt;BindAction(	&#34;MouseClickedLMB&#34;,	IE_Pressed,	this,		</text>
<text top="356" left="54" width="259" height="14" font="5">&amp;AAvatar::MouseClicked	);</text>
<text top="387" left="54" width="533" height="20" font="2">The	following	screenshot	shows	how	you	can	attach	a	render:</text>
<text top="834" left="54" width="188" height="20" font="2">Add	a	member	to	the	</text>
<text top="838" left="242" width="62" height="14" font="5">AMyHUD</text>
<text top="834" left="304" width="53" height="20" font="2">	class:</text>
<text top="877" left="54" width="642" height="14" font="5">Widget*	heldWidget;		//	hold	the	last	touched	Widget	in	memory</text>
<text top="909" left="54" width="75" height="20" font="2">Next,	in	</text>
<text top="913" left="129" width="228" height="14" font="5">AMyHUD::MouseClicked()</text>
<text top="909" left="357" width="234" height="20" font="2">,	we	start	searching	for	the	</text>
<text top="913" left="591" width="62" height="14" font="5">Widget</text>
<text top="909" left="653" width="34" height="20" font="2">	hit:</text>
<text top="952" left="54" width="280" height="14" font="5">void	AMyHUD::MouseClicked()</text>
<text top="972" left="54" width="10" height="14" font="5">{</text>
<text top="993" left="54" width="186" height="14" font="5">		FVector2D	mouse;</text>
<text top="1013" left="54" width="539" height="14" font="5">		PController-&gt;GetMousePosition(	mouse.X,	mouse.Y	);</text>
<text top="1034" left="54" width="580" height="14" font="5">		heldWidget	=	NULL;	//	clear	handle	on	last	held	widget</text>
<text top="1055" left="54" width="559" height="14" font="5">		//	go	and	see	if	mouse	xy	click	pos	hits	any	widgets</text>
<text top="1075" left="54" width="435" height="14" font="5">		for(	int	c	=	0;	c	&lt;	widgets.Num();	c++	)</text>
<text top="1096" left="54" width="31" height="14" font="5">		{</text>
<text top="1116" left="54" width="342" height="14" font="5">				if(	widgets[c].hit(	mouse	)	)</text>
<text top="1137" left="54" width="52" height="14" font="5">				{</text>
<text top="1157" left="54" width="466" height="14" font="5">						heldWidget	=	&amp;widgets[c];//	save	widget</text>
<text top="1178" left="54" width="487" height="14" font="5">						return;																		//	stop	checking</text>
</page>
<page number="394" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="52" height="14" font="5">				}</text>
<text top="78" left="54" width="31" height="14" font="5">		}</text>
<text top="99" left="54" width="10" height="14" font="5">}</text>
<text top="130" left="54" width="55" height="20" font="2">In	the	</text>
<text top="134" left="109" width="207" height="14" font="5">AMyHUD::MouseClicked</text>
<text top="130" left="316" width="489" height="20" font="2">	function,	we	loop	through	all	the	widgets	that	are	on	the</text>
<text top="156" left="54" width="773" height="20" font="2">screen	and	check	for	a	hit	with	the	current	mouse	position.	You	can	get	the	current	mouse</text>
<text top="182" left="54" width="534" height="20" font="2">position	from	the	controller	at	any	time	by	simply	looking	up	</text>
<text top="186" left="588" width="124" height="14" font="5">PController-</text>
<text top="212" left="54" width="197" height="14" font="5">&gt;GetMousePosition()</text>
<text top="208" left="251" width="5" height="20" font="2">.</text>
<text top="244" left="54" width="768" height="20" font="2">Each	widget	is	checked	against	the	current	mouse	position,	and	the	widget	that	got	hit	by</text>
<text top="270" left="54" width="776" height="20" font="2">the	mouse	click	will	be	moved	once	a	mouse	is	dragged.	Once	we	have	determined	which</text>
<text top="296" left="54" width="443" height="20" font="2">widget	got	hit,	we	can	stop	checking,	so	we	have	a	</text>
<text top="301" left="497" width="62" height="14" font="5">return</text>
<text top="296" left="559" width="131" height="20" font="2">	value	from	the</text>
<text top="326" left="54" width="145" height="14" font="5">MouseClicked()</text>
<text top="322" left="199" width="83" height="20" font="2">	function.</text>
<text top="359" left="54" width="748" height="20" font="2">Hitting	widget	is	not	enough,	though.	We	need	to	drag	the	widget	that	got	hit	when	the</text>
<text top="385" left="54" width="418" height="20" font="2">mouse	moves.	For	this,	we	need	to	implement	a	</text>
<text top="389" left="472" width="124" height="14" font="5">MouseMoved()</text>
<text top="385" left="596" width="105" height="20" font="2">	function	in	</text>
<text top="389" left="701" width="62" height="14" font="5">AMyHUD</text>
<text top="385" left="763" width="6" height="20" font="2">:</text>
<text top="428" left="54" width="259" height="14" font="5">void	AMyHUD::MouseMoved()</text>
<text top="449" left="54" width="10" height="14" font="5">{</text>
<text top="469" left="54" width="300" height="14" font="5">		static	FVector2D	lastMouse;</text>
<text top="490" left="54" width="311" height="14" font="5">		FVector2D	thisMouse,	dMouse;</text>
<text top="510" left="54" width="621" height="14" font="5">		PController-&gt;GetMousePosition(	thisMouse.X,	thisMouse.Y	);</text>
<text top="531" left="54" width="342" height="14" font="5">		dMouse	=	thisMouse	-	lastMouse;</text>
<text top="551" left="54" width="508" height="14" font="5">		//	See	if	the	left	mouse	has	been	held	down	for</text>
<text top="572" left="54" width="528" height="14" font="5">		//	more	than	0	seconds.	if	it	has	been	held	down,</text>
<text top="592" left="54" width="331" height="14" font="5">		//	then	the	drag	can	commence.</text>
<text top="613" left="54" width="777" height="14" font="5">		float	time	=	PController-&gt;GetInputKeyTimeDown(		EKeys::LeftMouseButton	);</text>
<text top="633" left="54" width="331" height="14" font="5">		if(	time	&gt;	0.f	&amp;&amp;	heldWidget	)</text>
<text top="654" left="54" width="31" height="14" font="5">		{</text>
<text top="674" left="54" width="373" height="14" font="5">				//	the	mouse	is	being	held	down.</text>
<text top="695" left="54" width="435" height="14" font="5">				//	move	the	widget	by	displacement	amt</text>
<text top="715" left="54" width="352" height="14" font="5">				heldWidget-&gt;pos.X	+=	dMouse.X;</text>
<text top="736" left="54" width="497" height="14" font="5">				heldWidget-&gt;pos.Y	+=	dMouse.Y;	//	y	inverted</text>
<text top="756" left="54" width="31" height="14" font="5">		}</text>
<text top="777" left="54" width="249" height="14" font="5">		lastMouse	=	thisMouse;</text>
<text top="797" left="54" width="10" height="14" font="5">}</text>
<text top="829" left="54" width="373" height="20" font="2">Don’t	forget	to	include	a	declaration	in	the	</text>
<text top="833" left="427" width="73" height="14" font="5">MyHUD.h</text>
<text top="829" left="500" width="40" height="20" font="2">	file.</text>
<text top="865" left="54" width="779" height="20" font="2">The	drag	function	looks	at	the	difference	in	the	mouse	position	between	the	last	frame	and</text>
<text top="891" left="54" width="522" height="20" font="2">this	frame	and	moves	the	selected	widget	by	that	amount.	A	</text>
<text top="896" left="576" width="62" height="14" font="5">static</text>
<text top="891" left="638" width="185" height="20" font="2">	variable	(global	with</text>
<text top="917" left="54" width="321" height="20" font="2">local	scope)	is	used	to	remember	the	</text>
<text top="922" left="375" width="93" height="14" font="5">lastMouse</text>
<text top="917" left="468" width="291" height="20" font="2">	position	between	the	calls	for	the</text>
<text top="948" left="54" width="124" height="14" font="5">MouseMoved()</text>
<text top="943" left="178" width="83" height="20" font="2">	function.</text>
<text top="980" left="54" width="453" height="20" font="2">How	can	we	link	the	mouse’s	motion	to	running	the	</text>
<text top="984" left="507" width="124" height="14" font="5">MouseMoved()</text>
<text top="980" left="632" width="105" height="20" font="2">	function	in	</text>
<text top="984" left="736" width="62" height="14" font="5">AMyHUD</text>
<text top="980" left="799" width="29" height="20" font="2">?	If</text>
<text top="1006" left="54" width="588" height="20" font="2">you	remember,	we	have	already	connected	the	mouse	motion	in	the	</text>
<text top="1010" left="642" width="62" height="14" font="5">Avatar</text>
<text top="1006" left="704" width="129" height="20" font="2">	class.	The	two</text>
<text top="1032" left="54" width="246" height="20" font="2">functions	that	we	used	were	</text>
<text top="1036" left="300" width="166" height="14" font="5">AAvatar::Pitch()</text>
<text top="1032" left="466" width="144" height="20" font="2">	(the	y	axis)	and	</text>
<text top="1036" left="611" width="145" height="14" font="5">AAvatar::Yaw()</text>
<text top="1032" left="756" width="55" height="20" font="2">	(the	x</text>
<text top="1058" left="54" width="763" height="20" font="2">axis).	Extending	these	functions	will	enable	you	to	pass	mouse	inputs	to	the	HUD.	I	will</text>
<text top="1084" left="54" width="121" height="20" font="2">show	you	the	</text>
<text top="1088" left="175" width="31" height="14" font="5">Yaw</text>
<text top="1084" left="206" width="383" height="20" font="2">	function	now,	and	you	can	extrapolate	how	</text>
<text top="1088" left="588" width="52" height="14" font="5">Pitch</text>
<text top="1084" left="640" width="191" height="20" font="2">	will	work	from	there:</text>
<text top="1127" left="54" width="342" height="14" font="5">void	AAvatar::Yaw(	float	amount	)</text>
<text top="1147" left="54" width="10" height="14" font="5">{</text>
<text top="1168" left="54" width="104" height="14" font="5">		//x	axis</text>
<text top="1189" left="54" width="249" height="14" font="5">		if(	inventoryShowing	)</text>
</page>
<page number="395" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="31" height="14" font="5">		{</text>
<text top="78" left="54" width="383" height="14" font="5">				//	When	the	inventory	is	showing,</text>
<text top="99" left="54" width="331" height="14" font="5">				//	pass	the	input	to	the	HUD</text>
<text top="119" left="54" width="508" height="14" font="5">				APlayerController*	PController	=	GetWorld()-	</text>
<text top="140" left="54" width="290" height="14" font="5">&gt;GetFirstPlayerController();</text>
<text top="160" left="54" width="580" height="14" font="5">				AMyHUD*	hud	=	Cast&lt;AMyHUD&gt;(	PController-&gt;GetHUD()	);</text>
<text top="181" left="54" width="228" height="14" font="5">				hud-&gt;MouseMoved();</text>
<text top="201" left="54" width="114" height="14" font="5">				return;</text>
<text top="222" left="54" width="31" height="14" font="5">		}</text>
<text top="242" left="54" width="62" height="14" font="5">		else</text>
<text top="263" left="54" width="31" height="14" font="5">		{</text>
<text top="283" left="54" width="756" height="14" font="5">				AddControllerYawInput(200.f*amount	*	GetWorld()-	&gt;GetDeltaSeconds());</text>
<text top="304" left="54" width="31" height="14" font="5">		}</text>
<text top="324" left="54" width="10" height="14" font="5">}</text>
<text top="356" left="54" width="39" height="20" font="2">The	</text>
<text top="360" left="93" width="145" height="14" font="5">AAvatar::Yaw()</text>
<text top="356" left="238" width="593" height="20" font="2">	function	first	checks	whether	the	inventory	is	showing	or	not.	If	it	is</text>
<text top="381" left="54" width="569" height="20" font="2">showing,	inputs	are	routed	straight	to	the	HUD,	without	affecting	</text>
<text top="386" left="623" width="62" height="14" font="5">Avatar</text>
<text top="381" left="685" width="129" height="20" font="2">.	If	the	HUD	is</text>
<text top="407" left="54" width="261" height="20" font="2">not	showing,	inputs	just	go	to	</text>
<text top="412" left="315" width="62" height="14" font="5">Avatar</text>
<text top="407" left="377" width="5" height="20" font="2">.</text>
<text top="446" left="54" width="99" height="22" font="8"><b>Exercises</b></text>
<text top="484" left="69" width="149" height="20" font="2">1.	 Complete	the	</text>
<text top="488" left="218" width="166" height="14" font="5">AAvatar::Pitch()</text>
<text top="484" left="384" width="451" height="20" font="2">	function	(y	axis)	to	route	inputs	to	the	HUD	instead</text>
<text top="510" left="97" width="46" height="20" font="2">of	to	</text>
<text top="514" left="143" width="62" height="14" font="5">Avatar</text>
<text top="510" left="205" width="5" height="20" font="2">.</text>
<text top="536" left="69" width="302" height="20" font="2">2.	 Make	the	NPC	characters	from<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#268">	</a></text>
<text top="536" left="371" width="85" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#268">Chapter	8</a></text>
<text top="536" left="456" width="376" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#268">,</a>	<i>Actors	and	Pawns</i>,	give	the	player	an	item</text>
<text top="562" left="97" width="76" height="20" font="2">(such	as	</text>
<text top="566" left="173" width="93" height="14" font="5">GoldenEgg</text>
<text top="562" left="266" width="227" height="20" font="2">)	when	he	goes	near	them.</text>
</page>
<page number="396" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="397" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="182" height="39" font="0"><b>Summary</b></text>
<text top="120" left="54" width="724" height="20" font="2">In	this	chapter,	we	covered	how	to	set	up	multiple	pickup	items	for	the	player	to	see</text>
<text top="146" left="54" width="749" height="20" font="2">displayed	in	the	level	and	also	pick	up.	In	the	next	chapter,	we	will	introduce	<i>Monsters</i></text>
<text top="172" left="54" width="737" height="20" font="2">and	the	player	will	be	able	to	defend	himself	against	the	monsters	using	magic	spells.</text>
</page>
<page number="398" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="399" position="absolute" top="0" left="0" height="1262" width="892">
<image top="241" left="54" width="540" height="423" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-399_1.jpg"/>
<text top="64" left="54" width="399" height="39" font="0"><b>Chapter	11.	Monsters</b></text>
<text top="120" left="54" width="423" height="20" font="2">We’ll	add	in	a	bunch	of	opponents	for	the	player.</text>
<text top="157" left="54" width="767" height="20" font="2">What	I’ve	done	in	this	chapter	is	added	a	landscape	to	the	example.	The	player	will	walk</text>
<text top="183" left="54" width="765" height="20" font="2">along	the	path	sculpted	out	for	him	and	then	he	will	encounter	an	army.	There	is	an	NPC</text>
<text top="209" left="54" width="423" height="20" font="2">before	he	reaches	the	army	that	will	offer	advice.</text>
<text top="701" left="279" width="335" height="20" font="4"><i>The	scene:	starting	to	look	like	a	game</i></text>
</page>
<page number="400" position="absolute" top="0" left="0" height="1262" width="892">
<image top="293" left="54" width="295" height="486" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-400_1.jpg"/>
<text top="64" left="54" width="199" height="39" font="0"><b>Landscape</b></text>
<text top="120" left="54" width="756" height="20" font="2">We	haven’t	covered	how	to	sculpt	the	landscape	in	this	book	yet,	but	we’ll	do	that	here.</text>
<text top="146" left="54" width="735" height="20" font="2">First,	you	must	have	a	landscape	to	work	with.	Start	a	new	file	by	navigating	to	<b>File</b>	|</text>
<text top="172" left="54" width="778" height="19" font="3"><b>New</b>.	You	can	choose	an	empty	level	or	a	level	with	a	sky.	I	chose	the	one	without	the	sky</text>
<text top="198" left="54" width="137" height="20" font="2">in	this	example.</text>
<text top="235" left="54" width="774" height="20" font="2">To	create	a	landscape,	we	have	to	work	from	the	<b>Modes</b>	panel.	Make	sure	that	the	<b>Modes</b></text>
<text top="260" left="54" width="466" height="20" font="2">panel	is	displayed	by	navigating	to	<b>Window</b>	|	<b>Modes</b>:</text>
<text top="816" left="326" width="240" height="20" font="4"><i>Displaying	the	modes	panel</i></text>
<text top="885" left="54" width="755" height="20" font="2">A	landscape	can	be	created	in	three	steps,	which	are	shown	in	the	following	screenshot,</text>
<text top="911" left="54" width="319" height="20" font="2">followed	by	the	corresponding	steps:</text>
</page>
<page number="401" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="472" height="631" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-401_1.jpg"/>
<image top="921" left="54" width="540" height="226" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-401_2.jpg"/>
<text top="753" left="69" width="707" height="20" font="2">1.	 Click	on	the	landscape	icon	(the	picture	of	the	mountains)	in	the	<b>Modes</b>	panel.</text>
<text top="779" left="69" width="279" height="20" font="2">2.	 Click	on	the	<b>Manage</b>	button.</text>
<text top="805" left="69" width="695" height="20" font="2">3.	 Next,	click	on	the	<b>Create</b>	button	in	the	lower	right-hand	corner	of	the	screen.</text>
<text top="863" left="54" width="759" height="20" font="2">You	should	now	have	a	landscape	to	work	with.	It	will	appear	as	a	gray,	tiled	area	in	the</text>
<text top="889" left="54" width="124" height="20" font="2">main	window:</text>
</page>
<page number="402" position="absolute" top="0" left="0" height="1262" width="892">
<image top="167" left="54" width="588" height="605" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-402_1.jpg"/>
<text top="57" left="54" width="731" height="20" font="2">The	first	thing	you	will	want	to	do	with	your	landscape	scene	is	add	some	color	to	it.</text>
<text top="83" left="54" width="751" height="20" font="2">What’s	a	landscape	without	colors?	Right-click	anywhere	on	your	gray,	tiled	landscape</text>
<text top="109" left="54" width="770" height="20" font="2">object.	In	the	<b>Details</b>	panel	at	the	right,	you	will	see	that	it	is	populated	with	information,</text>
<text top="135" left="54" width="326" height="20" font="2">as	shown	in	the	following	screenshot:</text>
<text top="842" left="54" width="688" height="20" font="2">Scroll	down	until	you	see	the	<b>Landscape	Material</b>	property.	You	can	select	the</text>
<text top="868" left="54" width="509" height="19" font="3"><b>M_Ground_Grass</b>	material	for	a	realistic-looking	ground.</text>
<text top="904" left="54" width="778" height="20" font="2">Next,	add	a	light	to	the	scene.	You	should	probably	use	a	directional	light	so	that	all	of	the</text>
<text top="930" left="54" width="241" height="20" font="2">ground	has	some	light	on	it.</text>
</page>
<page number="403" position="absolute" top="0" left="0" height="1262" width="892">
<image top="169" left="54" width="469" height="462" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-403_1.jpg"/>
<text top="61" left="54" width="360" height="32" font="7"><b>Sculpting	the	landscape</b></text>
<text top="110" left="54" width="772" height="20" font="2">A	flat	landscape	can	be	boring.	We	will	at	least	add	some	curves	and	hills	to	the	place.	To</text>
<text top="136" left="54" width="461" height="20" font="2">do	so,	click	on	the	<b>Sculpt</b>	button	in	the	<b>Modes</b>	panel:</text>
<text top="668" left="225" width="443" height="20" font="4"><i>To	change	the	landscape,	click	on	the	Sculpt	button</i></text>
<text top="737" left="54" width="770" height="20" font="2">The	strength	and	size	of	your	brush	are	determined	by	the	<b>Brush	Size</b>	and	<b>Tool	Strength</b></text>
<text top="763" left="54" width="294" height="20" font="2">parameters	in	the	<b>Modes</b>	window.</text>
<text top="800" left="54" width="773" height="20" font="2">Click	on	your	landscape	and	drag	the	mouse	to	change	the	height	of	the	turf.	Once	you’re</text>
<text top="825" left="54" width="782" height="20" font="2">happy	with	what	you’ve	got,	click	on	the	<b>Play</b>	button	to	try	it	out.	The	resultant	output	can</text>
<text top="851" left="54" width="310" height="20" font="2">be	seen	in	the	following	screenshot:</text>
</page>
<page number="404" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="540" height="434" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-404_1.jpg"/>
<image top="641" left="54" width="785" height="266" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-404_2.jpg"/>
<text top="556" left="54" width="764" height="20" font="2">Play	around	with	your	landscape	and	create	a	scene.	What	I	did	was	lower	the	landscape</text>
<text top="582" left="54" width="775" height="20" font="2">around	a	flat	ground	plane,	so	the	player	has	a	well-defined	flat	area	to	walk	on,	as	shown</text>
<text top="608" left="54" width="240" height="20" font="2">in	the	following	screenshot:</text>
<text top="976" left="54" width="784" height="20" font="2">Feel	free	to	do	whatever	you	like	with	your	landscape.	You	can	use	what	I’m	doing	here	as</text>
<text top="1002" left="54" width="767" height="20" font="2">inspiration,	if	you	like.	I	will	recommend	that	you	import	assets	from	<b>ContentExamples</b></text>
<text top="1027" left="54" width="738" height="20" font="2">or	from	<b>StrategyGame</b>	in	order	to	use	them	inside	your	game.	To	do	this,	refer	to	the</text>
<text top="1053" left="54" width="237" height="20" font="4"><i>Importing	assets</i>	section	in<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#367">	</a></text>
<text top="1053" left="291" width="95" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#367">Chapter	10</a></text>
<text top="1053" left="387" width="438" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#367">,</a>	<i>Inventory	System	and	Pickup	Items</i>.	When	you’re</text>
<text top="1079" left="54" width="635" height="20" font="2">done	importing	assets,	we	can	proceed	to	bring	monsters	into	your	world.</text>
</page>
<page number="405" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="406" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="173" height="39" font="0"><b>Monsters</b></text>
<text top="120" left="54" width="680" height="20" font="2">We’ll	start	programming	monsters	in	the	same	way	we	programmed	NPCs	and</text>
<text top="150" left="54" width="104" height="14" font="5">PickupItem</text>
<text top="146" left="158" width="650" height="20" font="2">.	First,	we’ll	write	a	base	class	(by	deriving	from	character)	to	represent	the</text>
<text top="176" left="54" width="73" height="14" font="5">Monster</text>
<text top="172" left="127" width="661" height="20" font="2">	class.	Then,	we’ll	derive	a	bunch	of	blueprints	for	each	monster	type.	Every</text>
<text top="198" left="54" width="780" height="20" font="2">monster	will	have	a	couple	of	properties	in	common	that	determine	its	behavior.	These	are</text>
<text top="224" left="54" width="205" height="20" font="2">the	common	properties:</text>
<text top="260" left="97" width="20" height="20" font="2">A	</text>
<text top="265" left="117" width="52" height="14" font="5">float</text>
<text top="260" left="169" width="165" height="20" font="2">	variable	for	speed.</text>
<text top="286" left="97" width="20" height="20" font="2">A	</text>
<text top="291" left="117" width="52" height="14" font="5">float</text>
<text top="286" left="169" width="143" height="20" font="2">	variable	for	the	</text>
<text top="291" left="311" width="93" height="14" font="5">HitPoints</text>
<text top="286" left="405" width="384" height="20" font="2">	value	(I	usually	use	floats	for	HP,	so	we	can</text>
<text top="312" left="97" width="635" height="20" font="2">easily	model	HP	leeching	effects	such	as	walking	through	a	pool	of	lava).</text>
<text top="338" left="97" width="32" height="20" font="2">An	</text>
<text top="343" left="129" width="52" height="14" font="5">int32</text>
<text top="338" left="181" width="518" height="20" font="2">	variable	for	the	experience	gained	in	defeating	the	monster.</text>
<text top="364" left="97" width="20" height="20" font="2">A	</text>
<text top="369" left="117" width="62" height="14" font="5">UClass</text>
<text top="364" left="179" width="393" height="20" font="2">	function	for	the	loot	dropped	by	the	monster.</text>
<text top="390" left="97" width="20" height="20" font="2">A	</text>
<text top="395" left="117" width="52" height="14" font="5">float</text>
<text top="390" left="169" width="111" height="20" font="2">	variable	for	</text>
<text top="395" left="280" width="166" height="14" font="5">BaseAttackDamage</text>
<text top="390" left="445" width="182" height="20" font="2">	done	on	each	attack.</text>
<text top="416" left="97" width="20" height="20" font="2">A	</text>
<text top="420" left="117" width="52" height="14" font="5">float</text>
<text top="416" left="169" width="111" height="20" font="2">	variable	for	</text>
<text top="420" left="280" width="135" height="14" font="5">AttackTimeout</text>
<text top="416" left="414" width="373" height="20" font="2">,	which	is	the	amount	of	time	for	which	the</text>
<text top="442" left="97" width="282" height="20" font="2">monster	rests	between	attacking.</text>
<text top="468" left="97" width="43" height="20" font="2">Two	</text>
<text top="472" left="141" width="176" height="14" font="5">USphereComponents</text>
<text top="468" left="317" width="203" height="20" font="2">	object:	One	of	them	is	</text>
<text top="472" left="519" width="114" height="14" font="5">SightSphere</text>
<text top="468" left="633" width="188" height="20" font="2">—how	far	he	can	see.</text>
<text top="494" left="97" width="108" height="20" font="2">The	other	is	</text>
<text top="498" left="206" width="176" height="14" font="5">AttackRangeSphere</text>
<text top="494" left="382" width="357" height="20" font="2">,	which	is	how	far	his	attack	reaches.	The</text>
<text top="524" left="97" width="176" height="14" font="5">AttackRangeSphere</text>
<text top="520" left="273" width="260" height="20" font="2">	object	is	always	smaller	than	</text>
<text top="524" left="533" width="114" height="14" font="5">SightSphere</text>
<text top="520" left="647" width="5" height="20" font="2">.</text>
<text top="556" left="54" width="143" height="20" font="2">Derive	from	the	</text>
<text top="561" left="197" width="93" height="14" font="5">Character</text>
<text top="556" left="290" width="255" height="20" font="2">	class	to	create	your	class	for	</text>
<text top="561" left="545" width="73" height="14" font="5">Monster</text>
<text top="556" left="618" width="212" height="20" font="2">.	You	can	do	this	in	UE4</text>
<text top="582" left="54" width="770" height="20" font="2">by	going	to	<b>File</b>	|	<b>Add	Code	To	Project…</b>	and	then	selecting	the	<b>Character</b>	option	from</text>
<text top="608" left="54" width="252" height="20" font="2">the	menu	for	your	base	class.</text>
<text top="645" left="54" width="100" height="20" font="2">Fill	out	the	</text>
<text top="649" left="154" width="73" height="14" font="5">Monster</text>
<text top="645" left="227" width="503" height="20" font="2">	class	with	the	base	properties.	Make	sure	that	you	declare</text>
<text top="675" left="54" width="756" height="14" font="5">UPROPERTY(EditAnywhere,	BlueprintReadWrite,	Category	=	MonsterProperties)</text>
<text top="671" left="810" width="25" height="20" font="2">	so</text>
<text top="697" left="54" width="584" height="20" font="2">that	the	properties	of	the	monsters	can	be	changed	in	the	blueprints:</text>
<text top="740" left="54" width="83" height="14" font="5">UCLASS()</text>
<text top="761" left="54" width="497" height="14" font="5">class	GOLDENEGG_API	AMonster	:	public	ACharacter</text>
<text top="781" left="54" width="10" height="14" font="5">{</text>
<text top="802" left="54" width="259" height="14" font="5">		GENERATED_UCLASS_BODY()</text>
<text top="843" left="54" width="197" height="14" font="5">		//	How	fast	he	is</text>
<text top="863" left="54" width="601" height="14" font="5">		UPROPERTY(EditAnywhere,	BlueprintReadWrite,	Category	=		</text>
<text top="884" left="54" width="186" height="14" font="5">MonsterProperties)</text>
<text top="904" left="54" width="145" height="14" font="5">		float	Speed;</text>
<text top="945" left="54" width="352" height="14" font="5">		//	The	hitpoints	the	monster	has</text>
<text top="966" left="54" width="601" height="14" font="5">		UPROPERTY(EditAnywhere,	BlueprintReadWrite,	Category	=		</text>
<text top="986" left="54" width="186" height="14" font="5">MonsterProperties)</text>
<text top="1007" left="54" width="186" height="14" font="5">		float	HitPoints;</text>
<text top="1048" left="54" width="373" height="14" font="5">		//	Experience	gained	for	defeating</text>
<text top="1069" left="54" width="601" height="14" font="5">		UPROPERTY(EditAnywhere,	BlueprintReadWrite,	Category	=		</text>
<text top="1089" left="54" width="186" height="14" font="5">MonsterProperties)</text>
<text top="1110" left="54" width="197" height="14" font="5">		int32	Experience;</text>
<text top="1151" left="54" width="590" height="14" font="5">		//	Blueprint	of	the	type	of	item	dropped	by	the	monster</text>
<text top="1171" left="54" width="601" height="14" font="5">		UPROPERTY(EditAnywhere,	BlueprintReadWrite,	Category	=		</text>
<text top="1192" left="54" width="186" height="14" font="5">MonsterProperties)</text>
</page>
<page number="407" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="176" height="14" font="5">		UClass*	BPLoot;</text>
<text top="99" left="54" width="373" height="14" font="5">		//	The	amount	of	damage	attacks	do</text>
<text top="119" left="54" width="601" height="14" font="5">		UPROPERTY(EditAnywhere,	BlueprintReadWrite,	Category	=		</text>
<text top="140" left="54" width="186" height="14" font="5">MonsterProperties)</text>
<text top="160" left="54" width="259" height="14" font="5">		float	BaseAttackDamage;</text>
<text top="201" left="54" width="580" height="14" font="5">		//	Amount	of	time	the	monster	needs	to	rest	in	seconds</text>
<text top="222" left="54" width="228" height="14" font="5">		//	between	attacking</text>
<text top="242" left="54" width="601" height="14" font="5">		UPROPERTY(EditAnywhere,	BlueprintReadWrite,	Category	=		</text>
<text top="263" left="54" width="186" height="14" font="5">MonsterProperties)</text>
<text top="283" left="54" width="228" height="14" font="5">		float	AttackTimeout;</text>
<text top="324" left="54" width="632" height="14" font="5">		//	Time	since	monster's	last	strike,	readable	in	blueprints</text>
<text top="345" left="54" width="621" height="14" font="5">		UPROPERTY(VisibleAnywhere,	BlueprintReadOnly,	Category	=		</text>
<text top="365" left="54" width="186" height="14" font="5">MonsterProperties)</text>
<text top="386" left="54" width="290" height="14" font="5">		float	TimeSinceLastStrike;</text>
<text top="427" left="54" width="249" height="14" font="5">		//	Range	for	his	sight</text>
<text top="447" left="54" width="766" height="14" font="5">		UPROPERTY(VisibleDefaultsOnly,	BlueprintReadOnly,	Category	=		Collision)</text>
<text top="468" left="54" width="331" height="14" font="5">		USphereComponent*	SightSphere;</text>
<text top="509" left="54" width="621" height="14" font="5">		//	Range	for	his	attack.	Visualizes	as	a	sphere	in	editor,</text>
<text top="530" left="54" width="766" height="14" font="5">		UPROPERTY(VisibleDefaultsOnly,	BlueprintReadOnly,	Category	=		Collision)</text>
<text top="550" left="54" width="394" height="14" font="5">		USphereComponent*	AttackRangeSphere;</text>
<text top="571" left="54" width="21" height="14" font="5">};</text>
<text top="602" left="54" width="422" height="20" font="2">You	will	need	some	bare	minimum	code	in	your	</text>
<text top="606" left="476" width="73" height="14" font="5">Monster</text>
<text top="602" left="548" width="278" height="20" font="2">	constructor	to	get	the	monster’s</text>
<text top="628" left="54" width="449" height="20" font="2">properties	initialized.	Use	the	following	code	in	the	</text>
<text top="632" left="503" width="114" height="14" font="5">Monster.cpp</text>
<text top="628" left="617" width="40" height="20" font="2">	file:</text>
<text top="671" left="54" width="725" height="14" font="5">AMonster::AMonster(const	class	FObjectInitializer&amp;	PCIP)	:	Super(PCIP)</text>
<text top="692" left="54" width="10" height="14" font="5">{</text>
<text top="712" left="54" width="135" height="14" font="5">		Speed	=	20;</text>
<text top="733" left="54" width="176" height="14" font="5">		HitPoints	=	20;</text>
<text top="753" left="54" width="176" height="14" font="5">		Experience	=	0;</text>
<text top="774" left="54" width="166" height="14" font="5">		BPLoot	=	NULL;</text>
<text top="794" left="54" width="238" height="14" font="5">		BaseAttackDamage	=	1;</text>
<text top="815" left="54" width="238" height="14" font="5">		AttackTimeout	=	1.5f;</text>
<text top="835" left="54" width="269" height="14" font="5">		TimeSinceLastStrike	=	0;</text>
<text top="876" left="54" width="715" height="14" font="5">		SightSphere	=	PCIP.CreateDefaultSubobject&lt;USphereComponent&gt;	(this,	</text>
<text top="897" left="54" width="218" height="14" font="5">TEXT(&#34;SightSphere&#34;));</text>
<text top="917" left="54" width="425" height="14" font="5">		SightSphere-&gt;AttachTo(	RootComponent	);</text>
<text top="958" left="54" width="777" height="14" font="5">		AttackRangeSphere	=	PCIP.CreateDefaultSubobject	&lt;USphereComponent&gt;(this,	</text>
<text top="979" left="54" width="280" height="14" font="5">TEXT(&#34;AttackRangeSphere&#34;));</text>
<text top="999" left="54" width="487" height="14" font="5">		AttackRangeSphere-&gt;AttachTo(	RootComponent	);</text>
<text top="1020" left="54" width="10" height="14" font="5">}</text>
<text top="1051" left="54" width="725" height="20" font="2">Compile	and	run	the	code.	Open	Unreal	Editor	and	derive	a	blueprint	based	on	your</text>
<text top="1082" left="54" width="73" height="14" font="5">Monster</text>
<text top="1077" left="127" width="114" height="20" font="2">	class	(call	it	</text>
<text top="1082" left="240" width="104" height="14" font="5">BP_Monster</text>
<text top="1077" left="344" width="415" height="20" font="2">).	Now	we	can	start	configuring	your	monster’s	</text>
<text top="1082" left="759" width="73" height="14" font="5">Monster</text>
<text top="1103" left="54" width="92" height="20" font="2">properties.</text>
<text top="1140" left="54" width="347" height="20" font="2">For	the	skeletal	mesh,	we	won’t	use	the	</text>
<text top="1144" left="401" width="73" height="14" font="5">HeroTPP</text>
<text top="1140" left="473" width="347" height="20" font="2">	model	for	the	monster	because	we	need</text>
<text top="1166" left="54" width="436" height="20" font="2">the	monster	to	be	able	to	do	melee	attacks	and	the	</text>
<text top="1170" left="490" width="73" height="14" font="5">HeroTPP</text>
<text top="1166" left="562" width="248" height="20" font="2">	model	does	not	come	with	a</text>
</page>
<page number="408" position="absolute" top="0" left="0" height="1262" width="892">
<image top="142" left="54" width="538" height="246" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-408_1.jpg"/>
<image top="552" left="54" width="648" height="146" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-408_2.jpg"/>
<image top="877" left="54" width="713" height="233" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-408_3.jpg"/>
<text top="57" left="54" width="748" height="20" font="2">melee	attack.	However,	some	of	the	models	in	the	<b>Mixamo	Animation	Pack</b>	file	have</text>
<text top="83" left="54" width="759" height="20" font="2">melee	attack	animations.	So	download	the	<b>Mixamo	Animation	Pack</b>	file	from	the	UE4</text>
<text top="109" left="54" width="164" height="20" font="2">marketplace	(free).</text>
<text top="425" left="78" width="738" height="20" font="4"><i>Inside	the	pack	are	some	pretty	gross	models	that	I’d	avoid,	but	others	are	quite	good</i></text>
<text top="494" left="54" width="764" height="20" font="2">Next,	you	should	add	the	<b>Mixamo	Animation	Pack</b>	file	to	your	project,	as	shown	in	the</text>
<text top="520" left="54" width="186" height="20" font="2">following	screenshot:</text>
<text top="767" left="54" width="263" height="20" font="2">Now,	create	a	blueprint	called	</text>
<text top="772" left="317" width="104" height="14" font="5">BP_Monster</text>
<text top="767" left="421" width="132" height="20" font="2">	based	on	your	</text>
<text top="772" left="553" width="73" height="14" font="5">Monster</text>
<text top="767" left="625" width="126" height="20" font="2">	class.	Edit	the</text>
<text top="793" left="54" width="667" height="20" font="2">blueprint’s	class	properties	and	select	<b>Mixamo_Adam</b>	(it	is	actually	typed	as</text>
<text top="819" left="54" width="740" height="19" font="3"><b>Maximo_Adam</b>	in	the	current	issue	of	the	package)	as	the	skeletal	mesh.	Also,	select</text>
<text top="845" left="54" width="459" height="19" font="3"><b>MixamoAnimBP_Adam</b>	as	the	animation	blueprint.</text>
<text top="1147" left="66" width="762" height="20" font="4"><i>Select	the	Maximo_Adam	Skeletal	Mesh	and	MixamoAnimBP_Adam	for	Anim	Blueprint</i></text>
<text top="1173" left="374" width="144" height="20" font="4"><i>Generated	Class</i></text>
</page>
<page number="409" position="absolute" top="0" left="0" height="1262" width="892">
<image top="347" left="54" width="762" height="756" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-409_1.jpg"/>
<text top="85" left="54" width="695" height="20" font="2">We	will	modify	the	animation	blueprint	to	correctly	incorporate	the	melee	attack</text>
<text top="111" left="54" width="134" height="20" font="2">animation	later.</text>
<text top="148" left="54" width="230" height="20" font="2">While	you’re	editing	your	</text>
<text top="153" left="284" width="104" height="14" font="5">BP_Monster</text>
<text top="148" left="388" width="295" height="20" font="2">	blueprint,	change	the	sizes	of	the	</text>
<text top="153" left="683" width="114" height="14" font="5">SightSphere</text>
<text top="148" left="797" width="37" height="20" font="2">	and</text>
<text top="178" left="54" width="176" height="14" font="5">AttackRangeSphere</text>
<text top="174" left="230" width="545" height="20" font="2">	objects	to	values	that	make	sense	to	you.	I	made	my	monster’s</text>
<text top="204" left="54" width="176" height="14" font="5">AttackRangeSphere</text>
<text top="200" left="230" width="585" height="20" font="2">	object	just	big	enough	to	be	about	an	arm’s	reach	(60	units)	and	his</text>
<text top="230" left="54" width="114" height="14" font="5">SightSphere</text>
<text top="226" left="168" width="501" height="20" font="2">	object	to	be	25	times	bigger	than	that	(about	1,500	units).</text>
<text top="263" left="54" width="783" height="20" font="2">Remember	that	the	monster	will	start	moving	towards	the	player	once	the	player	enters	the</text>
<text top="289" left="54" width="90" height="20" font="2">monster’s	</text>
<text top="293" left="144" width="114" height="14" font="5">SightSphere</text>
<text top="289" left="258" width="563" height="20" font="2">,	and	the	monster	will	start	attacking	the	player	once	the	player	is</text>
<text top="315" left="54" width="179" height="20" font="2">inside	the	monster’s	</text>
<text top="319" left="233" width="176" height="14" font="5">AttackRangeSphere</text>
<text top="315" left="409" width="64" height="20" font="2">	object.</text>
<text top="1140" left="134" width="625" height="20" font="4"><i>Mixamo	Adam	with	his	AttackRangeSphere	object	highlighted	in	orange</i></text>
</page>
<page number="410" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="760" height="20" font="2">Place	a	few	of	your	<b>BP_Monster</b>	instances	inside	your	game;	compile	and	run.	Without</text>
<text top="83" left="54" width="186" height="20" font="2">any	code	to	drive	the	</text>
<text top="88" left="240" width="73" height="14" font="5">Monster</text>
<text top="83" left="313" width="493" height="20" font="2">	character	to	move,	your	monsters	should	just	stand	there</text>
<text top="109" left="54" width="38" height="20" font="2">idly.</text>
</page>
<page number="411" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="395" height="32" font="7"><b>Basic	monster	intelligence</b></text>
<text top="110" left="54" width="490" height="20" font="2">In	our	game,	we	will	add	only	a	basic	intelligence	to	the	</text>
<text top="115" left="544" width="73" height="14" font="5">Monster</text>
<text top="110" left="616" width="221" height="20" font="2">	characters.	The	monsters</text>
<text top="136" left="54" width="330" height="20" font="2">will	know	how	to	do	two	basic	things:</text>
<text top="173" left="97" width="278" height="20" font="2">Track	the	player	and	follow	him</text>
<text top="199" left="97" width="149" height="20" font="2">Attack	the	player</text>
<text top="236" left="54" width="785" height="20" font="2">The	monster	will	not	do	anything	else.	You	can	have	the	monster	taunt	the	player	when	the</text>
<text top="262" left="54" width="599" height="20" font="2">player	is	first	seen	as	well,	but	we’ll	leave	that	as	an	exercise	for	you.</text>
<text top="300" left="54" width="422" height="22" font="8"><b>Moving	the	monster	–	steering	behavior</b></text>
<text top="338" left="54" width="777" height="20" font="2">Monsters	in	very	basic	games	don’t	usually	have	complex	motion	behaviors.	Usually	they</text>
<text top="364" left="54" width="781" height="20" font="2">just	walk	towards	the	target	and	attack	it.	We’ll	program	that	type	of	monster	in	this	game,</text>
<text top="390" left="54" width="755" height="20" font="2">but	mind	you,	you	can	get	more	interesting	play	with	monsters	that	position	themselves</text>
<text top="416" left="54" width="742" height="20" font="2">advantageously	on	the	terrain	to	perform	ranged	attacks	and	so	on.	We’re	not	going	to</text>
<text top="442" left="54" width="450" height="20" font="2">program	that	here,	but	it’s	something	to	think	about.</text>
<text top="479" left="54" width="160" height="20" font="2">In	order	to	get	the	</text>
<text top="483" left="214" width="73" height="14" font="5">Monster</text>
<text top="479" left="287" width="540" height="20" font="2">	character	to	move	towards	the	player,	we	need	to	dynamically</text>
<text top="505" left="54" width="232" height="20" font="2">update	the	direction	of	the	</text>
<text top="509" left="286" width="73" height="14" font="5">Monster</text>
<text top="505" left="358" width="407" height="20" font="2">	character	moving	in	each	frame.	To	update	the</text>
<text top="531" left="54" width="491" height="20" font="2">direction	that	the	monster	is	facing,	we	write	code	in	the	</text>
<text top="535" left="545" width="155" height="14" font="5">Monster::Tick()</text>
<text top="531" left="701" width="76" height="20" font="2">	method.</text>
<text top="567" left="54" width="39" height="20" font="2">The	</text>
<text top="572" left="93" width="41" height="14" font="5">Tick</text>
<text top="567" left="134" width="548" height="20" font="2">	function	runs	in	every	frame	of	the	game.	The	signature	of	the	</text>
<text top="572" left="682" width="41" height="14" font="5">Tick</text>
<text top="567" left="724" width="103" height="20" font="2">	function	is:</text>
<text top="611" left="54" width="487" height="14" font="5">virtual	void	Tick(float	DeltaSeconds)	override;</text>
<text top="642" left="54" width="429" height="20" font="2">You	need	to	add	this	function’s	prototype	to	your	</text>
<text top="646" left="483" width="83" height="14" font="5">AMonster</text>
<text top="642" left="566" width="120" height="20" font="2">	class	in	your	</text>
<text top="646" left="686" width="93" height="14" font="5">Monster.h</text>
<text top="642" left="779" width="59" height="20" font="2">	file.	If</text>
<text top="668" left="54" width="108" height="20" font="2">we	override	</text>
<text top="672" left="162" width="41" height="14" font="5">Tick</text>
<text top="668" left="203" width="423" height="20" font="2">,	we	can	place	our	own	custom	behavior	that	the	</text>
<text top="672" left="626" width="73" height="14" font="5">Monster</text>
<text top="668" left="698" width="84" height="20" font="2">	character</text>
<text top="694" left="54" width="755" height="20" font="2">should	do	in	each	frame.	Here’s	some	basic	code	that	will	move	the	monster	toward	the</text>
<text top="720" left="54" width="222" height="20" font="2">player	during	each	frame:</text>
<text top="763" left="54" width="404" height="14" font="5">void	AMonster::Tick(float	DeltaSeconds)</text>
<text top="783" left="54" width="10" height="14" font="5">{</text>
<text top="804" left="54" width="311" height="14" font="5">		Super::Tick(	DeltaSeconds	);</text>
<text top="845" left="54" width="549" height="14" font="5">		//	basic	intel:	move	the	monster	towards	the	player</text>
<text top="866" left="54" width="373" height="14" font="5">		AAvatar	*avatar	=	Cast&lt;AAvatar&gt;(		</text>
<text top="886" left="54" width="508" height="14" font="5">UGameplayStatics::GetPlayerPawn(GetWorld(),	0)	);</text>
<text top="907" left="54" width="238" height="14" font="5">		if(	!avatar	)	return;</text>
<text top="948" left="54" width="725" height="14" font="5">		FVector	toPlayer	=	avatar-&gt;GetActorLocation()	-		GetActorLocation();</text>
<text top="968" left="54" width="497" height="14" font="5">		toPlayer.Normalize();	//	reduce	to	unit	vector</text>
<text top="1009" left="54" width="570" height="14" font="5">		//	Actually	move	the	monster	towards	the	player	a	bit</text>
<text top="1030" left="54" width="508" height="14" font="5">		AddMovementInput(toPlayer,	Speed*DeltaSeconds);</text>
<text top="1071" left="54" width="300" height="14" font="5">		//	At	least	face	the	target</text>
<text top="1091" left="54" width="445" height="14" font="5">		//	Gets	you	the	rotator	to	turn	something</text>
<text top="1112" left="54" width="445" height="14" font="5">		//	that	looks	in	the	`toPlayer`	direction</text>
<text top="1132" left="54" width="518" height="14" font="5">		FRotator	toPlayerRotation	=	toPlayer.Rotation();</text>
<text top="1153" left="54" width="497" height="14" font="5">		toPlayerRotation.Pitch	=	0;	//	0	off	the	pitch</text>
<text top="1173" left="54" width="559" height="14" font="5">		RootComponent-&gt;SetWorldRotation(	toPlayerRotation	);</text>
<text top="1194" left="54" width="10" height="14" font="5">}</text>
</page>
<page number="412" position="absolute" top="0" left="0" height="1262" width="892">
<image top="126" left="54" width="785" height="70" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-412_1.jpg"/>
<image top="439" left="54" width="324" height="314" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-412_2.jpg"/>
<text top="68" left="54" width="35" height="20" font="2">For	</text>
<text top="73" left="89" width="166" height="14" font="5">AddMovementInput</text>
<text top="68" left="255" width="474" height="20" font="2">	to	work,	you	must	have	a	controller	selected	under	the</text>
<text top="94" left="54" width="714" height="19" font="3"><b>AIController	Class</b>	panel	in	your	blueprint,	as	shown	in	the	following	screenshot:</text>
<text top="266" left="54" width="179" height="20" font="2">If	you	have	selected	</text>
<text top="270" left="233" width="41" height="14" font="5">None</text>
<text top="266" left="274" width="78" height="20" font="2">,	calls	to	</text>
<text top="270" left="352" width="166" height="14" font="5">AddMovementInput</text>
<text top="266" left="518" width="296" height="20" font="2">	won’t	have	any	effect.	To	prevent</text>
<text top="292" left="54" width="183" height="20" font="2">this,	select	either	the	</text>
<text top="296" left="237" width="124" height="14" font="5">AIController</text>
<text top="292" left="361" width="108" height="20" font="2">	class	or	the	</text>
<text top="296" left="469" width="166" height="14" font="5">PlayerController</text>
<text top="292" left="635" width="116" height="20" font="2">	class	as	your</text>
<text top="318" left="54" width="180" height="19" font="3"><b>AIController	Class</b>.</text>
<text top="354" left="54" width="676" height="20" font="2">The	preceding	code	is	very	simple.	It	comprises	the	most	basic	form	of	enemy</text>
<text top="380" left="54" width="747" height="20" font="2">intelligence:	simply	move	toward	the	player	by	an	incrementally	small	amount	in	each</text>
<text top="406" left="54" width="56" height="20" font="2">frame.</text>
<text top="790" left="192" width="509" height="20" font="4"><i>Our	not-so-intelligent	army	of	monsters	chasing	the	player</i></text>
<text top="859" left="54" width="730" height="20" font="2">The	result	in	a	series	of	frames	will	be	that	the	monster	tracks	and	follows	the	player</text>
<text top="885" left="54" width="668" height="20" font="2">around	the	level.	To	understand	how	this	works,	you	must	remember	that	the	</text>
<text top="889" left="722" width="41" height="14" font="5">Tick</text>
<text top="911" left="54" width="758" height="20" font="2">function	is	called	on	average	about	60	times	per	second.	What	this	means	is	that	in	each</text>
<text top="937" left="54" width="768" height="20" font="2">frame,	the	monster	moves	a	tiny	bit	closer	to	the	player.	Since	the	monster	moves	in	very</text>
<text top="963" left="54" width="762" height="20" font="2">small	steps,	his	action	looks	smooth	and	continuous	(while	in	reality,	he	is	making	small</text>
<text top="989" left="54" width="275" height="20" font="2">jumps	and	leaps	in	each	frame).</text>
</page>
<page number="413" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="432" height="228" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-413_1.jpg"/>
<text top="318" left="100" width="692" height="20" font="4"><i>Discrete	nature	of	tracking:	a	monster’s	motion	over	three	superimposed	frames</i></text>
<text top="388" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="427" left="54" width="737" height="20" font="2">The	reason	why	the	monster	moves	about	60	times	a	second	is	because	of	a	hardware</text>
<text top="453" left="54" width="780" height="20" font="2">constraint.	The	refresh	rate	of	a	typical	monitor	is	60	Hz,	so	it	acts	as	a	practical	limiter	on</text>
<text top="479" left="54" width="764" height="20" font="2">how	many	updates	per	second	are	useful.	Updating	at	a	frame	rate	faster	than	the	refresh</text>
<text top="505" left="54" width="747" height="20" font="2">rate	is	possible,	but	it	is	not	necessarily	useful	for	games	since	you	will	only	see	a	new</text>
<text top="531" left="54" width="771" height="20" font="2">picture	once	every	1/60	of	a	second	on	most	hardware.	Some	advanced	physics	modeling</text>
<text top="556" left="54" width="757" height="20" font="2">simulations	do	almost	1,000	updates	a	second,	but	arguably,	you	don’t	need	that	kind	of</text>
<text top="582" left="54" width="756" height="20" font="2">resolution	for	a	game	and	you	should	reserve	the	extra	CPU	time	for	something	that	the</text>
<text top="608" left="54" width="768" height="20" font="2">player	will	enjoy	instead,	such	as	better	AI	algorithms.	Some	newer	hardware	boasts	of	a</text>
<text top="634" left="54" width="747" height="20" font="2">refresh	rate	up	to	120	Hz	(look	up	gaming	monitors,	but	don’t	tell	your	parents	I	asked</text>
<text top="660" left="54" width="315" height="20" font="2">you	to	blow	all	your	money	on	one).</text>
<text top="698" left="54" width="406" height="22" font="8"><b>The	discrete	nature	of	monster	motion</b></text>
<text top="737" left="54" width="729" height="20" font="2">Computer	games	are	discrete	in	nature.	In	the	preceding	screenshot	of	superimposed</text>
<text top="763" left="54" width="779" height="20" font="2">sequences	of	frames,	the	player	is	seen	as	moving	straight	up	the	screen,	in	tiny	steps.	The</text>
<text top="789" left="54" width="754" height="20" font="2">motion	of	the	monster	is	also	in	small	steps.	In	each	frame,	the	monster	takes	one	small</text>
<text top="815" left="54" width="777" height="20" font="2">discrete	step	towards	the	player.	The	monster	is	following	an	apparently	curved	path	as	he</text>
<text top="841" left="54" width="490" height="20" font="2">moves	directly	toward	where	the	player	is	in	each	frame.</text>
<text top="877" left="54" width="754" height="20" font="2">To	move	the	monster	toward	the	player,	we	first	have	to	get	the	player’s	position.	Since</text>
<text top="903" left="54" width="383" height="20" font="2">the	player	is	accessible	in	a	global	function,	</text>
<text top="908" left="437" width="321" height="14" font="5">UGameplayStatics::GetPlayerPawn</text>
<text top="903" left="758" width="36" height="20" font="2">,	we</text>
<text top="929" left="54" width="725" height="20" font="2">simply	retrieve	our	pointer	to	the	player	using	this	function.	Next	we	find	the	vector</text>
<text top="955" left="54" width="156" height="20" font="2">pointing	from	the	</text>
<text top="959" left="210" width="73" height="14" font="5">Monster</text>
<text top="955" left="283" width="13" height="20" font="2">	(</text>
<text top="959" left="296" width="186" height="14" font="5">GetActorLocation()</text>
<text top="955" left="482" width="294" height="20" font="2">)	function	that	points	to	the	player</text>
<text top="981" left="54" width="7" height="20" font="2">(</text>
<text top="985" left="61" width="269" height="14" font="5">avatar-&gt;GetActorLocation()</text>
<text top="981" left="330" width="496" height="20" font="2">).	We	need	to	find	the	vector	that	points	from	the	monster</text>
<text top="1007" left="54" width="778" height="20" font="2">to	the	avatar.	To	do	this,	you	have	to	subtract	the	location	of	the	monster	from	the	location</text>
<text top="1033" left="54" width="443" height="20" font="2">of	the	avatar,	as	shown	in	the	following	screenshot:</text>
</page>
<page number="414" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="162" height="131" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-414_1.jpg"/>
<image top="415" left="54" width="540" height="270" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-414_2.jpg"/>
<text top="253" left="54" width="756" height="20" font="2">It’s	a	simple	math	rule	to	remember	but	often	easy	to	get	wrong.	To	get	the	right	vector,</text>
<text top="279" left="54" width="759" height="20" font="2">always	subtract	the	source	(the	starting	point)	vector	from	the	target	(the	terminal	point)</text>
<text top="305" left="54" width="396" height="20" font="2">vector.	In	our	system,	we	have	to	subtract	the	</text>
<text top="309" left="450" width="73" height="14" font="5">Monster</text>
<text top="305" left="523" width="144" height="20" font="2">	vector	from	the	</text>
<text top="309" left="667" width="62" height="14" font="5">Avatar</text>
<text top="305" left="729" width="107" height="20" font="2">	vector.	This</text>
<text top="331" left="54" width="265" height="20" font="2">works	because	subtracting	the	</text>
<text top="335" left="319" width="73" height="14" font="5">Monster</text>
<text top="331" left="391" width="303" height="20" font="2">	vector	from	the	system	moves	the	</text>
<text top="335" left="694" width="73" height="14" font="5">Monster</text>
<text top="331" left="767" width="59" height="20" font="2">	vector</text>
<text top="357" left="54" width="179" height="20" font="2">to	the	origin	and	the	</text>
<text top="361" left="233" width="62" height="14" font="5">Avatar</text>
<text top="357" left="295" width="417" height="20" font="2">	vector	will	be	to	the	lower	left-hand	side	of	the	</text>
<text top="361" left="712" width="73" height="14" font="5">Monster</text>
<text top="383" left="54" width="60" height="20" font="2">vector:</text>
<text top="722" left="93" width="706" height="20" font="4"><i>Subtracting	the	Monster	vector	from	the	system	moves	the	Monster	vector	to	(0,0)</i></text>
<text top="791" left="54" width="728" height="20" font="2">Be	sure	to	try	out	your	code.	At	this	point,	the	monsters	will	be	running	toward	your</text>
<text top="817" left="54" width="740" height="20" font="2">player	and	crowding	around	him.	With	the	preceding	code	that	is	outlined,	they	won’t</text>
<text top="843" left="54" width="658" height="20" font="2">attack;	they’ll	just	follow	him	around,	as	shown	in	the	following	screenshot:</text>
</page>
<page number="415" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="540" height="439" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-415_1.jpg"/>
<image top="862" left="54" width="324" height="324" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-415_2.jpg"/>
<text top="562" left="54" width="225" height="22" font="8"><b>Monster	SightSphere</b></text>
<text top="601" left="54" width="479" height="20" font="2">Right	now,	the	monsters	are	not	paying	attention	to	the	</text>
<text top="605" left="533" width="114" height="14" font="5">SightSphere</text>
<text top="601" left="647" width="177" height="20" font="2">	component.	That	is,</text>
<text top="627" left="54" width="738" height="20" font="2">wherever	the	player	is	in	the	world,	the	monsters	will	move	toward	him	in	the	current</text>
<text top="653" left="54" width="305" height="20" font="2">setup.	We	want	to	change	that	now.</text>
<text top="689" left="54" width="304" height="20" font="2">To	do	so,	all	we	have	to	do	is	have	</text>
<text top="694" left="358" width="73" height="14" font="5">Monster</text>
<text top="689" left="430" width="104" height="20" font="2">	respect	the	</text>
<text top="694" left="534" width="114" height="14" font="5">SightSphere</text>
<text top="689" left="648" width="150" height="20" font="2">	restriction.	If	the</text>
<text top="715" left="54" width="258" height="20" font="2">player	is	inside	the	monster’s	</text>
<text top="720" left="312" width="114" height="14" font="5">SightSphere</text>
<text top="715" left="426" width="410" height="20" font="2">	object,	the	monster	will	give	chase.	Otherwise,</text>
<text top="741" left="54" width="682" height="20" font="2">the	monsters	will	be	oblivious	to	the	player’s	location	and	not	chase	the	player.</text>
<text top="778" left="54" width="760" height="20" font="2">Checking	to	see	if	an	object	is	inside	a	sphere	is	simple.	In	the	following	screenshot,	the</text>
<text top="804" left="54" width="762" height="20" font="2">point	<b>p</b>	is	inside	the	sphere	if	the	distance	<b>d</b>	between	<b>p</b>	and	the	centroid	<b>c</b>	is	less	than	the</text>
<text top="830" left="54" width="141" height="20" font="2">sphere	radius,	<b>r</b>:</text>
</page>
<page number="416" position="absolute" top="0" left="0" height="1262" width="892">
<image top="716" left="54" width="620" height="247" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-416_1.jpg"/>
<text top="57" left="264" width="366" height="20" font="4"><i>P	is	inside	the	sphere	when	d	is	less	than	r</i></text>
<text top="127" left="54" width="637" height="20" font="2">So,	in	our	code,	the	preceding	screenshot	translates	to	the	following	code:</text>
<text top="170" left="54" width="404" height="14" font="5">void	AMonster::Tick(float	DeltaSeconds)</text>
<text top="190" left="54" width="10" height="14" font="5">{</text>
<text top="211" left="54" width="311" height="14" font="5">		Super::Tick(	DeltaSeconds	);</text>
<text top="231" left="54" width="373" height="14" font="5">		AAvatar	*avatar	=	Cast&lt;AAvatar&gt;(		</text>
<text top="252" left="54" width="508" height="14" font="5">UGameplayStatics::GetPlayerPawn(GetWorld(),	0)	);</text>
<text top="272" left="54" width="238" height="14" font="5">		if(	!avatar	)	return;</text>
<text top="293" left="54" width="746" height="14" font="5">				FVector	toPlayer	=	avatar-&gt;GetActorLocation()	-		GetActorLocation();</text>
<text top="313" left="54" width="445" height="14" font="5">		float	distanceToPlayer	=	toPlayer.Size();</text>
<text top="334" left="54" width="621" height="14" font="5">		//	If	the	player	is	not	in	the	SightSphere	of	the	monster,</text>
<text top="355" left="54" width="124" height="14" font="5">		//	go	back</text>
<text top="375" left="54" width="653" height="14" font="5">		if(	distanceToPlayer	&gt;	SightSphere-&gt;GetScaledSphereRadius()	)</text>
<text top="396" left="54" width="31" height="14" font="5">		{</text>
<text top="416" left="54" width="383" height="14" font="5">				//	If	the	player	is	out	of	sight,</text>
<text top="437" left="54" width="352" height="14" font="5">				//	then	the	enemy	cannot	chase</text>
<text top="457" left="54" width="114" height="14" font="5">				return;</text>
<text top="478" left="54" width="31" height="14" font="5">		}</text>
<text top="519" left="54" width="590" height="14" font="5">		toPlayer	/=	distanceToPlayer;		//	normalizes	the	vector</text>
<text top="539" left="54" width="570" height="14" font="5">		//	Actually	move	the	monster	towards	the	player	a	bit</text>
<text top="560" left="54" width="508" height="14" font="5">		AddMovementInput(toPlayer,	Speed*DeltaSeconds);</text>
<text top="580" left="54" width="508" height="14" font="5">		//	(rest	of	function	same	as	before	(rotation))</text>
<text top="601" left="54" width="10" height="14" font="5">}</text>
<text top="632" left="54" width="472" height="20" font="2">The	preceding	code	adds	additional	intelligence	to	the	</text>
<text top="636" left="526" width="73" height="14" font="5">Monster</text>
<text top="632" left="599" width="133" height="20" font="2">	character.	The	</text>
<text top="636" left="732" width="73" height="14" font="5">Monster</text>
<text top="658" left="54" width="680" height="20" font="2">character	can	now	stop	chasing	the	player	if	the	player	is	outside	the	monster’s</text>
<text top="688" left="54" width="114" height="14" font="5">SightSphere</text>
<text top="684" left="168" width="343" height="20" font="2">	object.	This	is	how	the	result	will	look:</text>
<text top="1033" left="54" width="752" height="20" font="2">A	good	thing	to	do	here	will	be	to	wrap	up	the	distance	comparison	into	a	simple	inline</text>
<text top="1059" left="54" width="581" height="20" font="2">function.	We	can	provide	these	two	inline	member	functions	in	the	</text>
<text top="1063" left="635" width="73" height="14" font="5">Monster</text>
<text top="1059" left="707" width="86" height="20" font="2">	header	as</text>
<text top="1085" left="54" width="71" height="20" font="2">follows:</text>
<text top="1128" left="54" width="383" height="14" font="5">inline	bool	isInSightRange(	float	d	)</text>
<text top="1149" left="54" width="539" height="14" font="5">{	return	d	&lt;	SightSphere-&gt;GetScaledSphereRadius();	}</text>
<text top="1169" left="54" width="394" height="14" font="5">inline	bool	isInAttackRange(	float	d	)</text>
<text top="1190" left="54" width="601" height="14" font="5">{	return	d	&lt;	AttackRangeSphere-&gt;GetScaledSphereRadius();	}</text>
</page>
<page number="417" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="284" height="20" font="2">These	functions	return	the	value	</text>
<text top="62" left="338" width="41" height="14" font="5">true</text>
<text top="57" left="379" width="248" height="20" font="2">	when	the	passed	parameter,	</text>
<text top="62" left="627" width="10" height="14" font="5">d</text>
<text top="57" left="638" width="184" height="20" font="2">,	is	inside	the	spheres</text>
<text top="83" left="54" width="101" height="20" font="2">in	question.</text>
<text top="121" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="160" left="54" width="32" height="20" font="2">An	</text>
<text top="164" left="86" width="62" height="14" font="5">inline</text>
<text top="160" left="148" width="677" height="20" font="2">	function	means	that	the	function	is	more	like	a	macro	than	a	function.	Macros</text>
<text top="186" left="54" width="756" height="20" font="2">are	copied	and	pasted	to	the	calling	location,	while	functions	are	jumped	to	by	C++	and</text>
<text top="212" left="54" width="767" height="20" font="2">executed	at	their	location.	Inline	functions	are	good	because	they	give	good	performance</text>
<text top="238" left="54" width="502" height="20" font="2">while	keeping	the	code	easy	to	read	and	they	are	reusable.</text>
</page>
<page number="418" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="419" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="551" height="39" font="0"><b>Monster	attacks	on	the	player</b></text>
<text top="120" left="54" width="767" height="20" font="2">There	are	a	few	different	types	of	attacks	that	monsters	can	do.	Depending	on	the	type	of</text>
<text top="146" left="54" width="32" height="20" font="2">the	</text>
<text top="150" left="86" width="73" height="14" font="5">Monster</text>
<text top="146" left="158" width="594" height="20" font="2">	character,	a	monster’s	attack	might	be	melee	(close	range)	or	ranged</text>
<text top="172" left="54" width="174" height="20" font="2">(projectile	weapon).</text>
<text top="209" left="54" width="39" height="20" font="2">The	</text>
<text top="213" left="93" width="73" height="14" font="5">Monster</text>
<text top="209" left="165" width="524" height="20" font="2">	character	will	attack	the	player	whenever	the	player	is	in	his</text>
<text top="239" left="54" width="176" height="14" font="5">AttackRangeSphere</text>
<text top="235" left="230" width="428" height="20" font="2">.	If	the	player	is	out	of	the	range	of	the	monster’s	</text>
<text top="239" left="658" width="176" height="14" font="5">AttackRangeSphere</text>
<text top="260" left="54" width="198" height="20" font="2">but	the	player	is	in	the	</text>
<text top="265" left="252" width="114" height="14" font="5">SightSphere</text>
<text top="260" left="366" width="434" height="20" font="2">	object	of	the	monster,	then	the	monster	will	move</text>
<text top="286" left="54" width="470" height="20" font="2">closer	to	the	player	until	the	player	is	in	the	monster’s	</text>
<text top="291" left="524" width="176" height="14" font="5">AttackRangeSphere</text>
<text top="286" left="700" width="5" height="20" font="2">.</text>
</page>
<page number="420" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="209" height="32" font="7"><b>Melee	attacks</b></text>
<text top="110" left="54" width="781" height="20" font="2">The	dictionary	definition	of	<i>melee</i>	is	a	confused	mass	of	people.	A	melee	attack	is	one	that</text>
<text top="136" left="54" width="715" height="20" font="2">is	done	at	a	close	range.	Picture	a	bunch	of	<i>zerglings</i>	battling	it	out	with	a	bunch	of</text>
<text top="162" left="54" width="762" height="20" font="4"><i>ultralisks</i>	(if	you’re	a	<i>StarCraft</i>	player,	you’ll	know	that	both	zerglings	and	ultralisks	are</text>
<text top="188" left="54" width="780" height="20" font="2">melee	units).	Melee	attacks	are	basically	close	range,	hand-to-hand	combat.	To	do	a	melee</text>
<text top="214" left="54" width="783" height="20" font="2">attack,	you	need	a	melee	attack	animation	that	turns	on	when	the	monster	begins	his	melee</text>
<text top="240" left="54" width="760" height="20" font="2">attack.	To	do	this,	you	need	to	edit	the	animation	blueprint	in	<i>Persona</i>,	UE4’s	animation</text>
<text top="266" left="54" width="55" height="20" font="2">editor.</text>
<text top="304" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="343" left="54" width="761" height="20" font="2">Zak	Parrish’s	<i>Persona</i>	series	is	an	excellent	place	to	get	started	with	in	order	to	program</text>
<text top="369" left="54" width="220" height="20" font="2"><a href="https://www.youtube.com/watch?v=AqYmC2wn7Cg&amp;list=PL6VDVOqa_mdNW6JEu9UAS_s40OCD_u6yp&amp;index=8">animations	in	blueprints:	</a></text>
<text top="369" left="274" width="290" height="20" font="1"><a href="https://www.youtube.com/watch?v=AqYmC2wn7Cg&amp;list=PL6VDVOqa_mdNW6JEu9UAS_s40OCD_u6yp&amp;index=8">https://www.youtube.com/watch?</a></text>
<text top="394" left="54" width="743" height="20" font="1"><a href="https://www.youtube.com/watch?v=AqYmC2wn7Cg&amp;list=PL6VDVOqa_mdNW6JEu9UAS_s40OCD_u6yp&amp;index=8">v=AqYmC2wn7Cg&amp;list=PL6VDVOqa_mdNW6JEu9UAS_s40OCD_u6yp&amp;index=8</a></text>
<text top="394" left="797" width="5" height="20" font="2"><a href="https://www.youtube.com/watch?v=AqYmC2wn7Cg&amp;list=PL6VDVOqa_mdNW6JEu9UAS_s40OCD_u6yp&amp;index=8">.</a></text>
<text top="431" left="54" width="723" height="20" font="2">For	now,	we	will	just	program	the	melee	attack	and	then	worry	about	modifying	the</text>
<text top="457" left="54" width="248" height="20" font="2">animation	in	blueprints	later.</text>
<text top="495" left="54" width="264" height="22" font="8"><b>Defining	a	melee	weapon</b></text>
<text top="534" left="54" width="763" height="20" font="2">There	are	going	to	be	three	parts	to	defining	our	melee	weapon.	The	first	part	is	the	C++</text>
<text top="560" left="54" width="758" height="20" font="2">code	that	represents	it.	The	second	is	the	model,	and	the	third	is	to	connect	the	code	and</text>
<text top="586" left="54" width="331" height="20" font="2">model	together	using	a	UE4	blueprint.</text>
<text top="623" left="54" width="319" height="19" font="3"><b>Coding	for	a	melee	weapon	in	C++</b></text>
<text top="659" left="54" width="241" height="20" font="2">We	will	define	a	new	class,	</text>
<text top="663" left="295" width="124" height="14" font="5">AMeleeWeapon</text>
<text top="659" left="419" width="130" height="20" font="2">	(derived	from	</text>
<text top="663" left="549" width="62" height="14" font="5">AActor</text>
<text top="659" left="612" width="211" height="20" font="2">),	to	represent	hand-held</text>
<text top="685" left="54" width="664" height="20" font="2">combat	weapons.	I	will	attach	a	couple	of	blueprint-editable	properties	to	the</text>
<text top="715" left="54" width="124" height="14" font="5">AMeleeWeapon</text>
<text top="711" left="178" width="126" height="20" font="2">	class,	and	the	</text>
<text top="715" left="305" width="124" height="14" font="5">AMeleeWeapon</text>
<text top="711" left="429" width="359" height="20" font="2">	class	will	look	as	shown	in	the	following</text>
<text top="737" left="54" width="47" height="20" font="2">code:</text>
<text top="780" left="54" width="155" height="14" font="5">class	AMonster;</text>
<text top="821" left="54" width="83" height="14" font="5">UCLASS()</text>
<text top="842" left="54" width="497" height="14" font="5">class	GOLDENEGG_API	AMeleeWeapon	:	public	AActor</text>
<text top="862" left="54" width="10" height="14" font="5">{</text>
<text top="883" left="54" width="259" height="14" font="5">		GENERATED_UCLASS_BODY()</text>
<text top="924" left="54" width="528" height="14" font="5">		//	The	amount	of	damage	attacks	by	this	weapon	do</text>
<text top="944" left="54" width="725" height="14" font="5">		UPROPERTY(EditAnywhere,	BlueprintReadWrite,	Category	=		MeleeWeapon)</text>
<text top="965" left="54" width="218" height="14" font="5">		float	AttackDamage;</text>
<text top="1006" left="54" width="632" height="14" font="5">		//	A	list	of	things	the	melee	weapon	already	hit	this	swing</text>
<text top="1026" left="54" width="621" height="14" font="5">		//	Ensures	each	thing	sword	passes	thru	only	gets	hit	once</text>
<text top="1047" left="54" width="290" height="14" font="5">		TArray&lt;AActor*&gt;	ThingsHit;</text>
<text top="1088" left="54" width="528" height="14" font="5">		//	prevents	damage	from	occurring	in	frames	where</text>
<text top="1109" left="54" width="311" height="14" font="5">		//	the	sword	is	not	swinging</text>
<text top="1129" left="54" width="166" height="14" font="5">		bool	Swinging;</text>
<text top="1170" left="54" width="539" height="14" font="5">		//	&#34;Stop	hitting	yourself&#34;	-	used	to	check	if	the	</text>
<text top="1191" left="54" width="497" height="14" font="5">		//	actor	holding	the	weapon	is	hitting	himself</text>
</page>
<page number="421" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="259" height="14" font="5">		AMonster	*WeaponHolder;</text>
<text top="99" left="54" width="570" height="14" font="5">		//	bounding	box	that	determines	when	melee	weapon	hit</text>
<text top="119" left="54" width="663" height="14" font="5">		UPROPERTY(VisibleDefaultsOnly,	BlueprintReadOnly,	Category	=		</text>
<text top="140" left="54" width="124" height="14" font="5">MeleeWeapon)</text>
<text top="160" left="54" width="259" height="14" font="5">		UBoxComponent*	ProxBox;</text>
<text top="201" left="54" width="663" height="14" font="5">		UPROPERTY(VisibleDefaultsOnly,	BlueprintReadOnly,	Category	=		</text>
<text top="222" left="54" width="124" height="14" font="5">MeleeWeapon)</text>
<text top="242" left="54" width="300" height="14" font="5">		UStaticMeshComponent*	Mesh;</text>
<text top="283" left="54" width="570" height="14" font="5">		UFUNCTION(BlueprintNativeEvent,	Category	=	Collision)</text>
<text top="304" left="54" width="746" height="14" font="5">		void	Prox(	AActor*	OtherActor,	UPrimitiveComponent*	OtherComp,		int32	</text>
<text top="324" left="54" width="694" height="14" font="5">OtherBodyIndex,	bool	bFromSweep,	const	FHitResult	&amp;		SweepResult	);</text>
<text top="345" left="54" width="155" height="14" font="5">		void	Swing();</text>
<text top="365" left="54" width="145" height="14" font="5">		void	Rest();</text>
<text top="386" left="54" width="21" height="14" font="5">};</text>
<text top="417" left="54" width="333" height="20" font="2">Notice	how	I	used	a	bounding	box	for	</text>
<text top="422" left="387" width="73" height="14" font="5">ProxBox</text>
<text top="417" left="460" width="308" height="20" font="2">,	and	not	a	bounding	sphere.	This	is</text>
<text top="443" left="54" width="771" height="20" font="2">because	swords	and	axes	will	be	better	approximated	by	boxes	rather	than	spheres.	There</text>
<text top="469" left="54" width="237" height="20" font="2">are	two	member	functions,	</text>
<text top="473" left="291" width="62" height="14" font="5">Rest()</text>
<text top="469" left="353" width="42" height="20" font="2">	and	</text>
<text top="473" left="395" width="73" height="14" font="5">Swing()</text>
<text top="469" left="467" width="96" height="20" font="2">,	which	let	</text>
<text top="473" left="563" width="114" height="14" font="5">MeleeWeapon</text>
<text top="469" left="677" width="146" height="20" font="2">	know	what	state</text>
<text top="495" left="54" width="439" height="20" font="2">the	actor	is	in	(resting	or	swinging).	There’s	also	a	</text>
<text top="499" left="493" width="259" height="14" font="5">TArray&lt;AActor*&gt;	ThingsHit</text>
<text top="495" left="752" width="79" height="20" font="2">	property</text>
<text top="521" left="54" width="778" height="20" font="2">inside	this	class	that	keeps	track	of	the	actors	hit	by	this	melee	weapon	on	each	swing.	We</text>
<text top="547" left="54" width="677" height="20" font="2">are	programming	it	so	that	the	weapon	can	only	hit	each	thing	once	per	swing.</text>
<text top="583" left="54" width="39" height="20" font="2">The	</text>
<text top="588" left="93" width="166" height="14" font="5">AMeleeWeapon.cpp</text>
<text top="583" left="259" width="565" height="20" font="2">	file	will	contain	just	a	basic	constructor	and	some	simple	code	to</text>
<text top="609" left="54" width="148" height="20" font="2">send	damages	to	</text>
<text top="614" left="202" width="104" height="14" font="5">OtherActor</text>
<text top="609" left="306" width="468" height="20" font="2">	when	our	sword	hits	him.	We	will	also	implement	the</text>
<text top="640" left="54" width="62" height="14" font="5">Rest()</text>
<text top="635" left="116" width="42" height="20" font="2">	and	</text>
<text top="640" left="158" width="73" height="14" font="5">Swing()</text>
<text top="635" left="231" width="378" height="20" font="2">	functions	to	clear	the	list	of	things	hit.	The	</text>
<text top="640" left="609" width="155" height="14" font="5">MeleeWeapon.cpp</text>
<text top="635" left="764" width="68" height="20" font="2">	file	has</text>
<text top="661" left="54" width="168" height="20" font="2">the	following	code:</text>
<text top="705" left="54" width="704" height="14" font="5">AMeleeWeapon::AMeleeWeapon(const	class	FObjectInitializer&amp;	PCIP)	:		</text>
<text top="725" left="54" width="114" height="14" font="5">Super(PCIP)</text>
<text top="746" left="54" width="10" height="14" font="5">{</text>
<text top="766" left="54" width="197" height="14" font="5">		AttackDamage	=	1;</text>
<text top="787" left="54" width="197" height="14" font="5">		Swinging	=	false;</text>
<text top="807" left="54" width="228" height="14" font="5">		WeaponHolder	=	NULL;</text>
<text top="848" left="54" width="684" height="14" font="5">		Mesh	=	PCIP.CreateDefaultSubobject&lt;UStaticMeshComponent&gt;(this,		</text>
<text top="869" left="54" width="145" height="14" font="5">TEXT(&#34;Mesh&#34;));</text>
<text top="889" left="54" width="238" height="14" font="5">		RootComponent	=	Mesh;</text>
<text top="930" left="54" width="642" height="14" font="5">		ProxBox	=	PCIP.CreateDefaultSubobject&lt;UBoxComponent&gt;(this,		</text>
<text top="951" left="54" width="176" height="14" font="5">TEXT(&#34;ProxBox&#34;));</text>
<text top="971" left="54" width="766" height="14" font="5">		ProxBox-&gt;OnComponentBeginOverlap.AddDynamic(	this,		&amp;AMeleeWeapon::Prox	</text>
<text top="992" left="54" width="21" height="14" font="5">);</text>
<text top="1012" left="54" width="383" height="14" font="5">		ProxBox-&gt;AttachTo(	RootComponent	);</text>
<text top="1033" left="54" width="10" height="14" font="5">}</text>
<text top="1074" left="54" width="632" height="14" font="5">void	AMeleeWeapon::Prox_Implementation(	AActor*	OtherActor,		</text>
<text top="1095" left="54" width="746" height="14" font="5">UPrimitiveComponent*	OtherComp,	int32	OtherBodyIndex,	bool		bFromSweep,	</text>
<text top="1115" left="54" width="331" height="14" font="5">const	FHitResult	&amp;	SweepResult	)</text>
<text top="1136" left="54" width="10" height="14" font="5">{</text>
<text top="1156" left="54" width="352" height="14" font="5">		//	don't	hit	non	root	components</text>
<text top="1177" left="54" width="528" height="14" font="5">		if(	OtherComp	!=	OtherActor-&gt;GetRootComponent()	)</text>
</page>
<page number="422" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="31" height="14" font="5">		{</text>
<text top="78" left="54" width="114" height="14" font="5">				return;</text>
<text top="99" left="54" width="31" height="14" font="5">		}</text>
<text top="140" left="54" width="549" height="14" font="5">		//	avoid	hitting	things	while	sword	isn't	swinging,</text>
<text top="160" left="54" width="331" height="14" font="5">		//	avoid	hitting	yourself,	and</text>
<text top="181" left="54" width="456" height="14" font="5">		//	avoid	hitting	the	same	OtherActor	twice</text>
<text top="201" left="54" width="508" height="14" font="5">		if(	Swinging	&amp;&amp;	OtherActor	!=	WeaponHolder	&amp;&amp;		</text>
<text top="222" left="54" width="342" height="14" font="5">!ThingsHit.Contains(OtherActor)	)</text>
<text top="242" left="54" width="31" height="14" font="5">		{</text>
<text top="263" left="54" width="787" height="14" font="5">				OtherActor-&gt;TakeDamage(	AttackDamage	+	WeaponHolder-	&gt;BaseAttackDamage,	</text>
<text top="283" left="54" width="300" height="14" font="5">FDamageEvent(),	NULL,	this	);</text>
<text top="304" left="54" width="331" height="14" font="5">				ThingsHit.Add(	OtherActor	);</text>
<text top="324" left="54" width="31" height="14" font="5">		}</text>
<text top="345" left="54" width="10" height="14" font="5">}</text>
<text top="365" left="54" width="269" height="14" font="5">void	AMeleeWeapon::Swing()</text>
<text top="386" left="54" width="10" height="14" font="5">{</text>
<text top="406" left="54" width="404" height="14" font="5">		ThingsHit.Empty();		//	empty	the	list</text>
<text top="427" left="54" width="186" height="14" font="5">		Swinging	=	true;</text>
<text top="447" left="54" width="10" height="14" font="5">}</text>
<text top="468" left="54" width="259" height="14" font="5">void	AMeleeWeapon::Rest()</text>
<text top="488" left="54" width="10" height="14" font="5">{</text>
<text top="509" left="54" width="207" height="14" font="5">		ThingsHit.Empty();</text>
<text top="530" left="54" width="197" height="14" font="5">		Swinging	=	false;</text>
<text top="550" left="54" width="10" height="14" font="5">}</text>
<text top="582" left="54" width="200" height="19" font="3"><b>Downloading	a	sword</b></text>
<text top="618" left="54" width="770" height="20" font="2">To	complete	this	exercise,	we	need	a	sword	to	put	into	the	model’s	hand.	I	added	a	sword</text>
<text top="644" left="54" width="271" height="20" font="2">to	the	project	called	<i>Kilic</i>	from	</text>
<text top="644" left="325" width="399" height="20" font="1"><a href="http://tf3dm.com/3d-model/sword-95782.html">http://tf3dm.com/3d-model/sword-95782.html</a></text>
<text top="644" left="724" width="78" height="20" font="2">	by	Kaan</text>
<text top="670" left="54" width="676" height="20" font="2">Gülhan.	The	following	is	a	list	of	other	places	where	you	will	get	free	models:</text>
<text top="707" left="97" width="243" height="20" font="1"><a href="http://www.turbosquid.com/">http://www.turbosquid.com/</a></text>
<text top="733" left="97" width="152" height="20" font="1"><a href="http://tf3dm.com/">http://tf3dm.com/</a></text>
<text top="758" left="97" width="174" height="20" font="1"><a href="http://archive3d.net/">http://archive3d.net/</a></text>
<text top="784" left="97" width="211" height="20" font="1"><a href="http://www.3dtotal.com/">http://www.3dtotal.com/</a></text>
<text top="823" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="861" left="54" width="88" height="19" font="3"><b>Secret	tip</b></text>
<text top="898" left="54" width="225" height="20" font="2">It	might	appear	at	first	on<a href="http://TurboSquid.com">	</a></text>
<text top="898" left="279" width="145" height="20" font="1"><a href="http://TurboSquid.com">TurboSquid.com</a></text>
<text top="898" left="424" width="411" height="20" font="2">	that	there	are	no	free	models.	In	fact,	the	secret</text>
<text top="924" left="54" width="679" height="20" font="2">is	that	you	have	to	search	in	the	price	range	$0-$0	to	find	them.	$0	means	free.</text>
</page>
<page number="423" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="785" height="239" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-423_1.jpg"/>
<image top="648" left="54" width="516" height="520" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-423_2.jpg"/>
<text top="329" left="291" width="310" height="20" font="4"><i>TurboSquid’s	search	for	free	swords</i></text>
<text top="398" left="54" width="744" height="20" font="2">I	had	to	edit	the	<i>kilic</i>	sword	mesh	slightly	to	fix	the	initial	sizing	and	rotation.	You	can</text>
<text top="424" left="54" width="768" height="20" font="2">import	any	mesh	in	the	<b>Filmbox</b>	(<b>FBX</b>)	format	into	your	game.	The	kilic	sword	model	is</text>
<text top="450" left="54" width="273" height="20" font="2">in	the	sample	code	package	for<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#398">	</a></text>
<text top="450" left="327" width="95" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#398">Chapter	11</a></text>
<text top="450" left="422" width="97" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#398">,</a>	<i>Monsters</i>.</text>
<text top="486" left="54" width="756" height="20" font="2">To	import	your	sword	into	the	UE4	editor,	right-click	on	any	folder	you	want	to	add	the</text>
<text top="512" left="54" width="722" height="20" font="2">model	to.	Navigate	to	<b>New	Asset</b>	|	<b>Import	to	</b>|	<b>Game</b>	|	<b>Models…</b>,	and	from	the	file</text>
<text top="538" left="54" width="772" height="20" font="2">explorer	that	pops	up,	select	the	new	asset	you	want	to	import.	If	a	<b>Models</b>	folder	doesn’t</text>
<text top="564" left="54" width="776" height="20" font="2">exist,	you	can	create	one	by	simply	right-clicking	on	the	tree	view	at	the	left	and	selecting</text>
<text top="590" left="54" width="764" height="19" font="3"><b>New	Folder</b>	in	the	pane	on	the	left-hand	side	of	the	<b>Content	Browser</b>	tab.	I	selected	the</text>
<text top="620" left="54" width="93" height="14" font="5">kilic.fbx</text>
<text top="616" left="147" width="206" height="20" font="2">	asset	from	my	desktop.</text>
</page>
<page number="424" position="absolute" top="0" left="0" height="1262" width="892">
<image top="247" left="54" width="785" height="592" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-424_1.jpg"/>
<image top="992" left="54" width="540" height="154" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-424_2.jpg"/>
<text top="57" left="337" width="219" height="20" font="4"><i>Importing	to	your	project</i></text>
<text top="127" left="54" width="404" height="19" font="3"><b>Creating	a	blueprint	for	your	melee	weapon</b></text>
<text top="163" left="54" width="458" height="20" font="2">Inside	the	UE4	editor,	create	a	blueprint	based	off	of	</text>
<text top="168" left="512" width="124" height="14" font="5">AMeleeWeapon</text>
<text top="163" left="637" width="57" height="20" font="2">	called</text>
<text top="194" left="54" width="135" height="14" font="5">BP_MeleeSword</text>
<text top="189" left="189" width="104" height="20" font="2">.	Configure	</text>
<text top="194" left="292" width="135" height="14" font="5">BP_MeleeSword</text>
<text top="189" left="427" width="361" height="20" font="2">	to	use	the	<i>kilic</i>	blade	model	(or	any	blade</text>
<text top="215" left="54" width="501" height="20" font="2">model	you	choose),	as	shown	in	the	following	screenshot:</text>
<text top="908" left="54" width="39" height="20" font="2">The	</text>
<text top="912" left="93" width="73" height="14" font="5">ProxBox</text>
<text top="908" left="165" width="646" height="20" font="2">	class	will	determine	whether	something	was	hit	by	the	weapon,	so	we	will</text>
<text top="934" left="54" width="100" height="20" font="2">modify	the	</text>
<text top="938" left="154" width="73" height="14" font="5">ProxBox</text>
<text top="934" left="226" width="604" height="20" font="2">	class	such	that	it	just	encloses	the	blade	of	the	sword,	as	shown	in	the</text>
<text top="959" left="54" width="186" height="20" font="2">following	screenshot:</text>
</page>
<page number="425" position="absolute" top="0" left="0" height="1262" width="892">
<image top="116" left="54" width="733" height="902" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-425_1.jpg"/>
<text top="57" left="54" width="757" height="20" font="2">Also,	under	the	<b>Collision	Presets</b>	panel,	it	is	important	to	select	the	<b>NoCollision</b>	option</text>
<text top="83" left="54" width="647" height="20" font="2">for	the	mesh	(not	<b>BlockAll</b>).	This	is	illustrated	in	the	following	screenshot:</text>
<text top="1087" left="54" width="675" height="20" font="2">If	you	select	<b>BlockAll</b>,	then	the	game	engine	will	automatically	resolve	all	the</text>
<text top="1113" left="54" width="744" height="20" font="2">interpenetration	between	the	sword	and	the	characters	by	pushing	away	things	that	the</text>
<text top="1139" left="54" width="756" height="20" font="2">sword	touches	whenever	it	is	swung.	The	result	is	that	your	characters	will	appear	to	go</text>
<text top="1165" left="54" width="301" height="20" font="2">flying	whenever	a	sword	is	swung.</text>
</page>
<page number="426" position="absolute" top="0" left="0" height="1262" width="892">
<image top="526" left="54" width="459" height="331" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-426_1.jpg"/>
<text top="61" left="54" width="115" height="32" font="7"><b>Sockets</b></text>
<text top="110" left="54" width="562" height="20" font="2">A	socket	in	UE4	is	a	receptacle	on	one	skeletal	mesh	for	another	</text>
<text top="115" left="616" width="52" height="14" font="5">Actor</text>
<text top="110" left="667" width="147" height="20" font="2">.	You	can	place	a</text>
<text top="136" left="54" width="775" height="20" font="2">socket	anywhere	on	a	skeletal	mesh	body.	After	you	have	correctly	placed	the	socket,	you</text>
<text top="162" left="54" width="162" height="20" font="2">can	attach	another	</text>
<text top="167" left="216" width="52" height="14" font="5">Actor</text>
<text top="162" left="268" width="238" height="20" font="2">	to	this	socket	in	UE4	code.</text>
<text top="199" left="54" width="763" height="20" font="2">For	example,	if	we	want	to	put	a	sword	in	our	monster’s	hand,	we’d	just	have	to	create	a</text>
<text top="225" left="54" width="777" height="20" font="2">socket	in	our	monster’s	hand.	We	can	attach	a	helmet	to	the	player	by	creating	a	socket	on</text>
<text top="251" left="54" width="77" height="20" font="2">his	head.</text>
<text top="289" left="54" width="568" height="22" font="8"><b>Creating	a	skeletal	mesh	socket	in	the	monster’s	hand</b></text>
<text top="327" left="54" width="712" height="20" font="2">To	attach	a	socket	to	the	monster’s	hand,	we	have	to	edit	the	skeletal	mesh	that	the</text>
<text top="353" left="54" width="313" height="20" font="2">monster	is	using.	Since	we	used	the	</text>
<text top="358" left="367" width="114" height="14" font="5">Mixamo_Adam</text>
<text top="353" left="481" width="341" height="20" font="2">	skeletal	mesh	for	the	monster,	we	have</text>
<text top="379" left="54" width="303" height="20" font="2">to	open	and	edit	this	skeletal	mesh.</text>
<text top="416" left="54" width="771" height="20" font="2">To	do	so,	double-click	on	the	<b>Mixamo_Adam</b>	skeletal	mesh	in	the	<b>Content	Browser</b>	tab</text>
<text top="442" left="54" width="773" height="20" font="2">(this	will	appear	as	the	T-pose)	to	open	the	skeletal	mesh	editor.	If	you	don’t	see	<b>Mixamo</b></text>
<text top="468" left="54" width="736" height="19" font="3"><b>Adam</b>	in	your	<b>Content	Browser</b>	tab,	make	sure	that	you	have	imported	the	<b>Mixamo</b></text>
<text top="494" left="54" width="605" height="19" font="3"><b>Animation	Pack</b>	file	into	your	project	from	the	Unreal	Launcher	app.</text>
<text top="894" left="78" width="737" height="20" font="4"><i>Edit	the	Maximo_Adam	mesh	by	double-clicking	on	the	Maximo_Adam	skeletal	mesh</i></text>
<text top="919" left="420" width="53" height="20" font="4"><i>object</i></text>
<text top="989" left="54" width="755" height="20" font="2">Click	on	<b>Skeleton</b>	at	the	top-right	corner	of	the	screen.	Scroll	down	the	tree	of	bones	in</text>
<text top="1015" left="54" width="782" height="20" font="2">the	left-hand	side	panel	until	you	find	the	<b>RightHand</b>	bone.	We	will	attach	a	socket	to	this</text>
<text top="1040" left="54" width="712" height="20" font="2">bone.	Right-click	on	the	<b>RightHand</b>	bone	and	select	<b>Add	Socket</b>,	as	shown	in	the</text>
<text top="1066" left="54" width="186" height="20" font="2">following	screenshot:</text>
</page>
<page number="427" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="785" height="394" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-427_1.jpg"/>
<image top="575" left="54" width="392" height="131" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-427_2.jpg"/>
<text top="517" left="54" width="762" height="20" font="2">You	can	leave	the	default	name	(<b>RightHandSocket</b>)	or	rename	the	socket	if	you	like,	as</text>
<text top="542" left="54" width="302" height="20" font="2">shown	in	the	following	screenshot:</text>
<text top="775" left="54" width="426" height="20" font="2">Next,	we	need	to	add	a	sword	to	the	actor’s	hand.</text>
<text top="813" left="54" width="352" height="22" font="8"><b>Attaching	the	sword	to	the	model</b></text>
<text top="851" left="54" width="752" height="20" font="2">With	the	Adam	skeletal	mesh	open,	find	the	<b>RightHandSocket</b>	option	in	the	tree	view.</text>
<text top="877" left="54" width="744" height="20" font="2">Since	Adam	swings	with	his	right	hand,	you	should	attach	the	sword	to	his	right	hand.</text>
<text top="903" left="54" width="730" height="20" font="2">Drag	and	drop	your	sword	model	into	the	<b>RightHandSocket</b>	option.	You	should	see</text>
<text top="929" left="54" width="742" height="20" font="2">Adam	grip	the	sword	in	the	image	of	the	model	at	the	right-hand	side	of	the	following</text>
<text top="955" left="54" width="97" height="20" font="2">screenshot:</text>
</page>
<page number="428" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="785" height="323" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-428_1.jpg"/>
<image top="529" left="54" width="306" height="235" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-428_2.jpg"/>
<text top="445" left="54" width="745" height="20" font="2">Now,	click	on	<b>RightHandSocket</b>	and	zoom	in	on	Adam’s	hand.	We	need	to	adjust	the</text>
<text top="471" left="54" width="777" height="20" font="2">positioning	of	the	socket	in	the	preview	so	that	the	sword	fits	in	it	correctly.	Use	the	move</text>
<text top="497" left="54" width="680" height="20" font="2">and	rotate	manipulators	to	line	the	sword	up	so	that	it	fits	in	his	hand	correctly.</text>
<text top="802" left="136" width="621" height="20" font="4"><i>Positioning	the	socket	in	the	right	hand	so	that	the	sword	rests	correctly</i></text>
<text top="872" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="911" left="54" width="147" height="19" font="3"><b>A	real-world	tip</b></text>
<text top="948" left="54" width="694" height="20" font="2">If	you	have	several	sword	models	that	you	want	to	switch	in	and	out	of	the	same</text>
<text top="974" left="54" width="761" height="19" font="3"><b>RightHandSocket</b>,	you	will	need	to	ensure	quite	a	bit	of	uniformity	(lack	of	anomalies)</text>
<text top="999" left="54" width="630" height="20" font="2">between	the	different	swords	that	are	supposed	to	go	in	that	same	socket.</text>
<text top="1036" left="54" width="765" height="20" font="2">You	can	preview	your	animations	with	the	sword	in	the	hand	by	going	to	the	<b>Animation</b></text>
<text top="1062" left="54" width="343" height="20" font="2">tab	in	the	top-right	corner	of	the	screen.</text>
</page>
<page number="429" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="785" height="428" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-429_1.jpg"/>
<text top="518" left="298" width="296" height="20" font="4"><i>Equipping	the	model	with	a	sword</i></text>
<text top="587" left="54" width="728" height="20" font="2">However,	if	you	launch	your	game,	Adam	won’t	be	holding	a	sword.	That’s	because</text>
<text top="613" left="54" width="618" height="20" font="2">adding	the	sword	to	the	socket	in	<i>Persona</i>	is	for	preview	purposes	only.</text>
<text top="651" left="54" width="403" height="22" font="8"><b>Code	to	equip	the	player	with	a	sword</b></text>
<text top="689" left="54" width="740" height="20" font="2">To	equip	your	player	with	a	sword	from	the	code	and	permanently	bind	it	to	the	actor,</text>
<text top="715" left="54" width="120" height="20" font="2">instantiate	an	</text>
<text top="720" left="174" width="124" height="14" font="5">AMeleeWeapon</text>
<text top="715" left="298" width="215" height="20" font="2">	instance	and	attach	it	to	</text>
<text top="720" left="513" width="155" height="14" font="5">RightHandSocket</text>
<text top="715" left="668" width="152" height="20" font="2">	after	the	monster</text>
<text top="741" left="54" width="312" height="20" font="2">instance	is	initialized.	We	do	this	in	</text>
<text top="746" left="366" width="269" height="14" font="5">PostInitializeComponents()</text>
<text top="741" left="636" width="186" height="20" font="2">	since	in	this	function</text>
<text top="767" left="54" width="32" height="20" font="2">the	</text>
<text top="772" left="86" width="41" height="14" font="5">Mesh</text>
<text top="767" left="127" width="400" height="20" font="2">	object	will	have	been	fully	initialized	already.</text>
<text top="804" left="54" width="55" height="20" font="2">In	the	</text>
<text top="808" left="109" width="93" height="14" font="5">Monster.h</text>
<text top="804" left="202" width="454" height="20" font="2">	file,	add	a	hook	to	select	the	<b>Blueprint</b>	class	name	(</text>
<text top="808" left="657" width="62" height="14" font="5">UClass</text>
<text top="804" left="719" width="102" height="20" font="2">)	of	a	melee</text>
<text top="830" left="54" width="576" height="20" font="2">weapon	to	use.	Also	add	a	hook	for	a	variable	to	actually	store	the	</text>
<text top="834" left="630" width="114" height="14" font="5">MeleeWeapon</text>
<text top="830" left="744" width="76" height="20" font="2">	instance</text>
<text top="856" left="54" width="220" height="20" font="2">using	the	following	code:</text>
<text top="899" left="54" width="425" height="14" font="5">//	The	MeleeWeapon	class	the	monster	uses</text>
<text top="920" left="54" width="466" height="14" font="5">//	If	this	is	not	set,	he	uses	a	melee	attack</text>
<text top="940" left="54" width="766" height="14" font="5">UPROPERTY(EditAnywhere,	BlueprintReadWrite,	Category	=		MonsterProperties)</text>
<text top="961" left="54" width="228" height="14" font="5">UClass*	BPMeleeWeapon;</text>
<text top="1002" left="54" width="601" height="14" font="5">//	The	MeleeWeapon	instance	(set	if	the	character	is	using</text>
<text top="1022" left="54" width="186" height="14" font="5">//	a	melee	weapon)</text>
<text top="1043" left="54" width="207" height="14" font="5">AActor*	MeleeWeapon;</text>
<text top="1074" left="54" width="138" height="20" font="2">Now,	select	the	</text>
<text top="1078" left="192" width="135" height="14" font="5">BP_MeleeSword</text>
<text top="1074" left="326" width="377" height="20" font="2">	blueprint	in	your	monster’s	blueprint	class.</text>
<text top="1111" left="54" width="743" height="20" font="2">In	the	C++	code,	you	need	to	instantiate	the	weapon.	To	do	so,	we	need	to	declare	and</text>
<text top="1137" left="54" width="113" height="20" font="2">implement	a	</text>
<text top="1141" left="167" width="249" height="14" font="5">PostInitializeComponents</text>
<text top="1137" left="415" width="145" height="20" font="2">	function	for	the	</text>
<text top="1141" left="560" width="73" height="14" font="5">Monster</text>
<text top="1137" left="633" width="82" height="20" font="2">	class.	In	</text>
<text top="1141" left="714" width="93" height="14" font="5">Monster.h</text>
<text top="1137" left="808" width="5" height="20" font="2">,</text>
<text top="1163" left="54" width="242" height="20" font="2">add	a	prototype	declaration:</text>
</page>
<page number="430" position="absolute" top="0" left="0" height="1262" width="892">
<image top="721" left="54" width="488" height="425" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-430_1.jpg"/>
<text top="57" left="54" width="508" height="14" font="5">virtual	void	PostInitializeComponents()	override;</text>
<text top="93" left="54" width="249" height="14" font="5">PostInitializeComponents</text>
<text top="89" left="303" width="535" height="20" font="2">	runs	after	the	monster	object’s	constructor	has	completed	and</text>
<text top="115" left="54" width="779" height="20" font="2">all	the	components	of	the	object	are	initialized	(including	the	blueprint	construction).	So	it</text>
<text top="141" left="54" width="469" height="20" font="2">is	the	perfect	time	to	check	whether	the	monster	has	a	</text>
<text top="145" left="523" width="114" height="14" font="5">MeleeWeapon</text>
<text top="141" left="637" width="200" height="20" font="2">	blueprint	attached	to	it</text>
<text top="167" left="54" width="767" height="20" font="2">or	not	and	to	instantiate	this	weapon	if	it	does.	The	following	code	is	added	to	instantiate</text>
<text top="192" left="54" width="158" height="20" font="2">the	weapon	in	the	</text>
<text top="197" left="212" width="114" height="14" font="5">Monster.cpp</text>
<text top="192" left="326" width="164" height="20" font="2">	implementation	of</text>
<text top="223" left="54" width="373" height="14" font="5">AMonster::PostInitializeComponents()</text>
<text top="218" left="427" width="6" height="20" font="2">:</text>
<text top="262" left="54" width="425" height="14" font="5">void	AMonster::PostInitializeComponents()</text>
<text top="282" left="54" width="10" height="14" font="5">{</text>
<text top="303" left="54" width="373" height="14" font="5">		Super::PostInitializeComponents();</text>
<text top="344" left="54" width="559" height="14" font="5">		//	instantiate	the	melee	weapon	if	a	bp	was	selected</text>
<text top="364" left="54" width="218" height="14" font="5">		if(	BPMeleeWeapon	)</text>
<text top="385" left="54" width="31" height="14" font="5">		{</text>
<text top="405" left="54" width="570" height="14" font="5">				MeleeWeapon	=	GetWorld()-&gt;SpawnActor&lt;AMeleeWeapon&gt;(</text>
<text top="426" left="54" width="466" height="14" font="5">						BPMeleeWeapon,	FVector(),	FRotator()	);</text>
<text top="467" left="54" width="218" height="14" font="5">				if(	MeleeWeapon	)</text>
<text top="487" left="54" width="52" height="14" font="5">				{</text>
<text top="508" left="54" width="684" height="14" font="5">						const	USkeletalMeshSocket	*socket	=	Mesh-&gt;GetSocketByName(		</text>
<text top="528" left="54" width="476" height="14" font="5">&#34;RightHandSocket&#34;	);	//	be	sure	to	use	correct</text>
<text top="549" left="54" width="435" height="14" font="5">																											//	socket	name!</text>
<text top="570" left="54" width="487" height="14" font="5">						socket-&gt;AttachActor(	MeleeWeapon,	Mesh	);</text>
<text top="590" left="54" width="52" height="14" font="5">				}</text>
<text top="611" left="54" width="31" height="14" font="5">		}</text>
<text top="631" left="54" width="10" height="14" font="5">}</text>
<text top="662" left="54" width="445" height="20" font="2">The	monsters	will	now	start	with	swords	in	hand	if	</text>
<text top="667" left="499" width="135" height="14" font="5">BPMeleeWeapon</text>
<text top="662" left="633" width="163" height="20" font="2">	is	selected	for	that</text>
<text top="688" left="54" width="173" height="20" font="2">monster’s	blueprint.</text>
<text top="1182" left="330" width="233" height="20" font="4"><i>Monsters	holding	weapons</i></text>
</page>
<page number="431" position="absolute" top="0" left="0" height="1262" width="892">
<text top="91" left="54" width="338" height="22" font="8"><b>Triggering	the	attack	animation</b></text>
<text top="130" left="54" width="452" height="20" font="2">By	default,	there	is	no	connection	between	our	C++	</text>
<text top="134" left="506" width="73" height="14" font="5">Monster</text>
<text top="130" left="579" width="206" height="20" font="2">	class	and	triggering	the</text>
<text top="156" left="54" width="322" height="20" font="2">attack	animation;	in	other	words,	the	</text>
<text top="160" left="376" width="176" height="14" font="5">MixamoAnimBP_Adam</text>
<text top="156" left="552" width="254" height="20" font="2">	class	has	no	way	of	knowing</text>
<text top="182" left="54" width="334" height="20" font="2">when	the	monster	is	in	the	attack	state.</text>
<text top="218" left="54" width="650" height="20" font="2">Therefore,	we	need	to	update	the	animation	blueprint	of	the	Adam	skeleton</text>
<text top="244" left="54" width="7" height="20" font="2">(</text>
<text top="249" left="61" width="176" height="14" font="5">MixamoAnimBP_Adam</text>
<text top="244" left="237" width="227" height="20" font="2">)	to	include	a	query	in	the	</text>
<text top="249" left="464" width="73" height="14" font="5">Monster</text>
<text top="244" left="537" width="274" height="20" font="2">	class	variable	listing	and	check</text>
<text top="270" left="54" width="779" height="20" font="2">whether	the	monster	is	in	an	attacking	state.	We	haven’t	worked	with	animation	blueprints</text>
<text top="296" left="54" width="778" height="20" font="2">(or	blueprints	in	general)	in	this	book	before,	but	follow	it	step	by	step	and	you	should	see</text>
<text top="322" left="54" width="144" height="20" font="2">it	come	together.</text>
<text top="360" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="399" left="54" width="743" height="20" font="2">I	will	introduce	blueprints	terminology	gently	here,	but	I	will	encourage	you	to	have	a</text>
<text top="425" left="54" width="328" height="20" font="2"><a href="https://www.youtube.com/playlist?list=PLZlv_N0_O1gbYMYfhhdzfW1tUV4jU0YxH">look	at	Zak	Parrish’s	tutorial	series	at	</a></text>
<text top="425" left="382" width="302" height="20" font="1"><a href="https://www.youtube.com/playlist?list=PLZlv_N0_O1gbYMYfhhdzfW1tUV4jU0YxH">https://www.youtube.com/playlist?</a></text>
<text top="451" left="54" width="450" height="20" font="1"><a href="https://www.youtube.com/playlist?list=PLZlv_N0_O1gbYMYfhhdzfW1tUV4jU0YxH">list=PLZlv_N0_O1gbYMYfhhdzfW1tUV4jU0YxH</a></text>
<text top="451" left="504" width="249" height="20" font="2"><a href="https://www.youtube.com/playlist?list=PLZlv_N0_O1gbYMYfhhdzfW1tUV4jU0YxH">	for	your	first	introdu</a>ction	to</text>
<text top="477" left="54" width="92" height="20" font="2">blueprints.</text>
<text top="514" left="54" width="149" height="19" font="3"><b>Blueprint	basics</b></text>
<text top="550" left="54" width="690" height="20" font="2">A	UE4	blueprint	is	a	visual	realization	of	the	code	(not	to	be	confused	with	how</text>
<text top="576" left="54" width="768" height="20" font="2">sometimes	people	say	that	a	C++	class	is	a	metaphorical	blueprint	of	a	class	instance).	In</text>
<text top="602" left="54" width="778" height="20" font="2">UE4	blueprints,	instead	of	actually	writing	code,	you	drag	and	drop	elements	onto	a	graph</text>
<text top="628" left="54" width="725" height="20" font="2">and	connect	them	to	achieve	desired	play.	By	connecting	the	right	nodes	to	the	right</text>
<text top="654" left="54" width="525" height="20" font="2">elements,	you	can	program	anything	you	want	in	your	game.</text>
<text top="692" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="730" left="54" width="763" height="20" font="2">This	book	does	not	encourage	the	use	of	blueprints	since	we	are	trying	to	encourage	you</text>
<text top="756" left="54" width="751" height="20" font="2">to	write	your	own	code	instead.	Animations,	however,	are	best	worked	with	blueprints,</text>
<text top="782" left="54" width="450" height="20" font="2">because	that	is	what	artists	and	designers	will	know.</text>
<text top="819" left="54" width="722" height="20" font="2">Let’s	start	writing	a	sample	blueprint	to	get	a	feel	how	they	work.	First,	click	on	the</text>
<text top="845" left="54" width="780" height="20" font="2">blueprint	menu	bar	at	the	top	and	select	<b>Open	Level	Blueprint</b>,	as	shown	in	the	following</text>
<text top="871" left="54" width="97" height="20" font="2">screenshot:</text>
</page>
<page number="432" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="312" height="294" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-432_1.jpg"/>
<image top="474" left="54" width="785" height="542" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-432_2.jpg"/>
<text top="416" left="54" width="763" height="20" font="2">The	<b>Level	Blueprint</b>	option	executes	automatically	when	you	begin	the	level.	Once	you</text>
<text top="442" left="54" width="784" height="20" font="2">open	this	window,	you	should	see	a	blank	slate	to	create	your	gameplay	on,	as	shown	here:</text>
<text top="1085" left="54" width="469" height="20" font="2">Right-click	anywhere	on	the	graph	paper.	Start	typing	</text>
<text top="1089" left="523" width="52" height="14" font="5">begin</text>
<text top="1085" left="575" width="260" height="20" font="2">	and	click	on	the	<b>Event	Begin</b></text>
<text top="1111" left="54" width="727" height="19" font="3"><b>Play</b>	option	from	the	drop-down	list	that	appears.	Ensure	that	the	<b>Context	Sensitive</b></text>
<text top="1137" left="54" width="515" height="20" font="2">checkbox	is	checked,	as	shown	in	the	following	screenshot:</text>
</page>
<page number="433" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="579" height="238" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-433_1.jpg"/>
<image top="444" left="54" width="235" height="117" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-433_2.jpg"/>
<image top="714" left="54" width="785" height="164" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-433_3.jpg"/>
<text top="360" left="54" width="742" height="20" font="2">Immediately	after	you	click	on	the	<b>Event	Begin	Play</b>	option,	a	red	box	will	appear	on</text>
<text top="386" left="54" width="752" height="20" font="2">your	screen.	It	has	a	single	white	pin	at	the	right-hand	side.	This	is	called	the	execution</text>
<text top="412" left="54" width="167" height="20" font="2">pin,	as	shown	here:</text>
<text top="630" left="54" width="785" height="20" font="2">The	first	thing	that	you	need	to	know	about	animation	blueprints	is	the	white	pin	execution</text>
<text top="656" left="54" width="743" height="20" font="2">path	(the	white	line).	If	you’ve	seen	a	blueprint	graph	before,	you	must	have	noticed	a</text>
<text top="682" left="54" width="615" height="20" font="2">white	line	going	through	the	graph,	as	shown	in	the	following	diagram:</text>
<text top="946" left="54" width="754" height="20" font="2">The	white	pin	execution	path	is	pretty	much	equivalent	to	having	lines	of	code	lined	up</text>
<text top="972" left="54" width="766" height="20" font="2">and	run	one	after	the	other.	The	white	line	determines	which	nodes	will	get	executed	and</text>
<text top="998" left="54" width="766" height="20" font="2">in	what	order.	If	a	node	does	not	have	a	white	execution	pin	attached	to	it,	then	that	node</text>
<text top="1024" left="54" width="234" height="20" font="2">will	not	get	executed	at	all.</text>
<text top="1061" left="54" width="636" height="20" font="2">Drag	off	the	white	execution	pin	from	<b>Event	Begin	Play</b>.	Start	by	typing	</text>
<text top="1065" left="690" width="145" height="14" font="5">draw	debug	box</text>
<text top="1087" left="54" width="778" height="20" font="2">in	the	<b>Executable	actions</b>	dialog.	Select	the	first	thing	that	pops	up	(<b>f</b>	<b>Draw	Debug	Box</b>),</text>
<text top="1113" left="54" width="128" height="20" font="2">as	shown	here:</text>
</page>
<page number="434" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="692" height="226" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-434_1.jpg"/>
<image top="458" left="54" width="578" height="346" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-434_2.jpg"/>
<text top="348" left="54" width="759" height="20" font="2">Fill	in	some	details	for	how	you	want	the	box	to	look.	Here,	I	selected	the	color	blue	for</text>
<text top="374" left="54" width="781" height="20" font="2">the	box,	the	center	of	the	box	at	(0,	0,	100),	the	size	of	the	box	to	be	(200,	200,	200),	and	a</text>
<text top="400" left="54" width="767" height="20" font="2">duration	of	180	seconds	(be	sure	to	enter	a	duration	that	is	long	enough	to	see	the	result),</text>
<text top="426" left="54" width="326" height="20" font="2">as	shown	in	the	following	screenshot:</text>
<text top="873" left="54" width="747" height="20" font="2">Now	click	on	the	<b>Play</b>	button	to	realize	the	graph.	Remember	that	you	have	to	find	the</text>
<text top="899" left="54" width="310" height="20" font="2">world’s	origin	to	see	the	debug	box.</text>
<text top="936" left="54" width="766" height="20" font="2">Find	the	world’s	origin	by	placing	a	golden	egg	at	(0,	0,	(some	z	value)),	as	shown	in	the</text>
<text top="962" left="54" width="186" height="20" font="2">following	screenshot:</text>
</page>
<page number="435" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="785" height="479" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-435_1.jpg"/>
<image top="632" left="54" width="270" height="247" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-435_2.jpg"/>
<text top="600" left="54" width="360" height="20" font="2">This	is	how	the	box	will	look	in	the	level:</text>
<text top="916" left="296" width="301" height="20" font="4"><i>A	debug	box	rendered	at	the	origin</i></text>
<text top="986" left="54" width="497" height="19" font="3"><b>Modifying	the	animation	blueprint	for	Mixamo	Adam</b></text>
<text top="1022" left="54" width="718" height="20" font="2">To	integrate	our	attack	animation,	we	have	to	modify	the	blueprint.	Under	<b>Content</b></text>
<text top="1048" left="54" width="163" height="19" font="3"><b>Browser</b>,	open	up	</text>
<text top="1052" left="217" width="176" height="14" font="5">MixamoAnimBP_Adam</text>
<text top="1048" left="393" width="5" height="20" font="2">.</text>
<text top="1085" left="54" width="768" height="20" font="2">The	first	thing	you’ll	notice	is	that	the	graph	has	two	sections:	a	top	section	and	a	bottom</text>
<text top="1111" left="54" width="748" height="20" font="2">section.	The	top	section	is	marked	“<b>Basic	Character	movement</b>…,”	while	the	bottom</text>
<text top="1137" left="54" width="776" height="20" font="2">section	says	“<b>Mixamo	Example	Character	Animation</b>….”	Basic	character	movement	is</text>
<text top="1163" left="54" width="773" height="20" font="2">in	charge	of	the	walking	and	running	movements	of	the	model.	We	will	be	working	in	the</text>
<text top="1189" left="54" width="729" height="19" font="3"><b>Mixamo	Example	Character	Animation	with	Attack	and	Jump</b>	section,	which	is</text>
</page>
<page number="436" position="absolute" top="0" left="0" height="1262" width="892">
<image top="116" left="54" width="785" height="318" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-436_1.jpg"/>
<text top="57" left="54" width="776" height="20" font="2">responsible	for	the	attack	animation.	We	will	be	working	in	the	latter	section	of	the	graph,</text>
<text top="83" left="54" width="302" height="20" font="2">shown	in	the	following	screenshot:</text>
<text top="502" left="54" width="783" height="20" font="2">When	you	first	open	the	graph,	it	starts	out	by	zooming	in	on	a	section	near	the	bottom.	To</text>
<text top="528" left="54" width="737" height="20" font="2">scroll	up,	right-click	the	mouse	and	drag	it	upwards.	You	can	also	zoom	out	using	the</text>
<text top="554" left="54" width="781" height="20" font="2">mouse	wheel	or	by	holding	down	the	<i>Alt</i>	key	and	the	right	mouse	button	while	moving	the</text>
<text top="580" left="54" width="89" height="20" font="2">mouse	up.</text>
<text top="617" left="54" width="776" height="20" font="2">Before	proceeding,	you	might	want	to	duplicate	the	<b>MixamoAnimBP_Adam</b>	resource	so</text>
<text top="643" left="54" width="745" height="20" font="2">that	you	don’t	damage	the	original,	in	case	you	need	to	go	back	and	change	something</text>
<text top="669" left="54" width="764" height="20" font="2">later.	This	allows	you	to	easily	go	back	and	correct	things	if	you	find	that	you’ve	made	a</text>
<text top="695" left="54" width="780" height="20" font="2">mistake	in	one	of	your	modifications,	without	having	to	reinstall	a	fresh	copy	of	the	whole</text>
<text top="721" left="54" width="317" height="20" font="2">animation	package	into	your	project.</text>
</page>
<page number="437" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="274" height="462" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-437_1.jpg"/>
<text top="552" left="54" width="784" height="20" font="4"><i>Making	a	duplicate	of	the	MixamoAnimBP_Adam	resource	to	avoid	damaging	the	original</i></text>
<text top="578" left="425" width="43" height="20" font="4"><i>asset</i></text>
<text top="649" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="687" left="54" width="771" height="20" font="2">When	assets	are	added	to	a	project	from	the	Unreal	Launcher,	a	copy	of	the	original	asset</text>
<text top="713" left="54" width="773" height="20" font="2">is	made,	so	you	can	modify	<b>MixamoAnimBP_Adam</b>	in	your	project	now	and	get	a	fresh</text>
<text top="739" left="54" width="417" height="20" font="2">copy	of	the	original	assets	in	a	new	project	later.</text>
<text top="776" left="54" width="778" height="20" font="2">We’re	going	to	do	only	a	few	things	to	make	Adam	swing	the	sword	when	he	is	attacking.</text>
<text top="802" left="54" width="165" height="20" font="2">Let’s	do	it	in	order.</text>
<text top="838" left="69" width="375" height="20" font="2">1.	 Deleting	the	node	that	says	<b>Attacking?</b>:</text>
</page>
<page number="438" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="694" height="323" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-438_1.jpg"/>
<image top="503" left="97" width="742" height="232" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-438_2.jpg"/>
<text top="445" left="69" width="698" height="20" font="2">2.	 Rearrange	the	nodes,	as	follows,	with	the	<b>Enable	Attack</b>	node	by	itself	at	the</text>
<text top="471" left="97" width="67" height="20" font="2">bottom:</text>
<text top="805" left="69" width="770" height="20" font="2">3.	 Next	we’re	going	to	handle	the	monster	that	this	animation	is	animating.	Scroll	up	the</text>
<text top="831" left="97" width="691" height="20" font="2">graph	a	bit	and	drag	the	blue	dot	marked	as	<b>Return	Value</b>	in	the	<b>Try	Get	Pawn</b></text>
<text top="857" left="97" width="711" height="19" font="3"><b>Owner</b>	dialog.	Drop	it	into	your	graph,	and	when	the	pop-up	menu	appears,	select</text>
<text top="883" left="97" width="731" height="19" font="3"><b>Cast	to	Monster</b>	(ensure	that	<b>Context	Sensitive</b>	is	checked,	or	the	<b>Cast	to	Monster</b></text>
<text top="909" left="97" width="583" height="20" font="2">option	will	not	appear).	The	<b>Try	Get	Pawn	Owner</b>	option	gets	the	</text>
<text top="913" left="680" width="73" height="14" font="5">Monster</text>
<text top="909" left="753" width="76" height="20" font="2">	instance</text>
<text top="935" left="97" width="364" height="20" font="2">that	owns	the	animation,	which	is	just	the	</text>
<text top="939" left="461" width="83" height="14" font="5">AMonster</text>
<text top="935" left="544" width="250" height="20" font="2">	class	object,	as	shown	in	the</text>
<text top="961" left="97" width="186" height="20" font="2">following	screenshot:</text>
</page>
<page number="439" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="628" height="679" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-439_1.jpg"/>
<text top="802" left="69" width="768" height="20" font="2">4.	 Click	on	<b>+</b>	in	the	<b>Sequence</b>	dialog	and	drag	another	execution	pin	from	the	<b>Sequence</b></text>
<text top="828" left="97" width="718" height="20" font="2">group	to	the	<b>Cast	to	Monster</b>	node	instance,	as	shown	in	the	following	screenshot.</text>
<text top="854" left="97" width="610" height="20" font="2">This	ensures	that	the	<b>Cast	to	Monster</b>	instance	actually	gets	executed.</text>
</page>
<page number="440" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="694" height="547" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-440_1.jpg"/>
<image top="727" left="97" width="742" height="193" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-440_2.jpg"/>
<text top="669" left="69" width="718" height="20" font="2">5.	 The	next	step	is	to	pull	out	the	pin	from	the	<b>As	Monster</b>	terminal	of	the	<b>Cast	to</b></text>
<text top="695" left="97" width="625" height="19" font="3"><b>Monster</b>	node	and	look	for	the	<b>Is	in	Attack	Range	Of	Player</b>	property:</text>
<text top="990" left="69" width="734" height="20" font="2">6.	 Take	the	white	execution	pin	from	the	<b>Cast	to	Monster</b>	node	at	the	left-hand	side</text>
<text top="1016" left="97" width="678" height="20" font="2">and	drop	it	into	the	<b>Is	in	Attack	Range	Of	Player</b>	node	at	the	right-hand	side:</text>
</page>
<page number="441" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="540" height="154" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-441_1.jpg"/>
<image top="372" left="97" width="742" height="131" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-441_2.jpg"/>
<text top="277" left="97" width="704" height="20" font="2">This	ensures	a	transfer	of	control	from	the	<b>Cast	to	Monster</b>	operation	to	the	<b>Is	in</b></text>
<text top="303" left="97" width="274" height="19" font="3"><b>Attack	Range	Of	Player</b>	node.</text>
<text top="339" left="69" width="589" height="20" font="2">7.	 Pull	the	white	and	red	pins	over	to	the	<b>SET</b>	node,	as	shown	here:</text>
<text top="595" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="633" left="54" width="700" height="20" font="2">The	equivalent	pseudocode	of	the	preceding	blueprint	is	something	similar	to	the</text>
<text top="659" left="54" width="90" height="20" font="2">following:</text>
<text top="702" left="54" width="404" height="14" font="5">if(	Monster.isInAttackRangeOfPlayer()	)</text>
<text top="723" left="54" width="10" height="14" font="5">{</text>
<text top="743" left="54" width="445" height="14" font="5">		Monster.Animation	=	The	Attack	Animation;</text>
<text top="764" left="54" width="10" height="14" font="5">}</text>
<text top="795" left="54" width="779" height="20" font="2">Test	your	animation.	The	monster	should	swing	only	when	he	is	within	the	player’s	range.</text>
<text top="832" left="54" width="225" height="19" font="3"><b>Code	to	swing	the	sword</b></text>
<text top="869" left="54" width="781" height="20" font="2">We	want	to	add	an	animation	notify	event	when	the	sword	is	swung.	First,	declare	and	add</text>
<text top="895" left="54" width="359" height="20" font="2">a	blueprint	callable	C++	function	to	your	</text>
<text top="899" left="413" width="73" height="14" font="5">Monster</text>
<text top="895" left="486" width="53" height="20" font="2">	class:</text>
<text top="938" left="54" width="166" height="14" font="5">//	in	Monster.h:</text>
<text top="958" left="54" width="539" height="14" font="5">UFUNCTION(	BlueprintCallable,	Category	=	Collision	)</text>
<text top="979" left="54" width="186" height="14" font="5">void	SwordSwung();</text>
<text top="1010" left="54" width="39" height="20" font="2">The	</text>
<text top="1015" left="93" width="176" height="14" font="5">BlueprintCallable</text>
<text top="1010" left="269" width="565" height="20" font="2">	statement	means	that	it	will	be	possible	to	call	this	function	from</text>
<text top="1036" left="54" width="234" height="20" font="2">blueprints.	In	other	words,	</text>
<text top="1041" left="288" width="124" height="14" font="5">SwordSwung()</text>
<text top="1036" left="412" width="416" height="20" font="2">	will	be	a	C++	function	that	we	can	invoke	from</text>
<text top="1062" left="54" width="288" height="20" font="2">a	blueprints	node,	as	shown	here:</text>
<text top="1105" left="54" width="176" height="14" font="5">//	in	Monster.cpp</text>
<text top="1126" left="54" width="280" height="14" font="5">void	AMonster::SwordSwung()</text>
<text top="1146" left="54" width="10" height="14" font="5">{</text>
<text top="1167" left="54" width="197" height="14" font="5">		if(	MeleeWeapon	)</text>
<text top="1187" left="54" width="31" height="14" font="5">		{</text>
</page>
<page number="442" position="absolute" top="0" left="0" height="1262" width="892">
<image top="292" left="54" width="491" height="603" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-442_1.jpg"/>
<image top="996" left="54" width="119" height="68" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-442_2.jpg"/>
<text top="57" left="54" width="259" height="14" font="5">				MeleeWeapon-&gt;Swing();</text>
<text top="78" left="54" width="31" height="14" font="5">		}</text>
<text top="99" left="54" width="10" height="14" font="5">}</text>
<text top="130" left="54" width="752" height="20" font="2">Next	open	the	<b>Mixamo_Adam_Sword_Slash</b>	animation	by	double-clicking	on	it	from</text>
<text top="156" left="54" width="338" height="20" font="2">your	<b>Content	Browser</b>	(it	should	be	in</text>
<text top="182" left="54" width="770" height="19" font="3"><b>MixamoAnimPack/Mixamo_Adam/Anims/Mixamo_Adam_Sword_Slash</b>).	Scrub	the</text>
<text top="208" left="54" width="697" height="20" font="2">animation	to	the	point	where	Adam	starts	swinging	his	sword.	Right-click	on	the</text>
<text top="233" left="54" width="737" height="20" font="2">animation	bar	and	select	<b>New	Notify</b>	under	<b>Add	Notify…</b>,	as	shown	in	the	following</text>
<text top="259" left="54" width="97" height="20" font="2">screenshot:</text>
<text top="964" left="54" width="194" height="20" font="2">Name	the	notification	</text>
<text top="968" left="248" width="104" height="14" font="5">SwordSwung</text>
<text top="964" left="351" width="6" height="20" font="2">:</text>
<text top="1133" left="54" width="733" height="20" font="2">The	notification	name	should	appear	in	your	animation’s	timeline,	shown	as	follows:</text>
</page>
<page number="443" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="504" height="79" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-443_1.jpg"/>
<image top="259" left="54" width="785" height="167" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-443_2.jpg"/>
<image top="746" left="54" width="324" height="323" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-443_3.jpg"/>
<text top="201" left="54" width="742" height="20" font="2">Save	the	animation	and	then	open	up	your	version	of	<b>MixamoAnimBP_Adam</b>	again.</text>
<text top="227" left="54" width="558" height="20" font="2">Underneath	the	<b>SET</b>	group	of	nodes,	create	the	following	graph:</text>
<text top="496" left="54" width="745" height="20" font="2">The	<b>AnimNotify_SwordSwung</b>	node	appears	when	you	right-click	in	the	graph	(with</text>
<text top="522" left="54" width="400" height="19" font="3"><b>Context	Sensitive</b>	turned	on)	and	start	typing	</text>
<text top="526" left="454" width="104" height="14" font="5">SwordSwung</text>
<text top="522" left="557" width="271" height="20" font="2">.	The	<b>Cast	To	Monster</b>	node	is</text>
<text top="548" left="54" width="715" height="20" font="2">again	fed	in	from	the	<b>Try	Get	Pawn	Owner</b>	node	as	in	step	2	of	the	<i>Modifying	the</i></text>
<text top="574" left="54" width="755" height="20" font="4"><i>animation	blueprint	for	Mixamo	Adam</i>	section.	Finally,	<b>Sword	Swung</b>	is	our	blueprint-</text>
<text top="600" left="54" width="248" height="20" font="2">callable	C++	function	in	the	</text>
<text top="604" left="302" width="83" height="14" font="5">AMonster</text>
<text top="600" left="385" width="53" height="20" font="2">	class.</text>
<text top="636" left="54" width="747" height="20" font="2">If	you	start	the	game	now,	your	monsters	will	execute	their	attack	animation	whenever</text>
<text top="662" left="54" width="734" height="20" font="2">they	actually	attack.	When	the	sword’s	bounding	box	comes	in	contact	with	you,	you</text>
<text top="688" left="54" width="728" height="20" font="2">should	see	your	HP	bar	go	down	a	bit	(recall	that	the	HP	bar	was	added	at	the	end	of</text>
<text top="714" left="54" width="85" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#268">Chapter	8</a></text>
<text top="714" left="139" width="311" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#268">,</a>	<i>Actors	and	Pawns</i>,	as	an	exercise).</text>
<text top="1106" left="317" width="258" height="20" font="4"><i>Monsters	attacking	the	player</i></text>
</page>
<page number="444" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="421" height="32" font="7"><b>Projectile	or	ranged	attacks</b></text>
<text top="110" left="54" width="743" height="20" font="2">Ranged	attacks	usually	involve	a	projectile	of	some	sort.	Projectiles	are	things	such	as</text>
<text top="136" left="54" width="778" height="20" font="2">bullets,	but	they	can	also	include	things	such	as	lightning	magic	attacks	or	fireball	attacks.</text>
<text top="162" left="54" width="779" height="20" font="2">To	program	a	projectile	attack,	you	should	spawn	a	new	object	and	only	apply	the	damage</text>
<text top="188" left="54" width="411" height="20" font="2">to	the	player	if	the	projectile	reaches	the	player.</text>
<text top="225" left="54" width="725" height="20" font="2">To	implement	a	basic	bullet	in	UE4,	we	should	derive	a	new	object	type.	I	derived	a</text>
<text top="255" left="54" width="73" height="14" font="5">ABullet</text>
<text top="251" left="127" width="132" height="20" font="2">	class	from	the	</text>
<text top="255" left="258" width="62" height="14" font="5">AActor</text>
<text top="251" left="321" width="333" height="20" font="2">	class,	as	shown	in	the	following	code:</text>
<text top="294" left="54" width="83" height="14" font="5">UCLASS()</text>
<text top="315" left="54" width="445" height="14" font="5">class	GOLDENEGG_API	ABullet	:	public	AActor</text>
<text top="335" left="54" width="10" height="14" font="5">{</text>
<text top="356" left="54" width="259" height="14" font="5">		GENERATED_UCLASS_BODY()</text>
<text top="397" left="54" width="383" height="14" font="5">		//	How	much	damage	the	bullet	does.</text>
<text top="417" left="54" width="715" height="14" font="5">		UPROPERTY(EditAnywhere,	BlueprintReadWrite,	Category	=		Properties)</text>
<text top="438" left="54" width="155" height="14" font="5">		float	Damage;</text>
<text top="479" left="54" width="559" height="14" font="5">		//	The	visible	Mesh	for	the	component,	so	we	can	see</text>
<text top="499" left="54" width="249" height="14" font="5">		//	the	shooting	object</text>
<text top="520" left="54" width="766" height="14" font="5">		UPROPERTY(VisibleDefaultsOnly,	BlueprintReadOnly,	Category	=		Collision)</text>
<text top="540" left="54" width="300" height="14" font="5">		UStaticMeshComponent*	Mesh;</text>
<text top="581" left="54" width="539" height="14" font="5">		//	the	sphere	you	collide	with	to	do	impact	damage</text>
<text top="602" left="54" width="766" height="14" font="5">		UPROPERTY(VisibleDefaultsOnly,	BlueprintReadOnly,	Category	=		Collision)</text>
<text top="622" left="54" width="321" height="14" font="5">		USphereComponent*	ProxSphere;</text>
<text top="663" left="54" width="570" height="14" font="5">		UFUNCTION(BlueprintNativeEvent,	Category	=	Collision)</text>
<text top="684" left="54" width="746" height="14" font="5">		void	Prox(	AActor*	OtherActor,	UPrimitiveComponent*	OtherComp,		int32	</text>
<text top="705" left="54" width="694" height="14" font="5">OtherBodyIndex,	bool	bFromSweep,	const	FHitResult	&amp;		SweepResult	);</text>
<text top="725" left="54" width="21" height="14" font="5">};</text>
<text top="756" left="54" width="39" height="20" font="2">The	</text>
<text top="761" left="93" width="73" height="14" font="5">ABullet</text>
<text top="756" left="165" width="501" height="20" font="2">	class	has	a	couple	of	important	members	in	it,	as	follows:</text>
<text top="793" left="97" width="20" height="20" font="2">A	</text>
<text top="797" left="117" width="52" height="14" font="5">float</text>
<text top="793" left="169" width="457" height="20" font="2">	variable	for	the	damage	that	a	bullet	does	on	contact</text>
<text top="819" left="97" width="20" height="20" font="2">A	</text>
<text top="823" left="117" width="41" height="14" font="5">Mesh</text>
<text top="819" left="158" width="296" height="20" font="2">	variable	for	the	body	of	the	bullet</text>
<text top="845" left="97" width="20" height="20" font="2">A	</text>
<text top="849" left="117" width="104" height="14" font="5">ProxSphere</text>
<text top="845" left="221" width="486" height="20" font="2">	variable	to	detect	when	the	bullet	finally	hits	something</text>
<text top="871" left="97" width="231" height="20" font="2">A	function	to	be	run	when	</text>
<text top="875" left="329" width="41" height="14" font="5">Prox</text>
<text top="871" left="370" width="224" height="20" font="2">	near	an	object	is	detected</text>
<text top="908" left="54" width="204" height="20" font="2">The	constructor	for	the	</text>
<text top="912" left="258" width="73" height="14" font="5">ABullet</text>
<text top="908" left="330" width="363" height="20" font="2">	class	should	have	the	initialization	of	the	</text>
<text top="912" left="694" width="41" height="14" font="5">Mesh</text>
<text top="908" left="735" width="37" height="20" font="2">	and</text>
<text top="938" left="54" width="104" height="14" font="5">ProxSphere</text>
<text top="934" left="158" width="316" height="20" font="2">	variables.	In	the	constructor,	we	set	</text>
<text top="938" left="474" width="135" height="14" font="5">RootComponent</text>
<text top="934" left="608" width="113" height="20" font="2">	to	being	the	</text>
<text top="938" left="721" width="41" height="14" font="5">Mesh</text>
<text top="934" left="763" width="75" height="20" font="2">	variable</text>
<text top="959" left="54" width="168" height="20" font="2">and	then	attach	the	</text>
<text top="964" left="222" width="104" height="14" font="5">ProxSphere</text>
<text top="959" left="325" width="134" height="20" font="2">	variable	to	the	</text>
<text top="964" left="460" width="41" height="14" font="5">Mesh</text>
<text top="959" left="501" width="125" height="20" font="2">	variable.	The	</text>
<text top="964" left="626" width="104" height="14" font="5">ProxSphere</text>
<text top="959" left="729" width="75" height="20" font="2">	variable</text>
<text top="985" left="54" width="571" height="20" font="2">will	be	used	for	collision	checking,	and	collision	checking	for	the	</text>
<text top="990" left="625" width="41" height="14" font="5">Mesh</text>
<text top="985" left="666" width="164" height="20" font="2">	variable	should	be</text>
<text top="1011" left="54" width="371" height="20" font="2">turned	off,	as	shown	in	the	following	code:</text>
<text top="1055" left="54" width="704" height="14" font="5">ABullet::ABullet(const	class	FObjectInitializer&amp;	PCIP)	:	Super(PCIP)</text>
<text top="1075" left="54" width="10" height="14" font="5">{</text>
<text top="1096" left="54" width="684" height="14" font="5">		Mesh	=	PCIP.CreateDefaultSubobject&lt;UStaticMeshComponent&gt;(this,		</text>
<text top="1116" left="54" width="145" height="14" font="5">TEXT(&#34;Mesh&#34;));</text>
<text top="1137" left="54" width="238" height="14" font="5">		RootComponent	=	Mesh;</text>
<text top="1178" left="54" width="704" height="14" font="5">		ProxSphere	=	PCIP.CreateDefaultSubobject&lt;USphereComponent&gt;(this,		</text>
</page>
<page number="445" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="207" height="14" font="5">TEXT(&#34;ProxSphere&#34;));</text>
<text top="78" left="54" width="414" height="14" font="5">		ProxSphere-&gt;AttachTo(	RootComponent	);</text>
<text top="119" left="54" width="766" height="14" font="5">		ProxSphere-&gt;OnComponentBeginOverlap.AddDynamic(	this,		&amp;ABullet::Prox	);</text>
<text top="140" left="54" width="135" height="14" font="5">		Damage	=	1;</text>
<text top="160" left="54" width="10" height="14" font="5">}</text>
<text top="191" left="54" width="157" height="20" font="2">We	initialized	the	</text>
<text top="196" left="211" width="62" height="14" font="5">Damage</text>
<text top="191" left="273" width="102" height="20" font="2">	variable	to	</text>
<text top="196" left="376" width="10" height="14" font="5">1</text>
<text top="191" left="386" width="423" height="20" font="2">	in	the	constructor,	but	this	can	be	changed	in	the</text>
<text top="217" left="54" width="421" height="20" font="2">UE4	editor	once	we	create	a	blueprint	out	of	the	</text>
<text top="222" left="475" width="73" height="14" font="5">ABullet</text>
<text top="217" left="547" width="137" height="20" font="2">	class.	Next,	the</text>
<text top="248" left="54" width="311" height="14" font="5">ABullet::Prox_Implementation()</text>
<text top="243" left="365" width="442" height="20" font="2">	function	should	deal	damages	to	the	actor	hit	if	we</text>
<text top="269" left="54" width="253" height="20" font="2">collide	with	the	other	actor’s	</text>
<text top="274" left="307" width="135" height="14" font="5">RootComponent</text>
<text top="269" left="442" width="231" height="20" font="2">,	using	the	following	code:</text>
<text top="312" left="54" width="787" height="14" font="5">void	ABullet::Prox_Implementation(	AActor*	OtherActor,	UPrimitiveComponent*	</text>
<text top="333" left="54" width="715" height="14" font="5">OtherComp,	int32	OtherBodyIndex,	bool	bFromSweep,	const	FHitResult	&amp;	</text>
<text top="353" left="54" width="135" height="14" font="5">SweepResult	)</text>
<text top="374" left="54" width="10" height="14" font="5">{</text>
<text top="395" left="54" width="528" height="14" font="5">		if(	OtherComp	!=	OtherActor-&gt;GetRootComponent()	)</text>
<text top="415" left="54" width="31" height="14" font="5">		{</text>
<text top="436" left="54" width="445" height="14" font="5">				//	don't	collide	w/	anything	other	than</text>
<text top="456" left="54" width="342" height="14" font="5">				//	the	actor's	root	component</text>
<text top="477" left="54" width="114" height="14" font="5">				return;</text>
<text top="497" left="54" width="31" height="14" font="5">		}</text>
<text top="538" left="54" width="653" height="14" font="5">		OtherActor-&gt;TakeDamage(	Damage,	FDamageEvent(),	NULL,	this	);</text>
<text top="559" left="54" width="124" height="14" font="5">		Destroy();</text>
<text top="579" left="54" width="10" height="14" font="5">}</text>
<text top="612" left="54" width="147" height="22" font="8"><b>Bullet	physics</b></text>
<text top="650" left="54" width="629" height="20" font="2">To	make	bullets	fly	through	the	level,	you	can	use	UE4’s	physics	engine.</text>
<text top="687" left="54" width="273" height="20" font="2">Create	a	blueprint	based	on	the	</text>
<text top="692" left="327" width="73" height="14" font="5">ABullet</text>
<text top="687" left="400" width="435" height="20" font="2">	class.	I	selected	<b>Shape_Sphere</b>	for	the	mesh.	The</text>
<text top="713" left="54" width="760" height="20" font="2">bullet’s	mesh	should	not	have	collision	physics	enabled;	instead	we’ll	enable	physics	on</text>
<text top="739" left="54" width="249" height="20" font="2">the	bullet’s	bounding	sphere.</text>
<text top="776" left="54" width="782" height="20" font="2">Configuring	the	bullet	to	behave	properly	is	mildly	tricky,	so	we’ll	cover	this	in	four	steps,</text>
<text top="802" left="54" width="94" height="20" font="2">as	follows:</text>
<text top="838" left="69" width="535" height="20" font="2">1.	 Select	<b>[ROOT]	ProxSphere</b>	in	the	<b>Components</b>	tab.	The	</text>
<text top="843" left="604" width="104" height="14" font="5">ProxSphere</text>
<text top="838" left="708" width="75" height="20" font="2">	variable</text>
<text top="864" left="97" width="651" height="20" font="2">should	be	the	root	component	and	should	appear	at	the	top	of	the	hierarchy.</text>
<text top="890" left="69" width="721" height="20" font="2">2.	 In	the	<b>Details</b>	tab,	check	both	<b>Simulate	Physics</b>	and	<b>Simulation	Generates	Hit</b></text>
<text top="917" left="97" width="68" height="19" font="3"><b>Events</b>.</text>
<text top="942" left="69" width="522" height="20" font="2">3.	 From	the	<b>Collision	Presets</b>	dropdown,	select	<b>Custom…</b>.</text>
<text top="968" left="69" width="692" height="20" font="2">4.	 Check	the	<b>Collision	Responses</b>	boxes	as	shown;	check	<b>Block</b>	for	most	types</text>
<text top="994" left="97" width="682" height="20" font="2">(<b>WorldStatic</b>,	<b>WorldDynamic</b>,	and	so	on)	and	check	<b>Overlap</b>	only	for	<b>Pawn</b>:</text>
</page>
<page number="446" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="742" height="710" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-446_1.jpg"/>
<text top="852" left="54" width="380" height="20" font="2">The	<b>Simulate	Physics</b>	checkbox	makes	the	</text>
<text top="857" left="434" width="104" height="14" font="5">ProxSphere</text>
<text top="852" left="538" width="281" height="20" font="2">	property	experience	gravity	and</text>
<text top="878" left="54" width="762" height="20" font="2">the	impulse	forces	exerted	on	it.	An	impulse	is	a	momentary	thrust	of	force,	which	we’ll</text>
<text top="904" left="54" width="726" height="20" font="2">use	to	drive	the	shot	of	the	bullet.	If	you	do	not	check	the	<b>Simulation	Generate	Hit</b></text>
<text top="931" left="54" width="750" height="19" font="3"><b>Events</b>	checkbox,	then	the	ball	will	drop	on	the	floor.	What	<b>BlockAll	Collision	Preset</b></text>
<text top="956" left="54" width="478" height="20" font="2">does	is	ensure	that	the	ball	can’t	pass	through	anything.</text>
<text top="993" left="54" width="334" height="20" font="2">If	you	drag	and	drop	a	couple	of	these	</text>
<text top="997" left="388" width="93" height="14" font="5">BP_Bullet</text>
<text top="993" left="481" width="340" height="20" font="2">	objects	from	the	<b>Content	Browser</b>	tab</text>
<text top="1019" left="54" width="780" height="20" font="2">directly	into	the	world	now,	they	will	simply	fall	to	the	floor.	You	can	kick	them	once	they</text>
<text top="1045" left="54" width="692" height="20" font="2">are	on	the	the	floor.	The	following	screenshot	shows	the	ball	object	on	the	floor:</text>
</page>
<page number="447" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="432" height="282" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-447_1.jpg"/>
<image top="794" left="54" width="511" height="80" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-447_2.jpg"/>
<text top="404" left="54" width="775" height="20" font="2">However,	we	don’t	want	our	bullets	falling	on	the	floor.	We	want	them	to	be	shot.	So	let’s</text>
<text top="430" left="54" width="184" height="20" font="2">put	our	bullets	in	the	</text>
<text top="434" left="238" width="73" height="14" font="5">Monster</text>
<text top="430" left="311" width="53" height="20" font="2">	class.</text>
<text top="468" left="54" width="370" height="22" font="8"><b>Adding	bullets	to	the	monster	class</b></text>
<text top="507" left="54" width="188" height="20" font="2">Add	a	member	to	the	</text>
<text top="511" left="242" width="73" height="14" font="5">Monster</text>
<text top="507" left="314" width="486" height="20" font="2">	class	that	receives	a	blueprint	instance	reference.	That’s</text>
<text top="533" left="54" width="79" height="20" font="2">what	the	</text>
<text top="537" left="133" width="62" height="14" font="5">UClass</text>
<text top="533" left="195" width="602" height="20" font="2">	object	type	is	for.	Also,	add	a	blueprint	configurable	float	property	to</text>
<text top="559" left="54" width="604" height="20" font="2">adjust	the	force	that	shoots	the	bullet,	as	shown	in	the	following	code:</text>
<text top="602" left="54" width="549" height="14" font="5">//	The	blueprint	of	the	bullet	class	the	monster	uses</text>
<text top="622" left="54" width="766" height="14" font="5">UPROPERTY(EditAnywhere,	BlueprintReadWrite,	Category	=		MonsterProperties)</text>
<text top="643" left="54" width="176" height="14" font="5">UClass*	BPBullet;</text>
<text top="663" left="54" width="331" height="14" font="5">//	Thrust	behind	bullet	launches</text>
<text top="684" left="54" width="766" height="14" font="5">UPROPERTY(EditAnywhere,	BlueprintReadWrite,	Category	=		MonsterProperties)</text>
<text top="705" left="54" width="269" height="14" font="5">float	BulletLaunchImpulse;</text>
<text top="736" left="54" width="421" height="20" font="2">Compile	and	run	the	C++	project	and	open	your	</text>
<text top="740" left="475" width="104" height="14" font="5">BP_Monster</text>
<text top="736" left="578" width="207" height="20" font="2">	blueprint.	You	can	now</text>
<text top="762" left="54" width="255" height="20" font="2">select	a	blueprint	class	under	</text>
<text top="766" left="309" width="83" height="14" font="5">BPBullet</text>
<text top="762" left="392" width="336" height="20" font="2">,	as	shown	in	the	following	screenshot:</text>
<text top="943" left="54" width="753" height="20" font="2">Once	you’ve	selected	a	blueprint	class	type	to	instantiate	when	the	monster	shoots,	you</text>
<text top="969" left="54" width="597" height="20" font="2">have	to	program	the	monster	to	shoot	when	the	player	is	in	his	range.</text>
<text top="1006" left="54" width="773" height="20" font="2">Where	does	the	monster	shoot	from?	Actually,	he	should	shoot	from	a	bone.	If	you’re	not</text>
<text top="1032" left="54" width="775" height="20" font="2">familiar	with	the	terminology,	bones	are	just	reference	points	in	the	model	mesh.	A	model</text>
<text top="1058" left="54" width="648" height="20" font="2">mesh	is	usually	made	up	of	many	“bones.”	To	see	some	bones,	open	up	the</text>
<text top="1084" left="54" width="746" height="19" font="3"><b>Mixamo_Adam</b>	mesh	by	double-clicking	on	the	asset	in	the	<b>Content	Browser</b>	tab,	as</text>
<text top="1110" left="54" width="302" height="20" font="2">shown	in	the	following	screenshot:</text>
</page>
<page number="448" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="764" height="746" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-448_1.jpg"/>
<text top="869" left="54" width="756" height="20" font="2">Go	to	the	<b>Skeleton</b>	tab	and	you	will	see	all	the	monster’s	bones	in	a	tree	view	list	in	the</text>
<text top="895" left="54" width="748" height="20" font="2">left-hand	side.	What	we	want	to	do	is	select	a	bone	from	which	bullets	will	be	emitted.</text>
<text top="921" left="54" width="194" height="20" font="2">Here	I’ve	selected	the	</text>
<text top="925" left="248" width="83" height="14" font="5">LeftHand</text>
<text top="921" left="331" width="66" height="20" font="2">	option.</text>
<text top="959" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="997" left="54" width="770" height="20" font="2">An	artist	will	normally	insert	an	additional	bone	into	the	model	mesh	to	emit	the	particle,</text>
<text top="1023" left="54" width="460" height="20" font="2">which	is	likely	to	be	on	the	tip	of	the	nozzle	of	a	gun.</text>
<text top="1060" left="54" width="448" height="20" font="2">Working	from	the	base	model	mesh,	we	can	get	the	</text>
<text top="1064" left="502" width="41" height="14" font="5">Mesh</text>
<text top="1060" left="544" width="251" height="20" font="2">	bone’s	location	and	have	the</text>
<text top="1086" left="54" width="150" height="20" font="2">monster	emit	the	</text>
<text top="1090" left="204" width="62" height="14" font="5">Bullet</text>
<text top="1086" left="267" width="322" height="20" font="2">	instances	from	that	bone	in	the	code.</text>
<text top="1123" left="54" width="198" height="20" font="2">The	complete	monster	</text>
<text top="1127" left="252" width="41" height="14" font="5">Tick</text>
<text top="1123" left="294" width="42" height="20" font="2">	and	</text>
<text top="1127" left="336" width="62" height="14" font="5">Attack</text>
<text top="1123" left="398" width="400" height="20" font="2">	functions	can	be	obtained	using	the	following</text>
<text top="1148" left="54" width="47" height="20" font="2">code:</text>
<text top="1192" left="54" width="404" height="14" font="5">void	AMonster::Tick(float	DeltaSeconds)</text>
</page>
<page number="449" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="10" height="14" font="5">{</text>
<text top="78" left="54" width="311" height="14" font="5">		Super::Tick(	DeltaSeconds	);</text>
<text top="119" left="54" width="414" height="14" font="5">		//	move	the	monster	towards	the	player</text>
<text top="140" left="54" width="373" height="14" font="5">		AAvatar	*avatar	=	Cast&lt;AAvatar&gt;(		</text>
<text top="160" left="54" width="508" height="14" font="5">UGameplayStatics::GetPlayerPawn(GetWorld(),	0)	);</text>
<text top="181" left="54" width="238" height="14" font="5">		if(	!avatar	)	return;</text>
<text top="222" left="54" width="508" height="14" font="5">		FVector	playerPos	=	avatar-&gt;GetActorLocation();</text>
<text top="242" left="54" width="539" height="14" font="5">		FVector	toPlayer	=	playerPos	-	GetActorLocation();</text>
<text top="263" left="54" width="445" height="14" font="5">		float	distanceToPlayer	=	toPlayer.Size();</text>
<text top="304" left="54" width="590" height="14" font="5">		//	If	the	player	is	not	the	SightSphere	of	the	monster,</text>
<text top="324" left="54" width="124" height="14" font="5">		//	go	back</text>
<text top="345" left="54" width="653" height="14" font="5">		if(	distanceToPlayer	&gt;	SightSphere-&gt;GetScaledSphereRadius()	)</text>
<text top="365" left="54" width="31" height="14" font="5">		{</text>
<text top="386" left="54" width="570" height="14" font="5">				//	If	the	player	is	OS,	then	the	enemy	cannot	chase</text>
<text top="406" left="54" width="114" height="14" font="5">				return;</text>
<text top="427" left="54" width="31" height="14" font="5">		}</text>
<text top="468" left="54" width="590" height="14" font="5">		toPlayer	/=	distanceToPlayer;		//	normalizes	the	vector</text>
<text top="509" left="54" width="300" height="14" font="5">		//	At	least	face	the	target</text>
<text top="530" left="54" width="445" height="14" font="5">		//	Gets	you	the	rotator	to	turn	something</text>
<text top="550" left="54" width="445" height="14" font="5">		//	that	looks	in	the	`toPlayer`	direction</text>
<text top="571" left="54" width="518" height="14" font="5">		FRotator	toPlayerRotation	=	toPlayer.Rotation();</text>
<text top="591" left="54" width="497" height="14" font="5">		toPlayerRotation.Pitch	=	0;	//	0	off	the	pitch</text>
<text top="612" left="54" width="559" height="14" font="5">		RootComponent-&gt;SetWorldRotation(	toPlayerRotation	);</text>
<text top="653" left="54" width="425" height="14" font="5">		if(	isInAttackRange(distanceToPlayer)	)</text>
<text top="673" left="54" width="31" height="14" font="5">		{</text>
<text top="694" left="54" width="259" height="14" font="5">				//	Perform	the	attack</text>
<text top="714" left="54" width="311" height="14" font="5">				if(	!TimeSinceLastStrike	)</text>
<text top="735" left="54" width="52" height="14" font="5">				{</text>
<text top="755" left="54" width="218" height="14" font="5">						Attack(avatar);</text>
<text top="776" left="54" width="52" height="14" font="5">				}</text>
<text top="817" left="54" width="414" height="14" font="5">				TimeSinceLastStrike	+=	DeltaSeconds;</text>
<text top="837" left="54" width="466" height="14" font="5">				if(	TimeSinceLastStrike	&gt;	AttackTimeout	)</text>
<text top="858" left="54" width="52" height="14" font="5">				{</text>
<text top="878" left="54" width="311" height="14" font="5">						TimeSinceLastStrike	=	0;</text>
<text top="899" left="54" width="52" height="14" font="5">				}</text>
<text top="940" left="54" width="352" height="14" font="5">				return;		//	nothing	else	to	do</text>
<text top="961" left="54" width="31" height="14" font="5">		}</text>
<text top="981" left="54" width="62" height="14" font="5">		else</text>
<text top="1002" left="54" width="31" height="14" font="5">		{</text>
<text top="1022" left="54" width="518" height="14" font="5">				//	not	in	attack	range,	so	walk	towards	player</text>
<text top="1043" left="54" width="528" height="14" font="5">				AddMovementInput(toPlayer,	Speed*DeltaSeconds);</text>
<text top="1063" left="54" width="31" height="14" font="5">		}</text>
<text top="1084" left="54" width="10" height="14" font="5">}</text>
<text top="1115" left="54" width="39" height="20" font="2">The	</text>
<text top="1119" left="93" width="166" height="14" font="5">AMonster::Attack</text>
<text top="1115" left="259" width="538" height="20" font="2">	function	is	relatively	simple.	Of	course,	we	first	need	to	add	a</text>
<text top="1141" left="54" width="243" height="20" font="2">prototype	declaration	in	the	</text>
<text top="1145" left="297" width="93" height="14" font="5">Monster.h</text>
<text top="1141" left="391" width="350" height="20" font="2">	file	in	order	to	write	our	function	in	the	</text>
<text top="1145" left="741" width="41" height="14" font="5">.cpp</text>
<text top="1141" left="782" width="40" height="20" font="2">	file:</text>
<text top="1184" left="54" width="383" height="14" font="5">void	AMonster::Attack(AActor*	thing);</text>
</page>
<page number="450" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="23" height="20" font="2">In	</text>
<text top="62" left="77" width="114" height="14" font="5">Monster.cpp</text>
<text top="57" left="191" width="171" height="20" font="2">,	we	implement	the	</text>
<text top="62" left="362" width="62" height="14" font="5">Attack</text>
<text top="57" left="424" width="182" height="20" font="2">	function,	as	follows:</text>
<text top="101" left="54" width="373" height="14" font="5">void	AMonster::Attack(AActor*	thing)</text>
<text top="121" left="54" width="10" height="14" font="5">{</text>
<text top="142" left="54" width="197" height="14" font="5">		if(	MeleeWeapon	)</text>
<text top="162" left="54" width="31" height="14" font="5">		{</text>
<text top="183" left="54" width="445" height="14" font="5">				//	code	for	the	melee	weapon	swing,	if	</text>
<text top="203" left="54" width="300" height="14" font="5">				//	a	melee	weapon	is	used</text>
<text top="224" left="54" width="259" height="14" font="5">				MeleeWeapon-&gt;Swing();</text>
<text top="244" left="54" width="31" height="14" font="5">		}</text>
<text top="265" left="54" width="218" height="14" font="5">		else	if(	BPBullet	)</text>
<text top="285" left="54" width="31" height="14" font="5">		{</text>
<text top="306" left="54" width="570" height="14" font="5">				//	If	a	blueprint	for	a	bullet	to	use	was	assigned,</text>
<text top="326" left="54" width="580" height="14" font="5">				//	then	use	that.	Note	we	wouldn't	execute	this	code</text>
<text top="347" left="54" width="570" height="14" font="5">				//	bullet	firing	code	if	a	MeleeWeapon	was	equipped</text>
<text top="367" left="54" width="435" height="14" font="5">				FVector	fwd	=	GetActorForwardVector();</text>
<text top="388" left="54" width="653" height="14" font="5">				FVector	nozzle	=	GetMesh()-&gt;GetBoneLocation(	&#34;RightHand&#34;	);</text>
<text top="409" left="54" width="704" height="14" font="5">				nozzle	+=	fwd	*	155;//	move	it	fwd	of	the	monster	so	it		doesn't</text>
<text top="429" left="54" width="383" height="14" font="5">				//	collide	with	the	monster	model</text>
<text top="450" left="54" width="621" height="14" font="5">				FVector	toOpponent	=	thing-&gt;GetActorLocation()	-	nozzle;</text>
<text top="470" left="54" width="280" height="14" font="5">				toOpponent.Normalize();</text>
<text top="491" left="54" width="766" height="14" font="5">				ABullet	*bullet	=	GetWorld()-&gt;SpawnActor&lt;ABullet&gt;(		BPBullet,	nozzle,	</text>
<text top="511" left="54" width="404" height="14" font="5">RootComponent-&gt;GetComponentRotation());</text>
<text top="552" left="54" width="166" height="14" font="5">				if(	bullet	)</text>
<text top="573" left="54" width="52" height="14" font="5">				{</text>
<text top="593" left="54" width="280" height="14" font="5">						bullet-&gt;Firer	=	this;</text>
<text top="614" left="54" width="394" height="14" font="5">						bullet-&gt;ProxSphere-&gt;AddImpulse(	</text>
<text top="634" left="54" width="352" height="14" font="5">								fwd*BulletLaunchImpulse	);</text>
<text top="655" left="54" width="52" height="14" font="5">				}</text>
<text top="675" left="54" width="83" height="14" font="5">				else</text>
<text top="696" left="54" width="52" height="14" font="5">				{</text>
<text top="716" left="54" width="497" height="14" font="5">						GEngine-&gt;AddOnScreenDebugMessage(	0,	5.f,	</text>
<text top="737" left="54" width="766" height="14" font="5">						FColor::Yellow,	&#34;monster:	no	bullet	actor	could	be	spawned.		is	the	</text>
<text top="757" left="54" width="342" height="14" font="5">bullet	overlapping	something?&#34;	);</text>
<text top="778" left="54" width="52" height="14" font="5">				}</text>
<text top="799" left="54" width="31" height="14" font="5">		}</text>
<text top="819" left="54" width="10" height="14" font="5">}</text>
<text top="850" left="54" width="770" height="20" font="2">We	leave	the	code	that	implements	the	melee	attack	as	it	is.	Assuming	that	the	monster	is</text>
<text top="876" left="54" width="490" height="20" font="2">not	holding	a	melee	weapon,	we	then	check	whether	the	</text>
<text top="881" left="544" width="83" height="14" font="5">BPBullet</text>
<text top="876" left="627" width="182" height="20" font="2">	member	is	set.	If	the</text>
<text top="907" left="54" width="83" height="14" font="5">BPBullet</text>
<text top="902" left="137" width="678" height="20" font="2">	member	is	set,	it	means	that	the	monster	will	create	and	fire	an	instance	of	the</text>
<text top="932" left="54" width="83" height="14" font="5">BPBullet</text>
<text top="928" left="137" width="156" height="20" font="2">	blueprinted	class.</text>
<text top="965" left="54" width="366" height="20" font="2">Pay	special	attention	to	the	following	line:</text>
<text top="1008" left="54" width="715" height="14" font="5">ABullet	*bullet	=	GetWorld()-&gt;SpawnActor&lt;ABullet&gt;(BPBullet,		nozzle,	</text>
<text top="1029" left="54" width="414" height="14" font="5">RootComponent-&gt;GetComponentRotation()	);</text>
<text top="1060" left="54" width="432" height="20" font="2">This	is	how	we	add	a	new	actor	to	the	world.	The	</text>
<text top="1064" left="486" width="124" height="14" font="5">SpawnActor()</text>
<text top="1060" left="611" width="221" height="20" font="2">	function	puts	an	instance</text>
<text top="1086" left="54" width="23" height="20" font="2">of	</text>
<text top="1090" left="77" width="62" height="14" font="5">UCLASS</text>
<text top="1086" left="140" width="150" height="20" font="2">	that	you	pass,	at	</text>
<text top="1090" left="289" width="83" height="14" font="5">spawnLoc</text>
<text top="1086" left="372" width="260" height="20" font="2">,	with	some	initial	orientation.</text>
<text top="1123" left="54" width="333" height="20" font="2">After	we	spawn	the	bullet,	we	call	the	</text>
<text top="1127" left="387" width="124" height="14" font="5">AddImpulse()</text>
<text top="1123" left="511" width="135" height="20" font="2">	function	on	its	</text>
<text top="1127" left="646" width="104" height="14" font="5">ProxSphere</text>
<text top="1123" left="750" width="75" height="20" font="2">	variable</text>
<text top="1148" left="54" width="173" height="20" font="2">to	rocket	it	forward.</text>
</page>
<page number="451" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="273" height="32" font="7"><b>Player	knockback</b></text>
<text top="110" left="54" width="586" height="20" font="2">To	add	a	knockback	to	the	player,	I	added	a	member	variable	to	the	</text>
<text top="115" left="640" width="62" height="14" font="5">Avatar</text>
<text top="110" left="702" width="104" height="20" font="2">	class	called</text>
<text top="141" left="54" width="93" height="14" font="5">knockback</text>
<text top="136" left="147" width="466" height="20" font="2">.	A	knockback	happens	whenever	the	avatar	gets	hurt:</text>
<text top="180" left="54" width="394" height="14" font="5">FVector	knockback;	//	in	class	AAvatar</text>
<text top="211" left="54" width="763" height="20" font="2">In	order	to	figure	out	the	direction	to	knock	the	player	back	when	he	gets	hit,	we	need	to</text>
<text top="237" left="54" width="156" height="20" font="2">add	some	code	to	</text>
<text top="241" left="210" width="197" height="14" font="5">AAvatar::TakeDamage</text>
<text top="237" left="407" width="416" height="20" font="2">.	Compute	the	direction	vector	from	the	attacker</text>
<text top="263" left="54" width="399" height="20" font="2">towards	the	player	and	store	this	vector	in	the	</text>
<text top="267" left="453" width="93" height="14" font="5">knockback</text>
<text top="263" left="546" width="81" height="20" font="2">	variable:</text>
<text top="306" left="54" width="704" height="14" font="5">float	AAvatar::TakeDamage(float	Damage,	struct	FDamageEvent	const&amp;		</text>
<text top="326" left="54" width="663" height="14" font="5">DamageEvent,	AController*	EventInstigator,	AActor*	DamageCauser)</text>
<text top="347" left="54" width="10" height="14" font="5">{</text>
<text top="367" left="54" width="611" height="14" font="5">		//	add	some	knockback	that	gets	applied	over	a	few	frames</text>
<text top="388" left="54" width="715" height="14" font="5">		knockback	=	GetActorLocation()	-	DamageCauser-	&gt;GetActorLocation();</text>
<text top="409" left="54" width="249" height="14" font="5">		knockback.Normalize();</text>
<text top="429" left="54" width="663" height="14" font="5">		knockback	*=	Damage	*	500;	//	knockback	proportional	to	damage</text>
<text top="450" left="54" width="10" height="14" font="5">}</text>
<text top="481" left="54" width="23" height="20" font="2">In	</text>
<text top="485" left="77" width="135" height="14" font="5">AAvatar::Tick</text>
<text top="481" left="212" width="428" height="20" font="2">,	we	apply	the	knockback	to	the	avatar’s	position:</text>
<text top="524" left="54" width="414" height="14" font="5">void	AAvatar::Tick(	float	DeltaSeconds	)</text>
<text top="545" left="54" width="10" height="14" font="5">{</text>
<text top="565" left="54" width="311" height="14" font="5">		Super::Tick(	DeltaSeconds	);</text>
<text top="606" left="54" width="280" height="14" font="5">		//	apply	knockback	vector</text>
<text top="627" left="54" width="383" height="14" font="5">		AddMovementInput(	knockback,	1.f	);</text>
<text top="668" left="54" width="476" height="14" font="5">		//	half	the	size	of	the	knockback	each	frame</text>
<text top="688" left="54" width="207" height="14" font="5">		knockback	*=	0.5f;</text>
<text top="709" left="54" width="10" height="14" font="5">}</text>
<text top="740" left="54" width="779" height="20" font="2">Since	the	knockback	vector	reduces	in	size	with	each	frame,	it	becomes	weaker	over	time,</text>
<text top="766" left="54" width="510" height="20" font="2">unless	the	knockback	vector	gets	renewed	with	another	hit.</text>
</page>
<page number="452" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="453" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="182" height="39" font="0"><b>Summary</b></text>
<text top="120" left="54" width="750" height="20" font="2">In	this	chapter,	we	explored	how	to	instantiate	monsters	on	the	screen	that	run	after	the</text>
<text top="146" left="54" width="745" height="20" font="2">player	and	attack	him.	In	the	next	chapter,	we	will	give	the	player	the	ability	to	defend</text>
<text top="172" left="54" width="558" height="20" font="2">himself	by	allowing	him	to	cast	spells	that	damage	the	monsters.</text>
</page>
<page number="454" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="455" position="absolute" top="0" left="0" height="1262" width="892">
<image top="381" left="54" width="540" height="196" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-455_1.jpg"/>
<text top="64" left="54" width="427" height="39" font="0"><b>Chapter	12.	Spell	Book</b></text>
<text top="120" left="54" width="762" height="20" font="2">The	player	does	not	yet	have	a	means	to	defend	himself.	We	will	equip	the	player	with	a</text>
<text top="146" left="54" width="777" height="20" font="2">very	useful	and	interesting	way,	of	doing	so	called	magic	spells.	Magic	spells	will	be	used</text>
<text top="172" left="54" width="340" height="20" font="2">by	the	player	to	affect	monsters	nearby.</text>
<text top="209" left="54" width="706" height="20" font="2">Practically,	spells	will	be	a	combination	of	a	particle	system	with	an	area	of	effect</text>
<text top="235" left="54" width="773" height="20" font="2">represented	by	a	bounding	volume.	The	bounding	volume	is	checked	for	contained	actors</text>
<text top="260" left="54" width="762" height="20" font="2">in	each	frame.	When	an	actor	is	within	the	bounding	volume	of	a	spell,	then	that	actor	is</text>
<text top="286" left="54" width="185" height="20" font="2">affected	by	that	spell.</text>
<text top="323" left="54" width="751" height="20" font="2">The	following	is	a	screenshot	of	the	blizzard	and	force	field	spells,	with	their	bounding</text>
<text top="349" left="54" width="269" height="20" font="2">volumes	highlighted	in	orange:</text>
<text top="646" left="54" width="712" height="20" font="2">Visualization	of	the	blizzard	spell	can	be	seen	at	the	right,	with	a	long,	box-shaped</text>
<text top="672" left="54" width="782" height="20" font="2">bounding	volume.	Visualization	of	the	force	field	spell,	with	a	spherical	bounding	volume,</text>
<text top="698" left="54" width="565" height="20" font="2">for	pushing	monsters	away,	is	shown	in	the	following	screenshot:</text>
</page>
<page number="456" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="540" height="556" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-456_1.jpg"/>
<text top="679" left="54" width="771" height="20" font="2">In	each	frame,	the	bounding	volume	is	checked	for	contained	actors.	Any	actor	contained</text>
<text top="704" left="54" width="766" height="20" font="2">in	the	spell’s	bounding	volume	is	going	to	be	affected	by	that	spell	for	that	frame	only.	If</text>
<text top="730" left="54" width="766" height="20" font="2">the	actor	moves	outside	the	spell’s	bounding	volume,	the	actor	will	no	longer	be	affected</text>
<text top="756" left="54" width="754" height="20" font="2">by	that	spell.	Remember,	the	spell’s	particle	system	is	a	visualization	only;	the	particles</text>
<text top="782" left="54" width="460" height="20" font="2">themselves	are	not	what	will	affect	game	actors.	The	</text>
<text top="787" left="514" width="104" height="14" font="5">PickupItem</text>
<text top="782" left="617" width="168" height="20" font="2">	class	we	created	in</text>
<text top="808" left="54" width="85" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#268">Chapter	8</a></text>
<text top="808" left="139" width="697" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#268">,</a>	<i>Actors	and	Pawns</i>	can	be	used	to	allow	the	player	to	pick	up	items	representing</text>
<text top="834" left="54" width="259" height="20" font="2">the	spells.	We	will	extend	the	</text>
<text top="838" left="313" width="104" height="14" font="5">PickupItem</text>
<text top="834" left="417" width="402" height="20" font="2">	class	and	attach	the	blueprint	of	a	spell	to	cast</text>
<text top="860" left="54" width="45" height="20" font="2">each	</text>
<text top="864" left="99" width="104" height="14" font="5">PickupItem</text>
<text top="860" left="203" width="604" height="20" font="2">.	Clicking	on	a	spell’s	widget	from	the	HUD	will	cast	it.	The	interface</text>
<text top="886" left="54" width="253" height="20" font="2">will	look	something	like	this:</text>
</page>
<page number="457" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="636" height="443" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-457_1.jpg"/>
<text top="533" left="182" width="529" height="20" font="4"><i>Items	the	player	has	picked	up,	including	four	different	spells</i></text>
<text top="602" left="54" width="767" height="20" font="2">We’ll	begin	the	chapter	by	describing	how	to	create	our	own	particle	systems.	We’ll	then</text>
<text top="628" left="54" width="400" height="20" font="2">move	on	to	wrap	up	the	particle	emitter	into	a	</text>
<text top="632" left="454" width="52" height="14" font="5">Spell</text>
<text top="628" left="506" width="159" height="20" font="2">	class,	and	write	a	</text>
<text top="632" left="666" width="114" height="14" font="5">CastSpell()</text>
<text top="654" left="54" width="476" height="20" font="2">function	for	the	avatar	to	be	able	to	actually	cast	spells.</text>
</page>
<page number="458" position="absolute" top="0" left="0" height="1262" width="892">
<image top="230" left="54" width="592" height="516" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-458_1.jpg"/>
<image top="1002" left="54" width="133" height="172" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-458_2.jpg"/>
<text top="64" left="54" width="377" height="39" font="0"><b>The	particle	systems</b></text>
<text top="120" left="54" width="757" height="20" font="2">First,	we	need	a	place	to	put	all	our	snazzy	effects.	In	your	<b>Content	Browser</b>	tab,	right-</text>
<text top="146" left="54" width="752" height="20" font="2">click	on	the	<b>Game</b>	root	and	create	a	new	folder	called	<b>ParticleSystems</b>.	Right-click	on</text>
<text top="172" left="54" width="719" height="20" font="2">that	new	folder,	and	select	<b>New	Asset</b>	|	<b>Particle	System</b>,	as	shown	in	the	following</text>
<text top="198" left="54" width="97" height="20" font="2">screenshot:</text>
<text top="817" left="54" width="37" height="22" font="8"><b>Tip</b></text>
<text top="856" left="54" width="753" height="20" font="2">See	this	Unreal	Engine	4	Particle	Systems	guide	for	information	on	how	unreal	particle</text>
<text top="882" left="54" width="131" height="20" font="2"><a href="https://www.youtube.com/watch?v=OXK2Xbd7D9w&amp;index=1&amp;list=PLZlv_N0_O1gYDLyB3LVfjYIcbBe8NqR8t">emitters	work:	</a></text>
<text top="882" left="185" width="290" height="20" font="1"><a href="https://www.youtube.com/watch?v=OXK2Xbd7D9w&amp;index=1&amp;list=PLZlv_N0_O1gYDLyB3LVfjYIcbBe8NqR8t">https://www.youtube.com/watch?</a></text>
<text top="908" left="54" width="708" height="20" font="1"><a href="https://www.youtube.com/watch?v=OXK2Xbd7D9w&amp;index=1&amp;list=PLZlv_N0_O1gYDLyB3LVfjYIcbBe8NqR8t">v=OXK2Xbd7D9w&amp;index=1&amp;list=PLZlv_N0_O1gYDLyB3LVfjYIcbBe8NqR8t</a></text>
<text top="908" left="762" width="5" height="20" font="2">.</text>
<text top="944" left="54" width="741" height="20" font="2">Double-click	on	the	<b>NewParticleSystem</b>	icon	that	appears,	as	shown	in	the	following</text>
<text top="970" left="54" width="97" height="20" font="2">screenshot:</text>
</page>
<page number="459" position="absolute" top="0" left="0" height="1262" width="892">
<image top="145" left="54" width="785" height="845" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-459_1.jpg"/>
<text top="87" left="54" width="761" height="20" font="2">You	will	be	in	Cascade,	the	particle	editor.	A	description	of	the	environment	is	shown	in</text>
<text top="112" left="54" width="218" height="20" font="2">the	following	screenshot:</text>
<text top="1058" left="54" width="758" height="20" font="2">There	are	several	different	panes	here,	each	of	which	shows	different	information.	They</text>
<text top="1084" left="54" width="126" height="20" font="2">are	as	follows:</text>
<text top="1120" left="97" width="695" height="20" font="2">At	the	top	left	is	the	<b>Viewport</b>	pane.	This	shows	you	an	animation	of	the	current</text>
<text top="1146" left="97" width="276" height="20" font="2">emitter	as	its	currently	working.</text>
<text top="1172" left="97" width="740" height="20" font="2">At	the	right	is	the	<b>Emitters</b>	pane.	Inside	it,	you	can	see	a	single	object	called	<b>Particle</b></text>
</page>
<page number="460" position="absolute" top="0" left="0" height="1262" width="892">
<text top="58" left="97" width="716" height="19" font="3"><b>Emitter</b>	(you	can	have	more	than	one	emitter	in	your	particle	system,	but	we	don’t</text>
<text top="83" left="97" width="714" height="20" font="2">want	that	now).	The	listing	of	modules	of	<b>Particle	Emitter</b>	appears	listed	under	it.</text>
<text top="109" left="97" width="700" height="20" font="2">From	the	preceding	screenshot,	we	have	the	<b>Required</b>,	<b>Spawn</b>,	<b>Lifetime</b>,	<b>Initial</b></text>
<text top="136" left="97" width="461" height="19" font="3"><b>Size</b>,	<b>Initial	Velocity</b>,	and	<b>Color	Over	Life</b>	modules.</text>
</page>
<page number="461" position="absolute" top="0" left="0" height="1262" width="892">
<image top="246" left="54" width="414" height="409" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-461_1.jpg"/>
<text top="61" left="54" width="439" height="32" font="7"><b>Changing	particle	properties</b></text>
<text top="110" left="54" width="708" height="20" font="2">The	default	particle	emitter	emits	crosshair-like	shapes.	We	want	to	change	that	to</text>
<text top="136" left="54" width="744" height="20" font="2">something	more	interesting.	Click	on	the	yellow	<b>Required</b>	box	under	<b>Emitters</b>	panel,</text>
<text top="162" left="54" width="406" height="20" font="2">then	under	<b>Material</b>	in	the	<b>Details</b>	panel,	type	</text>
<text top="167" left="460" width="93" height="14" font="5">particles</text>
<text top="162" left="553" width="222" height="20" font="2">.	A	list	of	all	the	available</text>
<text top="188" left="54" width="722" height="20" font="2">particle	materials	will	pop	up.	Choose	<b>m_flare_01</b>	option	to	create	our	first	particle</text>
<text top="214" left="54" width="396" height="20" font="2">system,	as	shown	in	the	following	screenshot:</text>
<text top="725" left="54" width="775" height="20" font="2">Now,	let’s	change	the	behavior	of	the	particle	system.	Click	on	the	<b>Color	Over	Life</b>	entry</text>
<text top="751" left="54" width="775" height="20" font="2">under	the	<b>Emitters</b>	pane.	The	<b>Details</b>	pane	at	the	bottom	shows	the	information	about	the</text>
<text top="777" left="54" width="510" height="20" font="2">different	parameters,	as	shown	in	the	following	screenshot:</text>
</page>
<page number="462" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="726" height="832" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-462_1.jpg"/>
<text top="954" left="54" width="745" height="20" font="2">In	the	<b>Details</b>	pane	of	<b>Color	Over	Life</b>	entry,	I	increased	<b>X</b>,	but	not	<b>Y</b>	and	not	<b>Z</b>.	This</text>
<text top="980" left="54" width="666" height="20" font="2">gives	the	particle	system	a	reddish	glow.	(<b>X</b>	is	red,	<b>Y</b>	is	green,	and	<b>Z</b>	is	blue).</text>
<text top="1017" left="54" width="755" height="20" font="2">Instead	of	editing	the	raw	numbers,	however,	you	can	actually	change	the	particle	color</text>
<text top="1043" left="54" width="785" height="20" font="2">more	visually.	If	you	click	on	the	greenish	zigzag	button	beside	the	<b>Color	Over	Life</b>	entry,</text>
<text top="1069" left="54" width="766" height="20" font="2">you	will	see	the	graph	for	<b>Color	Over	Life</b>	displayed	in	the	<b>Curve	Editor</b>	tab,	as	shown</text>
<text top="1094" left="54" width="240" height="20" font="2">in	the	following	screenshot:</text>
</page>
<page number="463" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="785" height="371" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-463_1.jpg"/>
<image top="603" left="54" width="270" height="136" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-463_2.jpg"/>
<text top="493" left="54" width="769" height="20" font="2">We	can	now	change	the	<b>Color	Over	Life</b>	parameters.	The	graph	in	the	<b>Curve	Editor</b>	tab</text>
<text top="519" left="54" width="763" height="20" font="2">displays	the	emitted	color	versus	the	amount	of	time	the	particle	has	been	alive.	You	can</text>
<text top="545" left="54" width="766" height="20" font="2">adjust	the	values	by	dragging	the	points	around.	Pressing	<i>Ctrl</i>	+	left	mouse	button	adds	a</text>
<text top="571" left="54" width="167" height="20" font="2">new	point	to	a	line:</text>
<text top="776" left="307" width="279" height="20" font="4"><i>Ctrl	+	click	adds	points	to	lines.</i></text>
<text top="845" left="54" width="675" height="20" font="2">You	can	play	around	with	the	particle	emitter	settings	to	create	your	own	spell</text>
<text top="871" left="54" width="124" height="20" font="2">visualizations.</text>
</page>
<page number="464" position="absolute" top="0" left="0" height="1262" width="892">
<image top="194" left="54" width="274" height="173" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-464_1.jpg"/>
<image top="469" left="54" width="270" height="257" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-464_2.jpg"/>
<text top="61" left="54" width="442" height="32" font="7"><b>Settings	for	the	blizzard	spell</b></text>
<text top="110" left="54" width="710" height="20" font="2">At	this	point,	we	should	rename	our	particle	system,	from	<b>NewParticle	System</b>	to</text>
<text top="136" left="54" width="752" height="20" font="2">something	more	descriptive.	Let’s	rename	it	<b>P_Blizzard</b>.	You	can	rename	your	particle</text>
<text top="162" left="54" width="419" height="20" font="2">system	by	simply	clicking	on	it	and	pressing	<i>F2</i>.</text>
<text top="404" left="195" width="503" height="20" font="4"><i>Press	F2	on	an	object	in	the	Content	Browser	to	rename	it</i></text>
<text top="795" left="54" width="729" height="20" font="2">We	will	tweak	some	of	the	settings	to	get	a	blizzard	particle	effect	spell.	Perform	the</text>
<text top="821" left="54" width="138" height="20" font="2">following	steps:</text>
<text top="858" left="69" width="751" height="20" font="2">1.	 Under	the	<b>Emitters</b>	tab,	click	on	the	<b>Required</b>	box.	In	the	<b>Details</b>	pane,	change	the</text>
<text top="884" left="97" width="371" height="19" font="3"><b>Emitter</b>	material	to	<b>m_flare_01</b>	as	shown:</text>
</page>
<page number="465" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="577" height="373" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-465_1.jpg"/>
<image top="553" left="97" width="578" height="356" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-465_2.jpg"/>
<text top="495" left="69" width="747" height="20" font="2">2.	 Under	the	<b>Spawn</b>	module,	change	the	spawn	rate	to	200.	This	increases	the	density</text>
<text top="521" left="97" width="262" height="20" font="2">of	the	visualization,	as	shown:</text>
<text top="979" left="69" width="690" height="20" font="2">3.	 Under	the	<b>Lifetime</b>	module,	increase	the	<b>Max</b>	property	from	1.0	to	2.0.	This</text>
<text top="1005" left="97" width="720" height="20" font="2">introduces	some	variation	to	the	length	of	time	a	particle	will	live,	with	some	of	the</text>
<text top="1031" left="97" width="366" height="20" font="2">emitted	particles	living	longer	than	others.</text>
</page>
<page number="466" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="581" height="548" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-466_1.jpg"/>
<text top="670" left="69" width="756" height="20" font="2">4.	 Under	the	<b>Initial	Size</b>	module,	change	the	<b>Min</b>	property	size	to	12.5	in	<b>X</b>,	<b>Y</b>,	and	<b>Z</b>:</text>
</page>
<page number="467" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="579" height="550" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-467_1.jpg"/>
<image top="704" left="97" width="742" height="372" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-467_2.jpg"/>
<text top="672" left="69" width="763" height="20" font="2">5.	 Under	the	<b>Initial	Velocity</b>	module,	change	the	<b>Min</b>/<b>Max</b>	values	to	the	values	shown:</text>
<text top="1145" left="69" width="726" height="20" font="2">6.	 The	reason	we’re	having	the	blizzard	blow	in	+X	is	because	the	player’s	forward</text>
<text top="1171" left="97" width="736" height="20" font="2">direction	starts	out	in	+X.	Since	the	spell	will	come	from	the	player’s	hands,	we	want</text>
</page>
<page number="468" position="absolute" top="0" left="0" height="1262" width="892">
<image top="142" left="97" width="742" height="482" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-468_1.jpg"/>
<text top="57" left="97" width="449" height="20" font="2">the	spell	to	point	in	the	same	direction	as	the	player.</text>
<text top="83" left="69" width="746" height="20" font="2">7.	 Under	the	<b>Color	Over	Life</b>	menu,	change	the	blue	(<b>Z</b>)	value	to	100.0.	You	will	see</text>
<text top="109" left="97" width="284" height="20" font="2">an	instant	change	to	a	blue	glow:</text>
<text top="659" left="323" width="289" height="20" font="4"><i>Now	it’s	starting	to	look	magical!</i></text>
<text top="728" left="69" width="690" height="20" font="2">8.	 Right-click	on	the	blackish	area	below	the	<b>Color	Over	Life</b>	module.	Choose</text>
<text top="755" left="97" width="246" height="19" font="3"><b>Location</b>	|	<b>Initial	Location</b>:</text>
</page>
<page number="469" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="330" height="620" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-469_1.jpg"/>
<image top="775" left="97" width="581" height="133" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-469_2.jpg"/>
<text top="742" left="69" width="606" height="20" font="2">9.	 Enter	values	under	<b>Start	Location</b>	|	<b>Distribution</b>	as	shown	below:</text>
<text top="977" left="58" width="443" height="20" font="2">10.	 You	should	have	a	blizzard	that	looks	like	this:</text>
</page>
<page number="470" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="97" width="581" height="216" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-470_1.jpg"/>
<image top="422" left="97" width="601" height="709" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-470_2.jpg"/>
<text top="338" left="59" width="752" height="20" font="2">11.	 Move	the	camera	to	a	position	you	like,	then	click	on	the	<b>Thumbnail</b>	option	in	the</text>
<text top="364" left="97" width="695" height="20" font="2">top	menu	bar.	This	will	generate	a	thumbnail	icon	for	your	particle	system	in	the</text>
<text top="390" left="97" width="194" height="19" font="3"><b>Content	Browser</b>	tab.</text>
<text top="1168" left="110" width="716" height="20" font="4"><i>Clicking	Thumbnail	at	the	top	menu	bar	will	generate	a	mini	icon	for	your	particle</i></text>
</page>
<page number="471" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="439" width="58" height="20" font="4"><i>system</i></text>
</page>
<page number="472" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="473" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="295" height="39" font="0"><b>Spell	class	actor</b></text>
<text top="120" left="54" width="39" height="20" font="2">The	</text>
<text top="124" left="93" width="52" height="14" font="5">Spell</text>
<text top="120" left="145" width="684" height="20" font="2">	class	will	ultimately	do	damage	to	all	the	monsters.	Towards	that	end,	we	need</text>
<text top="146" left="54" width="550" height="20" font="2">to	contain	both	a	particle	system	and	a	bounding	box	inside	the	</text>
<text top="150" left="604" width="52" height="14" font="5">Spell</text>
<text top="146" left="656" width="172" height="20" font="2">	class	actor.	When	a</text>
<text top="176" left="54" width="52" height="14" font="5">Spell</text>
<text top="172" left="106" width="265" height="20" font="2">	class	is	cast	by	the	avatar,	the	</text>
<text top="176" left="370" width="52" height="14" font="5">Spell</text>
<text top="172" left="422" width="382" height="20" font="2">	object	will	be	instantiated	into	the	level	and</text>
<text top="198" left="54" width="43" height="20" font="2">start	</text>
<text top="202" left="97" width="62" height="14" font="5">Tick()</text>
<text top="198" left="159" width="201" height="20" font="2">	functioning.	On	every	</text>
<text top="202" left="360" width="62" height="14" font="5">Tick()</text>
<text top="198" left="422" width="61" height="20" font="2">	of	the	</text>
<text top="202" left="482" width="52" height="14" font="5">Spell</text>
<text top="198" left="534" width="264" height="20" font="2">	object,	any	monster	contained</text>
<text top="224" left="54" width="510" height="20" font="2">inside	the	spell’s	bounding	volume	will	be	affected	by	that	</text>
<text top="228" left="564" width="52" height="14" font="5">Spell</text>
<text top="224" left="616" width="5" height="20" font="2">.</text>
<text top="260" left="54" width="39" height="20" font="2">The	</text>
<text top="265" left="93" width="52" height="14" font="5">Spell</text>
<text top="260" left="145" width="460" height="20" font="2">	class	should	look	something	like	the	following	code:</text>
<text top="304" left="54" width="83" height="14" font="5">UCLASS()</text>
<text top="324" left="54" width="435" height="14" font="5">class	GOLDENEGG_API	ASpell	:	public	AActor</text>
<text top="345" left="54" width="10" height="14" font="5">{</text>
<text top="365" left="54" width="259" height="14" font="5">		GENERATED_UCLASS_BODY()</text>
<text top="406" left="54" width="352" height="14" font="5">		//	box	defining	volume	of	damage</text>
<text top="427" left="54" width="725" height="14" font="5">		UPROPERTY(VisibleDefaultsOnly,	BlueprintReadOnly,	Category	=		Spell)</text>
<text top="447" left="54" width="404" height="14" font="5">		TSubobjectPtr&lt;UBoxComponent&gt;	ProxBox;</text>
<text top="488" left="54" width="456" height="14" font="5">		//	the	particle	visualization	of	the	spell</text>
<text top="509" left="54" width="725" height="14" font="5">		UPROPERTY(VisibleDefaultsOnly,	BlueprintReadOnly,	Category	=		Spell)</text>
<text top="530" left="54" width="539" height="14" font="5">		TSubobjectPtr&lt;UParticleSystemComponent&gt;	Particles;</text>
<text top="571" left="54" width="476" height="14" font="5">		//	How	much	damage	the	spell	does	per	second</text>
<text top="591" left="54" width="653" height="14" font="5">		UPROPERTY(EditAnywhere,	BlueprintReadWrite,	Category	=	Spell)</text>
<text top="612" left="54" width="249" height="14" font="5">		float	DamagePerSecond;</text>
<text top="653" left="54" width="300" height="14" font="5">		//	How	long	the	spell	lasts</text>
<text top="673" left="54" width="653" height="14" font="5">		UPROPERTY(EditAnywhere,	BlueprintReadWrite,	Category	=	Spell)</text>
<text top="694" left="54" width="176" height="14" font="5">		float	Duration;</text>
<text top="735" left="54" width="590" height="14" font="5">		//	Length	of	time	the	spell	has	been	alive	in	the	level</text>
<text top="755" left="54" width="186" height="14" font="5">		float	TimeAlive;</text>
<text top="796" left="54" width="580" height="14" font="5">		//	The	original	caster	of	the	spell	(so	player	doesn't</text>
<text top="817" left="54" width="145" height="14" font="5">		//	hit	self)</text>
<text top="837" left="54" width="176" height="14" font="5">		AActor*	Caster;</text>
<text top="878" left="54" width="425" height="14" font="5">		//	Parents	this	spell	to	a	caster	actor</text>
<text top="899" left="54" width="363" height="14" font="5">		void	SetCaster(	AActor*	caster	);</text>
<text top="940" left="54" width="663" height="14" font="5">		//	Runs	each	frame.	override	the	Tick	function	to	deal	damage	</text>
<text top="961" left="54" width="404" height="14" font="5">		//	to	anything	in	ProxBox	each	frame.</text>
<text top="981" left="54" width="528" height="14" font="5">		virtual	void	Tick(	float	DeltaSeconds	)	override;</text>
<text top="1002" left="54" width="21" height="14" font="5">};</text>
<text top="1033" left="54" width="701" height="20" font="2">There	are	only	three	functions	we	need	to	worry	about	implementing,	namely	the</text>
<text top="1063" left="54" width="166" height="14" font="5">ASpell::ASpell()</text>
<text top="1059" left="220" width="144" height="20" font="2">	constructor,	the	</text>
<text top="1063" left="364" width="197" height="14" font="5">ASpell::SetCaster()</text>
<text top="1059" left="561" width="151" height="20" font="2">	function,	and	the</text>
<text top="1089" left="54" width="145" height="14" font="5">ASpell::Tick()</text>
<text top="1085" left="199" width="83" height="20" font="2">	function.</text>
<text top="1121" left="54" width="84" height="20" font="2">Open	the	</text>
<text top="1126" left="138" width="93" height="14" font="5">Spell.cpp</text>
<text top="1121" left="231" width="263" height="20" font="2">	file.	Add	a	line	to	include	the	</text>
<text top="1126" left="494" width="93" height="14" font="5">Monster.h</text>
<text top="1121" left="588" width="222" height="20" font="2">	file,	so	we	can	access	the</text>
<text top="1147" left="54" width="113" height="20" font="2">definition	of	</text>
<text top="1152" left="167" width="73" height="14" font="5">Monster</text>
<text top="1147" left="239" width="161" height="20" font="2">	objects	inside	the	</text>
<text top="1152" left="400" width="93" height="14" font="5">Spell.cpp</text>
<text top="1147" left="493" width="329" height="20" font="2">	file,	as	shown	in	the	following	line	of</text>
<text top="1173" left="54" width="47" height="20" font="2">code:</text>
</page>
<page number="474" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="207" height="14" font="5">#include	&#34;Monster.h&#34;</text>
<text top="89" left="54" width="783" height="20" font="2">First,	the	constructor,	which	sets	up	the	spell	and	initializes	all	components	is	shown	in	the</text>
<text top="115" left="54" width="136" height="20" font="2">following	code:</text>
<text top="158" left="54" width="746" height="14" font="5">ASpell::ASpell(const	class	FPostConstructInitializeProperties&amp;		PCIP)	:	</text>
<text top="178" left="54" width="114" height="14" font="5">Super(PCIP)</text>
<text top="199" left="54" width="10" height="14" font="5">{</text>
<text top="220" left="54" width="642" height="14" font="5">		ProxBox	=	PCIP.CreateDefaultSubobject&lt;UBoxComponent&gt;(this,		</text>
<text top="240" left="54" width="176" height="14" font="5">TEXT(&#34;ProxBox&#34;));</text>
<text top="261" left="54" width="777" height="14" font="5">		Particles	=	PCIP.CreateDefaultSubobject&lt;UParticleSystemComponent&gt;(this,		</text>
<text top="281" left="54" width="249" height="14" font="5">TEXT(&#34;ParticleSystem&#34;));</text>
<text top="322" left="54" width="601" height="14" font="5">		//	The	Particles	are	the	root	component,	and	the	ProxBox</text>
<text top="343" left="54" width="404" height="14" font="5">		//	is	a	child	of	the	Particle	system.</text>
<text top="363" left="54" width="590" height="14" font="5">		//	If	it	were	the	other	way	around,	scaling	the	ProxBox</text>
<text top="384" left="54" width="580" height="14" font="5">		//	would	also	scale	the	Particles,	which	we	don't	want</text>
<text top="404" left="54" width="290" height="14" font="5">		RootComponent	=	Particles;</text>
<text top="425" left="54" width="383" height="14" font="5">		ProxBox-&gt;AttachTo(	RootComponent	);</text>
<text top="466" left="54" width="155" height="14" font="5">		Duration	=	3;</text>
<text top="486" left="54" width="228" height="14" font="5">		DamagePerSecond	=	1;</text>
<text top="507" left="54" width="166" height="14" font="5">		TimeAlive	=	0;</text>
<text top="548" left="54" width="663" height="14" font="5">		PrimaryActorTick.bCanEverTick	=	true;//required	for	spells	to	</text>
<text top="568" left="54" width="104" height="14" font="5">		//	tick!</text>
<text top="589" left="54" width="10" height="14" font="5">}</text>
<text top="620" left="54" width="391" height="20" font="2">Of	particular	importance	is	the	last	line	here,	</text>
<text top="625" left="445" width="373" height="14" font="5">PrimaryActorTick.bCanEverTick	=	true</text>
<text top="620" left="818" width="5" height="20" font="2">.</text>
<text top="646" left="54" width="226" height="20" font="2">If	you	don’t	set	that,	your	</text>
<text top="651" left="280" width="52" height="14" font="5">Spell</text>
<text top="646" left="331" width="216" height="20" font="2">	objects	won’t	ever	have	</text>
<text top="651" left="547" width="62" height="14" font="5">Tick()</text>
<text top="646" left="610" width="62" height="20" font="2">	called.</text>
<text top="683" left="54" width="161" height="20" font="2">Next,	we	have	the	</text>
<text top="687" left="215" width="114" height="14" font="5">SetCaster()</text>
<text top="683" left="329" width="475" height="20" font="2">	method.	This	is	called	so	that	the	person	who	casts	the</text>
<text top="709" left="54" width="184" height="20" font="2">spell	is	known	to	the	</text>
<text top="713" left="238" width="52" height="14" font="5">Spell</text>
<text top="709" left="290" width="522" height="20" font="2">	object.	We	can	ensure	that	the	caster	can’t	hurt	himself	with</text>
<text top="735" left="54" width="375" height="20" font="2">his	own	spells	by	using	the	following	code:</text>
<text top="778" left="54" width="414" height="14" font="5">void	ASpell::SetCaster(	AActor	*caster	)</text>
<text top="799" left="54" width="10" height="14" font="5">{</text>
<text top="819" left="54" width="186" height="14" font="5">		Caster	=	caster;</text>
<text top="840" left="54" width="559" height="14" font="5">		AttachRootComponentTo(	caster-&gt;GetRootComponent()	);</text>
<text top="860" left="54" width="10" height="14" font="5">}</text>
<text top="891" left="54" width="179" height="20" font="2">Finally,	we	have	the	</text>
<text top="896" left="233" width="145" height="14" font="5">ASpell::Tick()</text>
<text top="891" left="378" width="379" height="20" font="2">	method,	which	actually	deals	damage	to	all</text>
<text top="917" left="54" width="427" height="20" font="2">contained	actors,	as	shown	in	the	following	code:</text>
<text top="961" left="54" width="404" height="14" font="5">void	ASpell::Tick(	float	DeltaSeconds	)</text>
<text top="981" left="54" width="10" height="14" font="5">{</text>
<text top="1002" left="54" width="311" height="14" font="5">		Super::Tick(	DeltaSeconds	);</text>
<text top="1043" left="54" width="549" height="14" font="5">		//	search	the	proxbox	for	all	actors	in	the	volume.</text>
<text top="1063" left="54" width="259" height="14" font="5">		TArray&lt;AActor*&gt;	actors;</text>
<text top="1084" left="54" width="435" height="14" font="5">		ProxBox-&gt;GetOverlappingActors(	actors	);</text>
<text top="1125" left="54" width="404" height="14" font="5">		//	damage	each	actor	the	box	overlaps</text>
<text top="1145" left="54" width="425" height="14" font="5">		for(	int	c	=	0;	c	&lt;	actors.Num();	c++	)</text>
<text top="1166" left="54" width="31" height="14" font="5">		{</text>
<text top="1186" left="54" width="373" height="14" font="5">				//	don't	damage	the	spell	caster</text>
</page>
<page number="475" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="321" height="14" font="5">				if(	actors[	c	]	!=	Caster	)</text>
<text top="78" left="54" width="52" height="14" font="5">				{</text>
<text top="99" left="54" width="580" height="14" font="5">						//	Only	apply	the	damage	if	the	box	is	overlapping</text>
<text top="119" left="54" width="363" height="14" font="5">						//	the	actors	ROOT	component.</text>
<text top="140" left="54" width="580" height="14" font="5">						//	This	way	damage	doesn't	get	applied	for	simply	</text>
<text top="160" left="54" width="508" height="14" font="5">						//	overlapping	the	SightSphere	of	a	monster</text>
<text top="181" left="54" width="559" height="14" font="5">						AMonster	*monster	=	Cast&lt;AMonster&gt;(	actors[c]	);</text>
<text top="222" left="54" width="653" height="14" font="5">						if(	monster	&amp;&amp;	ProxBox-&gt;IsOverlappingComponent(	monster-	</text>
<text top="242" left="54" width="218" height="14" font="5">&gt;CapsuleComponent	)	)</text>
<text top="263" left="54" width="73" height="14" font="5">						{</text>
<text top="283" left="54" width="787" height="14" font="5">								monster-&gt;TakeDamage(	DamagePerSecond*DeltaSeconds,		FDamageEvent(),	</text>
<text top="304" left="54" width="104" height="14" font="5">0,	this	);</text>
<text top="324" left="54" width="73" height="14" font="5">						}</text>
<text top="365" left="54" width="590" height="14" font="5">						//	to	damage	other	class	types,	try	a	checked	cast	</text>
<text top="386" left="54" width="155" height="14" font="5">						//	here..</text>
<text top="406" left="54" width="52" height="14" font="5">				}</text>
<text top="427" left="54" width="31" height="14" font="5">		}</text>
<text top="468" left="54" width="290" height="14" font="5">		TimeAlive	+=	DeltaSeconds;</text>
<text top="488" left="54" width="290" height="14" font="5">		if(	TimeAlive	&gt;	Duration	)</text>
<text top="509" left="54" width="31" height="14" font="5">		{</text>
<text top="530" left="54" width="145" height="14" font="5">				Destroy();</text>
<text top="550" left="54" width="31" height="14" font="5">		}</text>
<text top="571" left="54" width="10" height="14" font="5">}</text>
<text top="602" left="54" width="39" height="20" font="2">The	</text>
<text top="606" left="93" width="145" height="14" font="5">ASpell::Tick()</text>
<text top="602" left="238" width="395" height="20" font="2">	function	does	a	number	of	things,	as	follows:</text>
<text top="639" left="97" width="237" height="20" font="2">Gets	all	actors	overlapping	</text>
<text top="643" left="335" width="73" height="14" font="5">ProxBox</text>
<text top="639" left="407" width="417" height="20" font="2">.	Any	actor	that	is	not	the	caster	gets	damaged	if</text>
<text top="665" left="97" width="724" height="20" font="2">the	component	overlapped	is	the	root	component	of	that	object.	The	reason	we	have</text>
<text top="690" left="97" width="705" height="20" font="2">to	check	for	overlapping	with	the	root	component	is	because	if	we	don’t,	the	spell</text>
<text top="716" left="97" width="248" height="20" font="2">might	overlap	the	monster’s	</text>
<text top="721" left="345" width="114" height="14" font="5">SightSphere</text>
<text top="716" left="459" width="353" height="20" font="2">,	which	means	we	will	get	hits	from	very</text>
<text top="742" left="97" width="271" height="20" font="2">far	away,	which	we	don’t	want.</text>
<text top="768" left="97" width="737" height="20" font="2">Notices	that	if	we	had	another	class	of	thing	that	should	get	damaged,	we	would	have</text>
<text top="794" left="97" width="673" height="20" font="2">to	attempt	a	cast	to	each	object	type	specifically.	Each	class	type	might	have	a</text>
<text top="820" left="97" width="737" height="20" font="2">different	type	of	bounding	volume	that	should	be	collided	with,	other	types	might	not</text>
<text top="846" left="97" width="92" height="20" font="2">even	have	</text>
<text top="850" left="189" width="166" height="14" font="5">CapsuleComponent</text>
<text top="846" left="355" width="157" height="20" font="2">	(they	might	have	</text>
<text top="850" left="512" width="73" height="14" font="5">ProxBox</text>
<text top="846" left="585" width="29" height="20" font="2">	or	</text>
<text top="850" left="614" width="104" height="14" font="5">ProxSphere</text>
<text top="846" left="717" width="13" height="20" font="2">).</text>
<text top="872" left="97" width="693" height="20" font="2">Increases	the	amount	of	time	the	spell	has	been	alive	for.	If	the	spell	exceeds	the</text>
<text top="898" left="97" width="551" height="20" font="2">duration	it	is	allotted	to	be	cast	for,	it	is	removed	from	the	level.</text>
<text top="935" left="54" width="685" height="20" font="2">Now,	let’s	focus	on	how	the	player	can	acquire	spells,	by	creating	an	individual</text>
<text top="965" left="54" width="104" height="14" font="5">PickupItem</text>
<text top="961" left="158" width="419" height="20" font="2">	for	each	spell	object	that	the	player	can	pick	up.</text>
</page>
<page number="476" position="absolute" top="0" left="0" height="1262" width="892">
<image top="246" left="54" width="745" height="108" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-476_1.jpg"/>
<image top="482" left="54" width="645" height="116" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-476_2.jpg"/>
<image top="751" left="54" width="518" height="93" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-476_3.jpg"/>
<text top="61" left="54" width="348" height="32" font="7"><b>Blueprinting	our	spells</b></text>
<text top="110" left="54" width="380" height="20" font="2">Compile	and	run	your	C++	project	with	the	</text>
<text top="115" left="434" width="52" height="14" font="5">Spell</text>
<text top="110" left="486" width="317" height="20" font="2">	class	that	we	just	added.	We	need	to</text>
<text top="136" left="54" width="780" height="20" font="2">create	blueprints	for	each	of	the	spells	we	want	to	be	able	to	cast.	In	the	<b>Class	Viewer</b>	tab,</text>
<text top="162" left="54" width="107" height="20" font="2">start	to	type	</text>
<text top="167" left="161" width="52" height="14" font="5">Spell</text>
<text top="162" left="213" width="226" height="20" font="2">,	and	you	should	see	your	</text>
<text top="167" left="439" width="52" height="14" font="5">Spell</text>
<text top="162" left="491" width="337" height="20" font="2">	class	appear.	Right-click	on	<b>Spell</b>,	and</text>
<text top="188" left="54" width="782" height="20" font="2">create	a	blueprint	called	<b>BP_Spell_Blizzard</b>,	and	then	double-click	to	open	it,	as	shown	in</text>
<text top="214" left="54" width="218" height="20" font="2">the	following	screenshot:</text>
<text top="424" left="54" width="781" height="20" font="2">Inside	the	spell’s	properties,	choose	the	<b>P_Blizzard</b>	spell	for	the	particle	emitter,	as	shown</text>
<text top="450" left="54" width="240" height="20" font="2">in	the	following	screenshot:</text>
<text top="667" left="54" width="764" height="20" font="2">Scroll	down	until	you	reach	the	<b>Spell</b>	category,	and	update	the	<b>Damage	Per	Second</b>	and</text>
<text top="693" left="54" width="776" height="19" font="3"><b>Duration</b>	parameters	to	values	you	like.	Here,	the	blizzard	spell	will	last	3.0	seconds,	and</text>
<text top="719" left="54" width="701" height="20" font="2">do	16.0	damage	total	per	second.	After	three	seconds,	the	blizzard	will	disappear.</text>
<text top="913" left="54" width="766" height="20" font="2">After	you	have	configured	the	<b>Default</b>	properties,	switch	over	to	the	<b>Components</b>	tab	to</text>
<text top="939" left="54" width="589" height="20" font="2">make	some	further	modifications.	Click	on	and	change	the	shape	of	</text>
<text top="943" left="643" width="73" height="14" font="5">ProxBox</text>
<text top="939" left="715" width="88" height="20" font="2">	so	that	its</text>
<text top="965" left="54" width="769" height="20" font="2">shape	makes	sense.	The	box	should	wrap	the	most	intense	part	of	the	particle	system,	but</text>
<text top="991" left="54" width="425" height="20" font="2">don’t	get	carried	away	in	expanding	its	size.	The	</text>
<text top="995" left="479" width="73" height="14" font="5">ProxBox</text>
<text top="991" left="552" width="242" height="20" font="2">	object	shouldn’t	be	too	big,</text>
<text top="1017" left="54" width="774" height="20" font="2">because	then	your	blizzard	spell	would	affect	things	that	aren’t	even	being	touched	by	the</text>
<text top="1043" left="54" width="647" height="20" font="2">blizzard.	As	shown	in	the	following	screenshot,	a	couple	of	outliers	are	ok.</text>
</page>
<page number="477" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="540" height="186" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-477_1.jpg"/>
<text top="308" left="54" width="634" height="20" font="2">Your	blizzard	spell	is	now	blueprinted	and	ready	to	be	used	by	the	player.</text>
</page>
<page number="478" position="absolute" top="0" left="0" height="1262" width="892">
<image top="169" left="54" width="665" height="610" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-478_1.jpg"/>
<text top="61" left="54" width="255" height="32" font="7"><b>Picking	up	spells</b></text>
<text top="110" left="54" width="739" height="20" font="2">Recall	that	we	previously	programmed	our	inventory	to	display	the	number	of	pickup</text>
<text top="136" left="54" width="733" height="20" font="2">items	the	player	has	when	the	user	presses	<i>I</i>.	We	want	to	do	more	than	that,	however.</text>
<text top="816" left="276" width="341" height="20" font="4"><i>Items	displayed	when	the	user	presses	I</i></text>
<text top="885" left="54" width="473" height="20" font="2">To	allow	the	player	to	pick	up	spells,	we’ll	modify	the	</text>
<text top="889" left="527" width="104" height="14" font="5">PickupItem</text>
<text top="885" left="631" width="190" height="20" font="2">	class	to	include	a	slot</text>
<text top="911" left="54" width="616" height="20" font="2">for	a	blueprint	of	the	spell	the	player	casts	by	using	the	following	code:</text>
<text top="954" left="54" width="290" height="14" font="5">//	inside	class	APickupItem:</text>
<text top="975" left="54" width="539" height="14" font="5">//	If	this	item	casts	a	spell	when	used,	set	it	here</text>
<text top="995" left="54" width="621" height="14" font="5">UPROPERTY(EditAnywhere,	BlueprintReadWrite,	Category	=	Item)</text>
<text top="1016" left="54" width="145" height="14" font="5">UClass*	Spell;</text>
<text top="1047" left="54" width="205" height="20" font="2">Once	you’ve	added	the	</text>
<text top="1051" left="259" width="135" height="14" font="5">UClass*	Spell</text>
<text top="1047" left="394" width="138" height="20" font="2">	property	to	the	</text>
<text top="1051" left="532" width="114" height="14" font="5">APickupItem</text>
<text top="1047" left="645" width="181" height="20" font="2">	class,	recompile	and</text>
<text top="1073" left="54" width="598" height="20" font="2">rerun	your	C++	project.	Now,	you	can	proceed	to	make	blueprints	of	</text>
<text top="1077" left="652" width="104" height="14" font="5">PickupItem</text>
<text top="1099" left="54" width="160" height="20" font="2">instances	for	your	</text>
<text top="1103" left="214" width="52" height="14" font="5">Spell</text>
<text top="1099" left="266" width="72" height="20" font="2">	objects.</text>
<text top="1137" left="54" width="546" height="22" font="8"><b>Creating	blueprints	for	PickupItems	that	cast	spells</b></text>
<text top="1175" left="54" width="768" height="20" font="2">Create	a	<b>PickupItem</b>	blueprint	called	<b>BP_Pickup_Spell_Blizzard</b>.	Double-click	on	it	to</text>
</page>
<page number="479" position="absolute" top="0" left="0" height="1262" width="892">
<image top="90" left="54" width="743" height="115" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-479_1.jpg"/>
<image top="420" left="54" width="737" height="336" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-479_2.jpg"/>
<text top="57" left="54" width="486" height="20" font="2">edit	its	properties,	as	shown	in	the	following	screenshot:</text>
<text top="273" left="54" width="457" height="20" font="2">I	set	the	blizzard	item’s	pickup	properties	as	follows:</text>
<text top="310" left="54" width="768" height="20" font="2">The	name	of	the	item	is	<b>Blizzard	Spell</b>,	and	five	are	in	each	package.	I	took	a	screenshot</text>
<text top="336" left="54" width="780" height="20" font="2">of	the	blizzard	particle	system	and	imported	it	to	the	project,	so	the	<b>Icon</b>	is	selected	as	that</text>
<text top="362" left="54" width="770" height="20" font="2">image.	Under	spell,	I	selected	<b>BP_Spell_Blizzard</b>	as	the	name	of	the	spell	to	be	cast	(not</text>
<text top="388" left="54" width="592" height="19" font="3"><b>BP_Pickup_Spell_Blizzard</b>),	as	shown	in	the	following	screenshot:</text>
<text top="825" left="54" width="269" height="20" font="2">I	selected	a	blue	sphere	for	the	</text>
<text top="830" left="323" width="41" height="14" font="5">Mesh</text>
<text top="825" left="365" width="108" height="20" font="2">	class	of	the	</text>
<text top="830" left="472" width="104" height="14" font="5">PickupItem</text>
<text top="825" left="576" width="211" height="20" font="2">	class.	For	<b>Icon</b>,	I	took	a</text>
<text top="851" left="54" width="712" height="20" font="2">screenshot	of	the	blizzard	spell	in	the	particle	viewer	preview,	saved	it	to	disk,	and</text>
<text top="877" left="54" width="760" height="20" font="2">imported	that	image	to	the	project	(see	the	images	folder	in	the	<b>Content	Browser</b>	tab	of</text>
<text top="903" left="54" width="171" height="20" font="2">the	sample	project).</text>
</page>
<page number="480" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="785" height="497" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-480_1.jpg"/>
<image top="677" left="54" width="785" height="321" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-480_2.jpg"/>
<text top="619" left="54" width="178" height="20" font="2">Place	a	few	of	these	</text>
<text top="624" left="232" width="104" height="14" font="5">PickupItem</text>
<text top="619" left="336" width="460" height="20" font="2">	in	your	level.	If	we	pick	them	up,	we	will	have	some</text>
<text top="645" left="54" width="273" height="20" font="2">blizzard	spells	in	our	inventory.</text>
<text top="1034" left="85" width="723" height="20" font="4"><i>Left:	Blizzard	spell	pickup	items	in	game	world.	Right:	Blizzard	spell	pickup	item	in</i></text>
<text top="1060" left="404" width="86" height="20" font="4"><i>inventory.</i></text>
<text top="1129" left="54" width="753" height="20" font="2">Now	we	need	to	activate	the	blizzard.	Since	we	already	attached	the	left	mouse	click	in</text>
<text top="1155" left="54" width="95" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#367">Chapter	10</a></text>
<text top="1155" left="149" width="670" height="20" font="2">,	<i>Inventory	System	and	Pickup	Items</i>	to	dragging	the	icons	around,	let’s	attach</text>
<text top="1181" left="54" width="354" height="20" font="2">the	right	mouse	click	to	casting	the	spell.</text>
</page>
<page number="481" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="482" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="483" position="absolute" top="0" left="0" height="1262" width="892">
<image top="204" left="54" width="540" height="127" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-483_1.jpg"/>
<text top="64" left="54" width="734" height="39" font="0"><b>Attaching	right	mouse	click	to	cast	spell</b></text>
<text top="120" left="54" width="776" height="20" font="2">The	right	mouse	click	will	have	to	go	through	quite	a	few	function	calls	before	calling	the</text>
<text top="146" left="54" width="73" height="20" font="2">avatar’s	</text>
<text top="150" left="127" width="93" height="14" font="5">CastSpell</text>
<text top="146" left="221" width="563" height="20" font="2">	method.	The	call	graph	would	look	something	like	the	following</text>
<text top="172" left="54" width="97" height="20" font="2">screenshot:</text>
<text top="401" left="54" width="657" height="20" font="2">A	few	things	happen	between	right	click	and	spell	cast.	They	are	as	follows:</text>
<text top="438" left="97" width="715" height="20" font="2">As	we	saw	before,	all	user	mouse	and	keyboard	interactions	are	routed	through	the</text>
<text top="468" left="97" width="62" height="14" font="5">Avatar</text>
<text top="464" left="159" width="158" height="20" font="2">	object.	When	the	</text>
<text top="468" left="317" width="62" height="14" font="5">Avatar</text>
<text top="464" left="379" width="417" height="20" font="2">	object	detects	a	right-click,	it	will	pass	the	click</text>
<text top="490" left="97" width="74" height="20" font="2">event	to	</text>
<text top="494" left="172" width="31" height="14" font="5">HUD</text>
<text top="490" left="203" width="78" height="20" font="2">	through	</text>
<text top="494" left="281" width="290" height="14" font="5">AAvatar::MouseRightClicked()</text>
<text top="490" left="571" width="5" height="20" font="2">.</text>
<text top="515" left="97" width="108" height="20" font="2">Recall	from<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#367">	</a></text>
<text top="515" left="205" width="95" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#367">Chapter	10</a></text>
<text top="515" left="300" width="468" height="20" font="2">,	<i>Inventory	System	and	Pickup	Items</i>	where	we	used	a	</text>
<text top="520" left="769" width="62" height="14" font="5">struct</text>
<text top="546" left="97" width="62" height="14" font="5">Widget</text>
<text top="541" left="159" width="500" height="20" font="2">	class	to	keep	track	of	the	items	the	player	had	picked	up.	</text>
<text top="546" left="659" width="135" height="14" font="5">struct	Widget</text>
<text top="541" left="794" width="44" height="20" font="2">	only</text>
<text top="567" left="97" width="170" height="20" font="2">had	three	members:</text>
<text top="611" left="97" width="135" height="14" font="5">struct	Widget</text>
<text top="631" left="97" width="10" height="14" font="5">{</text>
<text top="652" left="97" width="124" height="14" font="5">		Icon	icon;</text>
<text top="672" left="97" width="228" height="14" font="5">		FVector2D	pos,	size;</text>
<text top="693" left="97" width="342" height="14" font="5">		///..	and	some	member	functions</text>
<text top="713" left="97" width="21" height="14" font="5">};</text>
<text top="744" left="97" width="361" height="20" font="2">We	will	need	to	add	an	extra	property	for	</text>
<text top="749" left="458" width="135" height="14" font="5">struct	Widget</text>
<text top="744" left="593" width="240" height="20" font="2">	class	to	remember	the	spell</text>
<text top="770" left="97" width="65" height="20" font="2">it	casts.</text>
<text top="807" left="97" width="39" height="20" font="2">The	</text>
<text top="811" left="136" width="31" height="14" font="5">HUD</text>
<text top="807" left="167" width="382" height="20" font="2">	will	determine	if	the	click	event	was	inside	</text>
<text top="811" left="549" width="62" height="14" font="5">Widget</text>
<text top="807" left="611" width="22" height="20" font="2">	in</text>
<text top="837" left="97" width="280" height="14" font="5">AMyHUD::MouseRightClicked()</text>
<text top="833" left="377" width="5" height="20" font="2">.</text>
<text top="870" left="97" width="197" height="20" font="2">If	the	click	was	on	the	</text>
<text top="874" left="294" width="62" height="14" font="5">Widget</text>
<text top="870" left="356" width="189" height="20" font="2">	that	casts	a	spell,	the	</text>
<text top="874" left="545" width="31" height="14" font="5">HUD</text>
<text top="870" left="576" width="224" height="20" font="2">	then	calls	the	avatar	back</text>
<text top="896" left="97" width="385" height="20" font="2">with	the	request	to	cast	that	spell,	by	calling	</text>
<text top="900" left="482" width="207" height="14" font="5">AAvatar::CastSpell()</text>
<text top="896" left="689" width="5" height="20" font="2">.</text>
</page>
<page number="484" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="598" height="32" font="7"><b>Writing	the	avatar’s	CastSpell	function</b></text>
<text top="110" left="54" width="715" height="20" font="2">We	will	implement	the	preceding	call	graph	in	reverse.	We	will	start	by	writing	the</text>
<text top="136" left="54" width="402" height="20" font="2">function	that	actually	casts	spells	in	the	game,	</text>
<text top="141" left="456" width="207" height="14" font="5">AAvatar::CastSpell()</text>
<text top="136" left="663" width="145" height="20" font="2">,	as	shown	in	the</text>
<text top="162" left="54" width="136" height="20" font="2">following	code:</text>
<text top="205" left="54" width="435" height="14" font="5">void	AAvatar::CastSpell(	UClass*	bpSpell	)</text>
<text top="226" left="54" width="10" height="14" font="5">{</text>
<text top="247" left="54" width="518" height="14" font="5">		//	instantiate	the	spell	and	attach	to	character</text>
<text top="267" left="54" width="735" height="14" font="5">		ASpell	*spell	=	GetWorld()-&gt;SpawnActor&lt;ASpell&gt;(bpSpell,		FVector(0),	</text>
<text top="288" left="54" width="145" height="14" font="5">FRotator(0)	);</text>
<text top="329" left="54" width="135" height="14" font="5">		if(	spell	)</text>
<text top="349" left="54" width="31" height="14" font="5">		{</text>
<text top="370" left="54" width="300" height="14" font="5">				spell-&gt;SetCaster(	this	);</text>
<text top="390" left="54" width="31" height="14" font="5">		}</text>
<text top="411" left="54" width="62" height="14" font="5">		else</text>
<text top="431" left="54" width="31" height="14" font="5">		{</text>
<text top="452" left="54" width="653" height="14" font="5">				GEngine-&gt;AddOnScreenDebugMessage(	1,	5.f,	FColor::Yellow,		</text>
<text top="472" left="54" width="476" height="14" font="5">FString(&#34;can't	cast	&#34;)	+	bpSpell-&gt;GetName()	);</text>
<text top="493" left="54" width="31" height="14" font="5">		}</text>
<text top="513" left="54" width="10" height="14" font="5">}</text>
<text top="545" left="54" width="783" height="20" font="2">You	might	find	that	actually	calling	a	spell	is	remarkably	simple.	There	are	two	basic	steps</text>
<text top="571" left="54" width="167" height="20" font="2">to	casting	the	spell:</text>
<text top="607" left="97" width="444" height="20" font="2">Instantiate	the	spell	object	using	the	world	object’s	</text>
<text top="612" left="541" width="104" height="14" font="5">SpawnActor</text>
<text top="607" left="644" width="77" height="20" font="2">	function</text>
<text top="633" left="97" width="187" height="20" font="2">Attach	it	to	the	avatar</text>
<text top="670" left="54" width="83" height="20" font="2">Once	the	</text>
<text top="674" left="137" width="52" height="14" font="5">Spell</text>
<text top="670" left="189" width="219" height="20" font="2">	object	is	instantiated,	its	</text>
<text top="674" left="408" width="62" height="14" font="5">Tick()</text>
<text top="670" left="470" width="341" height="20" font="2">	function	will	run	each	frame	when	that</text>
<text top="696" left="54" width="249" height="20" font="2">spell	is	in	the	level.	On	each	</text>
<text top="700" left="303" width="62" height="14" font="5">Tick()</text>
<text top="696" left="365" width="43" height="20" font="2">,	the	</text>
<text top="700" left="408" width="52" height="14" font="5">Spell</text>
<text top="696" left="460" width="374" height="20" font="2">	object	will	automatically	feel	out	monsters</text>
<text top="722" left="54" width="714" height="20" font="2">within	the	level	and	damage	them.	A	lot	happens	with	each	line	of	code	mentioned</text>
<text top="748" left="54" width="408" height="20" font="2">previously,	so	let’s	discuss	each	line	separately.</text>
<text top="786" left="54" width="549" height="22" font="8"><b>Instantiating	the	spell	–	GetWorld()-&gt;SpawnActor()</b></text>
<text top="824" left="54" width="117" height="20" font="2">To	create	the	</text>
<text top="829" left="171" width="52" height="14" font="5">Spell</text>
<text top="824" left="222" width="399" height="20" font="2">	object	from	the	blueprint,	we	need	to	call	the	</text>
<text top="829" left="621" width="124" height="14" font="5">SpawnActor()</text>
<text top="824" left="745" width="77" height="20" font="2">	function</text>
<text top="850" left="54" width="79" height="20" font="2">from	the	</text>
<text top="855" left="133" width="52" height="14" font="5">World</text>
<text top="850" left="185" width="108" height="20" font="2">	object.	The	</text>
<text top="855" left="293" width="124" height="14" font="5">SpawnActor()</text>
<text top="850" left="417" width="405" height="20" font="2">	function	can	take	any	blueprint	and	instantiate</text>
<text top="876" left="54" width="303" height="20" font="2">it	within	the	level.	Fortunately,	the	</text>
<text top="881" left="357" width="62" height="14" font="5">Avatar</text>
<text top="876" left="419" width="207" height="20" font="2">	object	(and	indeed	any	</text>
<text top="881" left="626" width="52" height="14" font="5">Actor</text>
<text top="876" left="678" width="147" height="20" font="2">	object)	can	get	a</text>
<text top="902" left="54" width="117" height="20" font="2">handle	to	the	</text>
<text top="907" left="171" width="52" height="14" font="5">World</text>
<text top="902" left="223" width="352" height="20" font="2">	object	at	any	time	by	simply	calling	the	</text>
<text top="907" left="575" width="104" height="14" font="5">GetWorld()</text>
<text top="902" left="678" width="159" height="20" font="2">	member	function.</text>
<text top="939" left="54" width="275" height="20" font="2">The	line	of	code	that	brings	the	</text>
<text top="943" left="329" width="52" height="14" font="5">Spell</text>
<text top="939" left="381" width="296" height="20" font="2">	object	into	the	level	is	as	follows:</text>
<text top="982" left="54" width="725" height="14" font="5">ASpell	*spell	=	GetWorld()-&gt;SpawnActor&lt;ASpell&gt;(	bpSpell,		FVector(0),	</text>
<text top="1003" left="54" width="145" height="14" font="5">FRotator(0)	);</text>
<text top="1034" left="54" width="595" height="20" font="2">There	are	a	couple	of	things	to	note	about	the	preceding	line	of	code:</text>
<text top="1075" left="97" width="73" height="14" font="5">bpSpell</text>
<text top="1071" left="170" width="232" height="20" font="2">	must	be	the	blueprint	of	a	</text>
<text top="1075" left="402" width="52" height="14" font="5">Spell</text>
<text top="1071" left="453" width="187" height="20" font="2">	object	to	create.	The	</text>
<text top="1075" left="640" width="83" height="14" font="5">&lt;ASpell&gt;</text>
<text top="1071" left="723" width="80" height="20" font="2">	object	in</text>
<text top="1097" left="97" width="354" height="20" font="2">angle	brackets	indicates	that	expectation.</text>
<text top="1123" left="97" width="80" height="20" font="2">The	new	</text>
<text top="1127" left="178" width="52" height="14" font="5">Spell</text>
<text top="1123" left="229" width="602" height="20" font="2">	object	starts	out	at	the	origin	(0,	0,	0),	and	with	no	additional	rotation</text>
<text top="1148" left="97" width="409" height="20" font="2">applied	to	it.	This	is	because	we	will	attach	the	</text>
<text top="1153" left="507" width="52" height="14" font="5">Spell</text>
<text top="1148" left="558" width="117" height="20" font="2">	object	to	the	</text>
<text top="1153" left="676" width="62" height="14" font="5">Avatar</text>
<text top="1148" left="738" width="64" height="20" font="2">	object,</text>
<text top="1174" left="97" width="547" height="20" font="2">which	will	supply	translation	and	direction	components	for	the	</text>
<text top="1179" left="644" width="52" height="14" font="5">Spell</text>
<text top="1174" left="696" width="64" height="20" font="2">	object.</text>
</page>
<page number="485" position="absolute" top="0" left="0" height="1262" width="892">
<text top="59" left="54" width="80" height="22" font="8"><b>if(spell)</b></text>
<text top="97" left="54" width="243" height="20" font="2">We	always	test	if	the	call	to	</text>
<text top="102" left="297" width="207" height="14" font="5">SpawnActor&lt;ASpell&gt;()</text>
<text top="97" left="505" width="198" height="20" font="2">	succeeds	by	checking	</text>
<text top="102" left="702" width="114" height="14" font="5">if(	spell	)</text>
<text top="97" left="816" width="5" height="20" font="2">.</text>
<text top="123" left="54" width="252" height="20" font="2">If	the	blueprint	passed	to	the	</text>
<text top="128" left="306" width="93" height="14" font="5">CastSpell</text>
<text top="123" left="399" width="396" height="20" font="2">	object	is	not	actually	a	blueprint	based	on	the</text>
<text top="154" left="54" width="62" height="14" font="5">ASpell</text>
<text top="149" left="116" width="132" height="20" font="2">	class,	then	the	</text>
<text top="154" left="249" width="124" height="14" font="5">SpawnActor()</text>
<text top="149" left="373" width="163" height="20" font="2">	function	returns	a	</text>
<text top="154" left="536" width="41" height="14" font="5">NULL</text>
<text top="149" left="577" width="177" height="20" font="2">	pointer	instead	of	a	</text>
<text top="154" left="754" width="52" height="14" font="5">Spell</text>
<text top="175" left="54" width="765" height="20" font="2">object.	If	that	happens,	we	print	an	error	message	to	the	screen	indicating	that	something</text>
<text top="201" left="54" width="282" height="20" font="2">went	wrong	during	spell	casting.</text>
<text top="239" left="54" width="229" height="22" font="8"><b>spell-&gt;SetCaster(this)</b></text>
<text top="278" left="54" width="614" height="20" font="2">When	instantiating,	if	the	spell	does	succeed,	we	attach	the	spell	to	the	</text>
<text top="282" left="668" width="62" height="14" font="5">Avatar</text>
<text top="278" left="731" width="85" height="20" font="2">	object	by</text>
<text top="304" left="54" width="64" height="20" font="2">calling	</text>
<text top="308" left="118" width="249" height="14" font="5">spell-&gt;SetCaster(	this	)</text>
<text top="304" left="367" width="471" height="20" font="2">.	Remember,	in	the	context	of	programming	within	the</text>
<text top="334" left="54" width="62" height="14" font="5">Avatar</text>
<text top="330" left="116" width="90" height="20" font="2">	class,	the	</text>
<text top="334" left="206" width="41" height="14" font="5">this</text>
<text top="330" left="247" width="250" height="20" font="2">	method	is	a	reference	to	the	</text>
<text top="334" left="497" width="62" height="14" font="5">Avatar</text>
<text top="330" left="560" width="64" height="20" font="2">	object.</text>
<text top="366" left="54" width="603" height="20" font="2">Now,	how	do	we	actually	connect	spell	casting	from	UI	inputs,	to	call</text>
<text top="397" left="54" width="207" height="14" font="5">AAvatar::CastSpell()</text>
<text top="392" left="261" width="417" height="20" font="2">	function	in	the	first	place?	We	need	to	do	some	</text>
<text top="397" left="678" width="31" height="14" font="5">HUD</text>
<text top="392" left="709" width="123" height="20" font="2">	programming</text>
<text top="418" left="54" width="52" height="20" font="2">again.</text>
</page>
<page number="486" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="635" height="32" font="7"><b>Writing	AMyHUD::MouseRightClicked()</b></text>
<text top="110" left="54" width="749" height="20" font="2">The	spell	cast	commands	will	ultimately	come	from	the	HUD.	We	need	to	write	a	C++</text>
<text top="136" left="54" width="780" height="20" font="2">function	that	will	walk	through	all	the	HUD	widgets	and	test	to	see	if	a	click	is	on	any	one</text>
<text top="162" left="54" width="238" height="20" font="2">of	them.	If	the	click	is	on	a	</text>
<text top="167" left="292" width="62" height="14" font="5">widget</text>
<text top="162" left="354" width="149" height="20" font="2">	object,	then	that	</text>
<text top="167" left="503" width="62" height="14" font="5">widget</text>
<text top="162" left="566" width="222" height="20" font="2">	object	should	respond	by</text>
<text top="188" left="54" width="330" height="20" font="2">casting	its	spell,	if	it	has	one	assigned.</text>
<text top="225" left="54" width="199" height="20" font="2">We	have	to	extend	our	</text>
<text top="229" left="253" width="62" height="14" font="5">Widget</text>
<text top="225" left="315" width="521" height="20" font="2">	object	to	have	a	variable	to	hold	the	blueprint	of	the	spell	to</text>
<text top="251" left="54" width="245" height="20" font="2">cast.	Add	a	member	to	your	</text>
<text top="255" left="299" width="135" height="14" font="5">struct	Widget</text>
<text top="251" left="434" width="311" height="20" font="2">	object	by	using	the	following	code:</text>
<text top="294" left="54" width="135" height="14" font="5">struct	Widget</text>
<text top="315" left="54" width="10" height="14" font="5">{</text>
<text top="335" left="54" width="124" height="14" font="5">		Icon	icon;</text>
<text top="356" left="54" width="621" height="14" font="5">		//	bpSpell	is	the	blueprint	of	the	spell	this	widget	casts</text>
<text top="376" left="54" width="186" height="14" font="5">		UClass	*bpSpell;</text>
<text top="397" left="54" width="228" height="14" font="5">		FVector2D	pos,	size;</text>
<text top="417" left="54" width="414" height="14" font="5">		Widget(Icon	iicon,	UClass	*iClassName)</text>
<text top="438" left="54" width="10" height="14" font="5">}</text>
<text top="469" left="54" width="177" height="20" font="2">Now,	recall	that	our	</text>
<text top="473" left="231" width="104" height="14" font="5">PickupItem</text>
<text top="469" left="334" width="435" height="20" font="2">	had	the	blueprint	of	the	spell	it	casts	attached	to	it</text>
<text top="495" left="54" width="274" height="20" font="2">previously.	However,	when	the	</text>
<text top="499" left="328" width="104" height="14" font="5">PickupItem</text>
<text top="495" left="431" width="406" height="20" font="2">	class	is	picked	up	from	the	level	by	the	player,</text>
<text top="521" left="54" width="74" height="20" font="2">then	the	</text>
<text top="525" left="128" width="104" height="14" font="5">PickupItem</text>
<text top="521" left="232" width="162" height="20" font="2">	class	is	destroyed.</text>
<text top="564" left="54" width="445" height="14" font="5">//	From	APickupItem::Prox_Implementation():</text>
<text top="585" left="54" width="570" height="14" font="5">avatar-&gt;Pickup(	this	);	//	give	this	item	to	the	avatar</text>
<text top="605" left="54" width="632" height="14" font="5">//	delete	the	pickup	item	from	the	level	once	it	is	picked	up</text>
<text top="626" left="54" width="104" height="14" font="5">Destroy();</text>
<text top="657" left="54" width="488" height="20" font="2">So,	we	need	to	retain	the	information	of	what	spell	each	</text>
<text top="661" left="542" width="104" height="14" font="5">PickupItem</text>
<text top="657" left="645" width="186" height="20" font="2">	casts.	We	can	do	that</text>
<text top="683" left="54" width="90" height="20" font="2">when	that	</text>
<text top="687" left="144" width="104" height="14" font="5">PickupItem</text>
<text top="683" left="247" width="155" height="20" font="2">	is	first	picked	up.</text>
<text top="720" left="54" width="90" height="20" font="2">Inside	the	</text>
<text top="724" left="144" width="73" height="14" font="5">AAvatar</text>
<text top="720" left="216" width="601" height="20" font="2">	class,	add	an	extra	map	to	remember	the	blueprint	of	the	spell	that	an</text>
<text top="746" left="54" width="220" height="20" font="2">item	casts,	by	item	name:</text>
<text top="789" left="54" width="238" height="14" font="5">//	Put	this	in	Avatar.h</text>
<text top="809" left="54" width="311" height="14" font="5">TMap&lt;FString,	UClass*&gt;	Spells;</text>
<text top="841" left="54" width="70" height="20" font="2">Now	in	</text>
<text top="845" left="124" width="176" height="14" font="5">AAvatar::Pickup()</text>
<text top="841" left="300" width="284" height="20" font="2">,	remember	the	class	of	spell	the	</text>
<text top="845" left="584" width="104" height="14" font="5">PickupItem</text>
<text top="841" left="687" width="150" height="20" font="2">	class	instantiates</text>
<text top="867" left="54" width="273" height="20" font="2">with	the	following	line	of	code:</text>
<text top="910" left="54" width="383" height="14" font="5">//	the	spell	associated	with	the	item</text>
<text top="930" left="54" width="373" height="14" font="5">Spells.Add(item-&gt;Name,	item-&gt;Spell);</text>
<text top="962" left="54" width="74" height="20" font="2">Now,	in	</text>
<text top="966" left="128" width="269" height="14" font="5">AAvatar::ToggleInventory()</text>
<text top="962" left="397" width="155" height="20" font="2">,	we	can	have	the	</text>
<text top="966" left="552" width="62" height="14" font="5">Widget</text>
<text top="962" left="614" width="199" height="20" font="2">	object	that	displays	on</text>
<text top="988" left="54" width="632" height="20" font="2">the	screen.	Remember	what	spell	it	is	supposed	to	cast	by	looking	up	the	</text>
<text top="992" left="686" width="62" height="14" font="5">Spells</text>
<text top="988" left="749" width="48" height="20" font="2">	map.</text>
<text top="1024" left="54" width="706" height="20" font="2">Find	the	line	where	we	create	the	widget,	and	just	under	it,	add	assignment	of	the	</text>
<text top="1029" left="760" width="73" height="14" font="5">bpSpell</text>
<text top="1050" left="54" width="136" height="20" font="2">objects	that	the	</text>
<text top="1055" left="190" width="62" height="14" font="5">Widget</text>
<text top="1050" left="252" width="53" height="20" font="2">	casts:</text>
<text top="1093" left="54" width="331" height="14" font="5">//	In	AAvatar::ToggleInventory()</text>
<text top="1114" left="54" width="290" height="14" font="5">Widget	w(	Icon(	fs,	tex	)	);</text>
<text top="1134" left="54" width="290" height="14" font="5">w.bpSpell	=	Spells[it-&gt;Key];</text>
<text top="1166" left="54" width="263" height="20" font="2">Add	the	following	function	to	</text>
<text top="1170" left="317" width="62" height="14" font="5">AMyHUD</text>
<text top="1166" left="379" width="448" height="20" font="2">,	which	we	will	set	to	run	whenever	the	right	mouse</text>
</page>
<page number="487" position="absolute" top="0" left="0" height="1262" width="892">
<image top="704" left="54" width="785" height="394" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-487_1.jpg"/>
<text top="57" left="54" width="250" height="20" font="2">button	is	clicked	on	the	icon:</text>
<text top="101" left="54" width="331" height="14" font="5">void	AMyHUD::MouseRightClicked()</text>
<text top="121" left="54" width="10" height="14" font="5">{</text>
<text top="142" left="54" width="186" height="14" font="5">		FVector2D	mouse;</text>
<text top="162" left="54" width="777" height="14" font="5">		APlayerController	*PController	=	GetWorld()-	&gt;GetFirstPlayerController();</text>
<text top="183" left="54" width="539" height="14" font="5">		PController-&gt;GetMousePosition(	mouse.X,	mouse.Y	);</text>
<text top="203" left="54" width="435" height="14" font="5">		for(	int	c	=	0;	c	&lt;	widgets.Num();	c++	)</text>
<text top="224" left="54" width="31" height="14" font="5">		{</text>
<text top="244" left="54" width="342" height="14" font="5">				if(	widgets[c].hit(	mouse	)	)</text>
<text top="265" left="54" width="52" height="14" font="5">				{</text>
<text top="285" left="54" width="414" height="14" font="5">						AAvatar	*avatar	=	Cast&lt;AAvatar&gt;(		</text>
<text top="306" left="54" width="508" height="14" font="5">UGameplayStatics::GetPlayerPawn(GetWorld(),	0)	);</text>
<text top="326" left="54" width="331" height="14" font="5">						if(	widgets[c].spellName	)</text>
<text top="347" left="54" width="518" height="14" font="5">								avatar-&gt;CastSpell(	widgets[c].spellName	);</text>
<text top="367" left="54" width="52" height="14" font="5">				}</text>
<text top="388" left="54" width="31" height="14" font="5">		}</text>
<text top="409" left="54" width="10" height="14" font="5">}</text>
<text top="440" left="54" width="757" height="20" font="2">This	is	very	similar	to	our	left	mouse	click	function.	We	simply	check	the	click	position</text>
<text top="466" left="54" width="260" height="20" font="2">against	all	the	widgets.	If	any	</text>
<text top="470" left="314" width="62" height="14" font="5">Widget</text>
<text top="466" left="376" width="306" height="20" font="2">	was	hit	by	the	right-click,	and	that	</text>
<text top="470" left="682" width="62" height="14" font="5">Widget</text>
<text top="466" left="744" width="49" height="20" font="2">	has	a</text>
<text top="496" left="54" width="52" height="14" font="5">Spell</text>
<text top="492" left="106" width="622" height="20" font="2">	object	associated	with	it,	then	a	spell	will	be	cast	by	calling	the	avatar’s</text>
<text top="522" left="54" width="114" height="14" font="5">CastSpell()</text>
<text top="518" left="168" width="76" height="20" font="2">	method.</text>
<text top="556" left="54" width="385" height="22" font="8"><b>Activating	right	mouse	button	clicks</b></text>
<text top="594" left="54" width="742" height="20" font="2">To	connect	this	HUD	function	to	run,	we	need	to	attach	an	event	handler	to	the	mouse</text>
<text top="620" left="54" width="777" height="20" font="2">right-click.	We	can	do	so	by	going	to	<b>Settings</b>	|	<b>Project	Settings</b>,	and	from	the	dialog	that</text>
<text top="646" left="54" width="737" height="20" font="2">pops	up,	adding	an	<b>Input</b>	option	for	<b>Right	Mouse	Button</b>,	as	shown	in	the	following</text>
<text top="672" left="54" width="97" height="20" font="2">screenshot:</text>
<text top="1168" left="54" width="187" height="20" font="2">Declare	a	function	in	</text>
<text top="1172" left="241" width="83" height="14" font="5">Avatar.h</text>
<text top="1168" left="324" width="6" height="20" font="2">/</text>
<text top="1172" left="330" width="104" height="14" font="5">Avatar.cpp</text>
<text top="1168" left="433" width="62" height="20" font="2">	called	</text>
<text top="1172" left="496" width="197" height="14" font="5">MouseRightClicked()</text>
<text top="1168" left="693" width="76" height="20" font="2">	with	the</text>
</page>
<page number="488" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="54" width="136" height="20" font="2">following	code:</text>
<text top="101" left="54" width="342" height="14" font="5">void	AAvatar::MouseRightClicked()</text>
<text top="121" left="54" width="10" height="14" font="5">{</text>
<text top="142" left="54" width="249" height="14" font="5">		if(	inventoryShowing	)</text>
<text top="162" left="54" width="31" height="14" font="5">		{</text>
<text top="183" left="54" width="508" height="14" font="5">				APlayerController*	PController	=	GetWorld()-	</text>
<text top="203" left="54" width="290" height="14" font="5">&gt;GetFirstPlayerController();</text>
<text top="224" left="54" width="580" height="14" font="5">				AMyHUD*	hud	=	Cast&lt;AMyHUD&gt;(	PController-&gt;GetHUD()	);</text>
<text top="244" left="54" width="300" height="14" font="5">				hud-&gt;MouseRightClicked();</text>
<text top="265" left="54" width="31" height="14" font="5">		}</text>
<text top="285" left="54" width="10" height="14" font="5">}</text>
<text top="317" left="54" width="77" height="20" font="2">Then,	in	</text>
<text top="321" left="131" width="373" height="14" font="5">AAvatar::SetupPlayerInputComponent()</text>
<text top="317" left="504" width="161" height="20" font="2">,	we	should	attach	</text>
<text top="321" left="665" width="155" height="14" font="5">MouseClickedRMB</text>
<text top="343" left="54" width="112" height="20" font="2">event	to	that	</text>
<text top="347" left="166" width="197" height="14" font="5">MouseRightClicked()</text>
<text top="343" left="363" width="83" height="20" font="2">	function:</text>
<text top="386" left="54" width="445" height="14" font="5">//	In	AAvatar::SetupPlayerInputComponent():</text>
<text top="406" left="54" width="684" height="14" font="5">InputComponent-&gt;BindAction(	&#34;MouseClickedRMB&#34;,	IE_Pressed,	this,		</text>
<text top="427" left="54" width="311" height="14" font="5">&amp;AAvatar::MouseRightClicked	);</text>
<text top="458" left="54" width="771" height="20" font="2">We	have	finally	hooked	up	spell	casting.	Try	it	out,	the	gameplay	is	pretty	cool,	as	shown</text>
<text top="484" left="54" width="240" height="20" font="2">in	the	following	screenshot:</text>
</page>
<page number="489" position="absolute" top="0" left="0" height="1262" width="892">
<image top="53" left="54" width="661" height="699" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-489_1.jpg"/>
</page>
<page number="490" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="491" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="382" height="39" font="0"><b>Creating	other	spells</b></text>
<text top="120" left="54" width="759" height="20" font="2">By	playing	around	with	particle	systems,	you	can	create	a	variety	of	different	spells	that</text>
<text top="146" left="54" width="169" height="20" font="2">do	different	effects.</text>
</page>
<page number="492" position="absolute" top="0" left="0" height="1262" width="892">
<image top="169" left="54" width="470" height="772" src="/export/freefileconvert/24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b-492_1.jpg"/>
<text top="61" left="54" width="199" height="32" font="7"><b>The	fire	spell</b></text>
<text top="110" left="54" width="725" height="20" font="2">You	can	easily	create	a	fire	variant	of	our	blizzard	spell	by	changing	the	color	of	the</text>
<text top="136" left="54" width="191" height="20" font="2">particle	system	to	red:</text>
<text top="978" left="278" width="336" height="20" font="4"><i>The	out	val	of	the	color	changed	to	red</i></text>
</page>
<page number="493" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="142" height="32" font="7"><b>Exercises</b></text>
<text top="110" left="54" width="242" height="20" font="2">Try	the	following	exercises:</text>
<text top="147" left="69" width="737" height="20" font="2">1.	 <b>Lightning	spell</b>:	Create	a	lightning	spell	by	using	the	beam	particle.	Follow	Zak’s</text>
<text top="173" left="97" width="647" height="20" font="2">tutorial	for	an	example	of	how	beams	are	created	and	shot	in	a	direction,	at</text>
<text top="199" left="97" width="290" height="20" font="1"><a href="https://www.youtube.com/watch?v=ywd3lFOuMV8&amp;list=PLZlv_N0_O1gYDLyB3LVfjYIcbBe8NqR8t&amp;index=7">https://www.youtube.com/watch?</a></text>
<text top="225" left="97" width="699" height="20" font="1"><a href="https://www.youtube.com/watch?v=ywd3lFOuMV8&amp;list=PLZlv_N0_O1gYDLyB3LVfjYIcbBe8NqR8t&amp;index=7">v=ywd3lFOuMV8&amp;list=PLZlv_N0_O1gYDLyB3LVfjYIcbBe8NqR8t&amp;index=7</a></text>
<text top="225" left="796" width="5" height="20" font="2"><a href="https://www.youtube.com/watch?v=ywd3lFOuMV8&amp;list=PLZlv_N0_O1gYDLyB3LVfjYIcbBe8NqR8t&amp;index=7">.</a></text>
<text top="251" left="69" width="706" height="20" font="2">2.	 <b>Forcefield	spell</b>:	A	forcefield	will	deflect	attacks.	It	is	essential	for	any	player.</text>
<text top="277" left="97" width="421" height="20" font="2">Suggested	implementation:	Derive	a	subclass	of	</text>
<text top="281" left="518" width="62" height="14" font="5">ASpell</text>
<text top="277" left="580" width="62" height="20" font="2">	called	</text>
<text top="281" left="642" width="166" height="14" font="5">ASpellForceField</text>
<text top="277" left="808" width="5" height="20" font="2">.</text>
<text top="303" left="97" width="475" height="20" font="2">Add	a	bounding	sphere	to	the	class,	and	use	that	in	the	</text>
<text top="307" left="573" width="249" height="14" font="5">ASpellForceField::Tick()</text>
<text top="329" left="97" width="294" height="20" font="2">function	to	push	the	monsters	out.</text>
<text top="387" left="54" width="782" height="20" font="2">What’s	next?	I	would	highly	recommend	that	you	expand	on	our	little	game	here.	Here	are</text>
<text top="413" left="54" width="225" height="20" font="2">some	ideas	for	expansion:</text>
<text top="450" left="97" width="696" height="20" font="2">Create	more	environments,	expand	the	terrain,	add	in	more	houses	and	buildings</text>
<text top="475" left="97" width="290" height="20" font="2">Add	quests	that	come	from	NPCs</text>
<text top="501" left="97" width="387" height="20" font="2">Define	more	melee	weapons	such	as,	swords</text>
<text top="527" left="97" width="376" height="20" font="2">Define	armor	for	the	player,	such	as	shields</text>
<text top="553" left="97" width="359" height="20" font="2">Add	shops	that	sell	weapons	to	the	player</text>
<text top="579" left="97" width="213" height="20" font="2">Add	more	monster	types</text>
<text top="605" left="97" width="300" height="20" font="2">Implement	loot	drops	for	monsters</text>
<text top="642" left="54" width="747" height="20" font="2">You	have	literally	thousands	of	hours	of	work	ahead	of	you.	If	you	happen	to	be	a	solo</text>
<text top="668" left="54" width="779" height="20" font="2">programmer,	form	working	relationships	with	other	souls.	You	cannot	survive	in	the	game</text>
<text top="694" left="54" width="225" height="20" font="2">marketplace	on	your	own.</text>
<text top="730" left="54" width="364" height="20" font="2">It’s	dangerous	to	go	alone—Take	a	friend.</text>
</page>
<page number="494" position="absolute" top="0" left="0" height="1262" width="892">
</page>
<page number="495" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="182" height="39" font="0"><b>Summary</b></text>
<text top="120" left="54" width="783" height="20" font="2">This	concludes	this	chapter.	You	have	come	a	long	way.	From	not	knowing	anything	about</text>
<text top="146" left="54" width="768" height="20" font="2">C++	programming	at	all,	to	hopefully	being	able	to	string	together	a	basic	game	program</text>
<text top="172" left="54" width="67" height="20" font="2">in	UE4.</text>
</page>
<page number="496" position="absolute" top="0" left="0" height="1262" width="892">
<text top="64" left="54" width="106" height="39" font="0"><b>Index</b></text>
<text top="124" left="54" width="26" height="32" font="7"><b>A</b></text>
<text top="173" left="97" width="52" height="20" font="2">actors</text>
<text top="199" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#268">	</a></text>
<text top="199" left="205" width="179" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#268">Actors	versus	pawns</a></text>
<text top="225" left="140" width="133" height="20" font="2">versus	pawns	/	</text>
<text top="225" left="273" width="179" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#268">Actors	versus	pawns</a></text>
<text top="251" left="140" width="156" height="20" font="2">adding,	to	scene	/	</text>
<text top="251" left="297" width="246" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#290">Adding	an	actor	to	the	scene</a></text>
<text top="277" left="97" width="302" height="20" font="2">AMyHUD**MouseRightClicked()</text>
<text top="303" left="140" width="86" height="20" font="2">creating	/	</text>
<text top="303" left="227" width="364" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#482">Writing	AMyHUD::MouseRightClicked()</a></text>
<text top="329" left="97" width="168" height="20" font="2">And	(&amp;&amp;)	operator</text>
<text top="354" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#120">	</a></text>
<text top="354" left="205" width="89" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#120">The	And	(</a></text>
<text top="380" left="97" width="162" height="20" font="2">APickupItem	class</text>
<text top="406" left="140" width="156" height="20" font="2">FString	variable	/	</text>
<text top="406" left="297" width="194" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#380">Base	class	PickupItem</a></text>
<text top="432" left="140" width="136" height="20" font="2">int32	variable	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#380">	</a></text>
<text top="432" left="276" width="194" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#380">Base	class	PickupItem</a></text>
<text top="458" left="140" width="268" height="20" font="2">USphereComponent	variable	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#380">	</a></text>
<text top="458" left="408" width="194" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#380">Base	class	PickupItem</a></text>
<text top="484" left="140" width="305" height="20" font="2">UStaticMeshComponent	variable	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#380">	</a></text>
<text top="484" left="445" width="194" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#380">Base	class	PickupItem</a></text>
<text top="510" left="140" width="199" height="20" font="2">UTexture2D	variable	/	</text>
<text top="510" left="340" width="194" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#380">Base	class	PickupItem</a></text>
<text top="536" left="97" width="189" height="20" font="2">APuzzleBlock	class	/	</text>
<text top="536" left="286" width="327" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#126">Our	first	example	with	Unreal	Engine</a></text>
<text top="562" left="97" width="53" height="20" font="2">arrays</text>
<text top="588" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#256">	</a></text>
<text top="588" left="205" width="126" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#256">Regular	arrays</a></text>
<text top="614" left="140" width="123" height="20" font="2">array	syntax	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#256">	</a></text>
<text top="614" left="263" width="145" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#256">The	array	syntax</a></text>
<text top="640" left="140" width="87" height="20" font="2">exercise	/	</text>
<text top="640" left="228" width="74" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#256">Exercise</a></text>
<text top="666" left="140" width="200" height="20" font="2">solutions,	of	exercise	/	</text>
<text top="666" left="340" width="82" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#256">Solutions</a></text>
<text top="692" left="97" width="106" height="20" font="2">array	syntax</text>
<text top="717" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#256">	</a></text>
<text top="717" left="205" width="145" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#256">The	array	syntax</a></text>
<text top="743" left="97" width="246" height="20" font="2">Artificial	Intelligence	(AI)	/	</text>
<text top="743" left="343" width="179" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#268">Actors	versus	pawns</a></text>
<text top="769" left="97" width="239" height="20" font="2">attack	animation,	triggering</text>
<text top="795" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">	</a></text>
<text top="795" left="205" width="272" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Triggering	the	attack	animation</a></text>
<text top="821" left="140" width="153" height="20" font="2">blueprint	basics	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">	</a></text>
<text top="821" left="293" width="140" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Blueprint	basics</a></text>
<text top="847" left="140" width="454" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">animation	blueprint,	modifying	for	Mixamo	Adam	/	</a></text>
<text top="847" left="595" width="216" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Modifying	the	animation</a></text>
<text top="873" left="140" width="245" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">blueprint	for	Mixamo	Adam</a></text>
<text top="899" left="140" width="236" height="20" font="2">code,	for	swinging	sword	/	</text>
<text top="899" left="377" width="215" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Code	to	swing	the	sword</a></text>
</page>
<page number="497" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="24" height="32" font="7"><b>B</b></text>
<text top="110" left="97" width="225" height="20" font="2">basic	monster	intelligence</text>
<text top="136" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#405">	</a></text>
<text top="136" left="205" width="229" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#405">Basic	monster	intelligence</a></text>
<text top="162" left="140" width="162" height="20" font="2">monster,	moving	/	</text>
<text top="162" left="303" width="346" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#405">Moving	the	monster	–	steering	behavior</a></text>
<text top="188" left="140" width="313" height="20" font="2">discrete	nature,	of	monster	motion	/	</text>
<text top="188" left="454" width="330" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#405">The	discrete	nature	of	monster	motion</a></text>
<text top="214" left="140" width="200" height="20" font="2">Monster	SightSphere	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#405">	</a></text>
<text top="214" left="340" width="183" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#405">Monster	SightSphere</a></text>
<text top="240" left="97" width="116" height="20" font="2">blizzard	spell</text>
<text top="266" left="140" width="83" height="20" font="2">settings	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#454">	</a></text>
<text top="266" left="223" width="253" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#454">Settings	for	the	blizzard	spell</a></text>
<text top="292" left="97" width="213" height="20" font="2">BlockClicked	function	/	</text>
<text top="292" left="310" width="327" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#126">Our	first	example	with	Unreal	Engine</a></text>
<text top="318" left="97" width="86" height="20" font="2">branching</text>
<text top="344" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#110">	</a></text>
<text top="344" left="205" width="90" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#110">Branching</a></text>
<text top="370" left="97" width="119" height="20" font="2">bullet	physics</text>
<text top="396" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">	</a></text>
<text top="396" left="205" width="123" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Bullet	physics</a></text>
<text top="421" left="97" width="58" height="20" font="2">bullets</text>
<text top="447" left="140" width="228" height="20" font="2">adding,	to	Monster	class	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">	</a></text>
<text top="447" left="368" width="304" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Adding	bullets	to	the	monster	class</a></text>
</page>
<page number="498" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="26" height="32" font="7"><b>C</b></text>
<text top="110" left="97" width="71" height="20" font="2">.cpp	file</text>
<text top="136" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">	</a></text>
<text top="136" left="205" width="137" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">.h	and	.cpp	files</a></text>
<text top="162" left="97" width="79" height="20" font="2">.cpp	files</text>
<text top="188" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#241">	</a></text>
<text top="188" left="205" width="95" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#241">.h	and	.cpp</a></text>
<text top="214" left="97" width="217" height="20" font="2">&lt;cmath&gt;	library	function</text>
<text top="240" left="140" width="141" height="20" font="2">sqrt()	function	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#169">	</a></text>
<text top="240" left="281" width="434" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#169">An	example	of	a	&lt;cmath&gt;	library	function	–	sqrt()</a></text>
<text top="266" left="97" width="39" height="20" font="2">C++</text>
<text top="292" left="140" width="60" height="20" font="2">math	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">	</a></text>
<text top="292" left="200" width="112" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">Math	in	C++</a></text>
<text top="318" left="97" width="358" height="20" font="2">C++	code,	for	controlling	game	character</text>
<text top="344" left="140" width="79" height="20" font="2">writing	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#308">	</a></text>
<text top="344" left="219" width="452" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#308">Writing	C++	code	that	controls	the	game’s	character</a></text>
<text top="370" left="140" width="355" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#308">player,	making	instance	of	Avatar	class	/	</a></text>
<text top="370" left="495" width="315" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#308">Making	the	player	an	instance	of	the</a></text>
<text top="396" left="140" width="104" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#308">Avatar	class</a></text>
<text top="421" left="140" width="254" height="20" font="2">controller	inputs,	setting	up	/	</text>
<text top="421" left="395" width="236" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#308">Setting	up	controller	inputs</a></text>
<text top="447" left="140" width="206" height="20" font="2">yaw	and	pitch,	setting	/	</text>
<text top="447" left="347" width="124" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#308">Yaw	and	pitch</a></text>
<text top="473" left="97" width="166" height="20" font="2">C++	primitive	type</text>
<text top="499" left="140" width="40" height="20" font="2">int	/	</text>
<text top="499" left="180" width="205" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#264">Dynamic	C-style	arrays</a></text>
<text top="525" left="140" width="56" height="20" font="2">float	/	</text>
<text top="525" left="197" width="205" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#264">Dynamic	C-style	arrays</a></text>
<text top="551" left="140" width="76" height="20" font="2">double	/	</text>
<text top="551" left="216" width="205" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#264">Dynamic	C-style	arrays</a></text>
<text top="577" left="140" width="99" height="20" font="2">long	long	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#264">	</a></text>
<text top="577" left="239" width="205" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#264">Dynamic	C-style	arrays</a></text>
<text top="603" left="97" width="117" height="20" font="2">C++	program</text>
<text top="629" left="140" width="101" height="20" font="2">setting	up	/	</text>
<text top="629" left="242" width="188" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#59">Setting	up	our	project</a></text>
<text top="655" left="140" width="378" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#59">Microsoft	Visual	C++,	using	on	Windows	/	</a></text>
<text top="655" left="519" width="274" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#59">Using	Microsoft	Visual	C++	on</a></text>
<text top="681" left="140" width="82" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#59">Windows</a></text>
<text top="707" left="140" width="206" height="20" font="2">XCode,	using	on	Mac	/	</text>
<text top="707" left="347" width="204" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#59">Using	XCode	on	a	Mac</a></text>
<text top="733" left="140" width="86" height="20" font="2">creating	/	</text>
<text top="733" left="227" width="282" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#71">Creating	your	first	C++	program</a></text>
<text top="758" left="140" width="114" height="20" font="2">semicolons	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#71">	</a></text>
<text top="758" left="254" width="101" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#71">Semicolons</a></text>
<text top="784" left="140" width="153" height="20" font="2">errors,	handling	/	</text>
<text top="784" left="294" width="136" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#71">Handling	errors</a></text>
<text top="810" left="140" width="96" height="20" font="2">warnings	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#71">	</a></text>
<text top="810" left="236" width="82" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#71">Warnings</a></text>
<text top="836" left="140" width="104" height="20" font="2">compiling	/	</text>
<text top="836" left="245" width="283" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#80">What	is	building	and	compiling?</a></text>
<text top="862" left="140" width="202" height="20" font="2">source	code,	building	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#80">	</a></text>
<text top="862" left="342" width="283" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#80">What	is	building	and	compiling?</a></text>
<text top="888" left="140" width="92" height="20" font="2">scripting	/	</text>
<text top="888" left="233" width="79" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#80">Scripting</a></text>
<text top="914" left="140" width="231" height="20" font="2">ASCII	art	maze	example	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#80">	</a></text>
<text top="914" left="371" width="180" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#80">Exercise	–	ASCII	art</a></text>
<text top="940" left="140" width="95" height="20" font="2">variables	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">	</a></text>
<text top="940" left="235" width="80" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">Variables</a></text>
<text top="966" left="140" width="160" height="20" font="2">flow,	controlling	/	</text>
<text top="966" left="301" width="323" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#113">Controlling	the	flow	of	your	program</a></text>
<text top="992" left="97" width="124" height="20" font="2">C++	STL	map</text>
<text top="1018" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#359">	</a></text>
<text top="1018" left="205" width="124" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#359">C++	STL	map</a></text>
<text top="1044" left="140" width="158" height="20" font="2">element,	finding	/	</text>
<text top="1044" left="299" width="271" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#359">Finding	an	element	in	a	&lt;map&gt;</a></text>
<text top="1070" left="140" width="87" height="20" font="2">exercise	/	</text>
<text top="1070" left="228" width="74" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#359">Exercise</a></text>
<text top="1096" left="140" width="191" height="20" font="2">solution,	of	exercise	/	</text>
<text top="1096" left="332" width="73" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#359">Solution</a></text>
<text top="1121" left="97" width="111" height="20" font="2">C++	STL	set</text>
<text top="1147" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#359">	</a></text>
<text top="1147" left="205" width="111" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#359">C++	STL	set</a></text>
<text top="1173" left="140" width="158" height="20" font="2">element,	finding	/	</text>
<text top="1173" left="299" width="258" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#359">Finding	an	element	in	a	&lt;set&gt;</a></text>
</page>
<page number="499" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="140" width="87" height="20" font="2">exercise	/	</text>
<text top="57" left="228" width="74" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#359">Exercise</a></text>
<text top="83" left="140" width="191" height="20" font="2">solution,	of	exercise	/	</text>
<text top="83" left="332" width="73" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#359">Solution</a></text>
<text top="109" left="97" width="159" height="20" font="2">C++	STL	versions</text>
<text top="135" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#359">	</a></text>
<text top="135" left="205" width="419" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#359">C++	STL	versions	of	commonly	used	container-fluids</a></text>
<text top="161" left="140" width="128" height="20" font="2">C++	STL	set	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#359">	</a></text>
<text top="161" left="268" width="111" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#359">C++	STL	set</a></text>
<text top="187" left="140" width="141" height="20" font="2">C++	STL	map	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#359">	</a></text>
<text top="187" left="281" width="124" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#359">C++	STL	map</a></text>
<text top="213" left="97" width="120" height="20" font="2">C-style	arrays</text>
<text top="239" left="140" width="65" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#264">about	/</a><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#261">	</a></text>
<text top="239" left="205" width="440" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#261">C++	style	dynamic	size	arrays	(new[]	and	delete[])</a></text>
<text top="239" left="645" width="11" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#261">,</a><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#264">	</a></text>
<text top="239" left="656" width="147" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#264">Dynamic	C-style</a></text>
<text top="265" left="140" width="53" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#264">arrays</a></text>
<text top="291" left="97" width="80" height="20" font="2">cast	spell</text>
<text top="317" left="140" width="279" height="20" font="2">right	mouse	click,	attaching	to	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#482">	</a></text>
<text top="317" left="419" width="348" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#482">Attaching	right	mouse	click	to	cast	spell</a></text>
<text top="343" left="97" width="160" height="20" font="2">CastSpell	function</text>
<text top="369" left="140" width="79" height="20" font="2">writing	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#482">	</a></text>
<text top="369" left="219" width="337" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#482">Writing	the	avatar’s	CastSpell	function</a></text>
<text top="394" left="97" width="26" height="20" font="2">cin</text>
<text top="420" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">	</a></text>
<text top="420" left="205" width="26" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">cin</a></text>
<text top="446" left="97" width="117" height="20" font="2">cin	command</text>
<text top="472" left="140" width="64" height="20" font="2">using	/	</text>
<text top="472" left="204" width="440" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#261">C++	style	dynamic	size	arrays	(new[]	and	delete[])</a></text>
<text top="498" left="97" width="42" height="20" font="2">class</text>
<text top="524" left="140" width="125" height="20" font="2">versus	struct	/	</text>
<text top="524" left="266" width="156" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#217">class	versus	struct</a></text>
<text top="550" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#217">	</a></text>
<text top="550" left="205" width="156" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#217">class	versus	struct</a></text>
<text top="576" left="97" width="60" height="20" font="2">classes</text>
<text top="602" left="140" width="188" height="20" font="2">putting	into	headers	/	</text>
<text top="602" left="329" width="283" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#241">Putting	your	classes	into	headers</a></text>
<text top="628" left="97" width="143" height="20" font="2">class	inheritance</text>
<text top="654" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#228">	</a></text>
<text top="654" left="205" width="148" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#228">Class	inheritance</a></text>
<text top="654" left="353" width="11" height="20" font="2">,	</text>
<text top="654" left="364" width="230" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#228">What	does	inheritance	do?</a></text>
<text top="680" left="140" width="147" height="20" font="2">derived	classes	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#228">	</a></text>
<text top="680" left="287" width="135" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#228">Derived	classes</a></text>
<text top="706" left="140" width="73" height="20" font="2">syntax	/	</text>
<text top="706" left="214" width="185" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#228">Syntax	of	inheritance</a></text>
<text top="731" left="140" width="155" height="20" font="2">is-a	relationship	/	</text>
<text top="731" left="296" width="138" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#228">is-a	relationship</a></text>
<text top="757" left="140" width="180" height="20" font="2">protected	variables	/	</text>
<text top="757" left="321" width="164" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#228">protected	variables</a></text>
<text top="783" left="140" width="150" height="20" font="2">virtual	function	/	</text>
<text top="783" left="291" width="146" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#228">Virtual	functions</a></text>
<text top="809" left="140" width="211" height="20" font="2">purely	virtual	function	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#228">	</a></text>
<text top="809" left="351" width="393" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#228">Purely	virtual	functions	(and	abstract	classes)</a></text>
<text top="835" left="97" width="186" height="20" font="2">comparison	operators</text>
<text top="861" left="140" width="260" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#113">used,	for	testing	inequalities	/	</a></text>
<text top="861" left="401" width="407" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#113">Testing	for	inequalities	using	other	comparison</a></text>
<text top="887" left="140" width="272" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#113">operators	(&gt;,	&gt;=,	&lt;,	&lt;=,	and	!=)</a></text>
<text top="913" left="97" width="88" height="20" font="2">compiling</text>
<text top="939" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#80">	</a></text>
<text top="939" left="205" width="283" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#80">What	is	building	and	compiling?</a></text>
<text top="965" left="97" width="97" height="20" font="2">constructor</text>
<text top="991" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#225">	</a></text>
<text top="991" left="205" width="247" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#225">Constructors	and	destructors</a></text>
<text top="1017" left="97" width="106" height="20" font="2">constructors</text>
<text top="1043" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#225">	</a></text>
<text top="1043" left="205" width="247" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#225">Constructors	and	destructors</a></text>
<text top="1069" left="97" width="129" height="20" font="2">const	variables</text>
<text top="1094" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">	</a></text>
<text top="1094" left="205" width="134" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">Const	variables</a></text>
<text top="1120" left="97" width="203" height="20" font="2">control	flow	statements</text>
<text top="1146" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#113">	</a></text>
<text top="1146" left="205" width="323" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#113">Controlling	the	flow	of	your	program</a></text>
<text top="1172" left="97" width="142" height="20" font="2">controller	inputs</text>
</page>
<page number="500" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="140" width="101" height="20" font="2">setting	up	/	</text>
<text top="57" left="242" width="236" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#308">Setting	up	controller	inputs</a></text>
<text top="83" left="140" width="87" height="20" font="2">exercise	/	</text>
<text top="83" left="228" width="74" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#308">Exercise</a></text>
<text top="109" left="140" width="191" height="20" font="2">solution,	of	exercise	/	</text>
<text top="109" left="332" width="73" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#308">Solution</a></text>
</page>
<page number="501" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="26" height="32" font="7"><b>D</b></text>
<text top="110" left="97" width="116" height="20" font="2">delete[]	array</text>
<text top="136" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#261">	</a></text>
<text top="136" left="205" width="440" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#261">C++	style	dynamic	size	arrays	(new[]	and	delete[])</a></text>
<text top="162" left="97" width="95" height="20" font="2">destructors</text>
<text top="188" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#225">	</a></text>
<text top="188" left="205" width="247" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#225">Constructors	and	destructors</a></text>
<text top="214" left="97" width="119" height="20" font="2">do/while	loop</text>
<text top="240" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#152">	</a></text>
<text top="240" left="205" width="158" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#152">The	do/while	loop</a></text>
<text top="266" left="97" width="251" height="20" font="2">dynamic	memory	allocations</text>
<text top="292" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#250">	</a></text>
<text top="292" left="205" width="247" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#250">Dynamic	memory	allocation</a></text>
<text top="318" left="140" width="149" height="20" font="2">delete	keyword	/	</text>
<text top="318" left="290" width="171" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#250">The	delete	keyword</a></text>
<text top="344" left="140" width="138" height="20" font="2">memory	leaks	/	</text>
<text top="344" left="279" width="124" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#250">Memory	leaks</a></text>
</page>
<page number="502" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="24" height="32" font="7"><b>E</b></text>
<text top="110" left="97" width="67" height="20" font="2">EASTL</text>
<text top="136" left="140" width="59" height="20" font="2">URL	/	</text>
<text top="136" left="200" width="419" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#359">C++	STL	versions	of	commonly	used	container-fluids</a></text>
<text top="162" left="97" width="130" height="20" font="2">else	statements</text>
<text top="188" left="140" width="76" height="20" font="2">coding	/	</text>
<text top="188" left="216" width="199" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#113">Coding	else	statements</a></text>
<text top="214" left="97" width="119" height="20" font="2">encapsulation</text>
<text top="240" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#207">	</a></text>
<text top="240" left="205" width="230" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#207">Privates	and	encapsulation</a></text>
<text top="266" left="140" width="82" height="20" font="2">reasons	/	</text>
<text top="266" left="222" width="230" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#207">Privates	and	encapsulation</a></text>
<text top="292" left="97" width="143" height="20" font="2">event,	triggering</text>
<text top="318" left="140" width="96" height="20" font="2">exercises	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#324">	</a></text>
<text top="318" left="236" width="83" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#324">Exercises</a></text>
<text top="344" left="140" width="208" height="20" font="2">solutions,	of	exercises	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#324">	</a></text>
<text top="344" left="348" width="82" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#324">Solutions</a></text>
<text top="370" left="97" width="137" height="20" font="2">extern	variables</text>
<text top="396" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">	</a></text>
<text top="396" left="205" width="141" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">Extern	variables</a></text>
</page>
<page number="503" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="22" height="32" font="7"><b>F</b></text>
<text top="110" left="97" width="93" height="20" font="2">fire	spell	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#490">	</a></text>
<text top="110" left="190" width="115" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#490">The	fire	spell</a></text>
<text top="136" left="97" width="83" height="20" font="2">flowchart</text>
<text top="162" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#110">	</a></text>
<text top="162" left="205" width="90" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#110">Branching</a></text>
<text top="188" left="97" width="69" height="20" font="2">for	loop</text>
<text top="214" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#154">	</a></text>
<text top="214" left="205" width="108" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#154">The	for	loop</a></text>
<text top="240" left="140" width="96" height="20" font="2">exercises	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#154">	</a></text>
<text top="240" left="236" width="83" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#154">Exercises</a></text>
<text top="266" left="140" width="208" height="20" font="2">solutions,	of	exercises	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#154">	</a></text>
<text top="266" left="348" width="82" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#154">Solutions</a></text>
<text top="292" left="97" width="330" height="20" font="2">forward	declaration,	players	backpack</text>
<text top="318" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#367">	</a></text>
<text top="318" left="205" width="174" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#367">Forward	declaration</a></text>
<text top="344" left="97" width="117" height="20" font="2">funcs.cpp	file</text>
<text top="370" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">	</a></text>
<text top="370" left="205" width="185" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">prototypes.h	contains</a></text>
<text top="396" left="97" width="168" height="20" font="2">function	prototypes</text>
<text top="421" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">	</a></text>
<text top="421" left="205" width="173" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">Function	prototypes</a></text>
<text top="447" left="97" width="80" height="20" font="2">functions</text>
<text top="473" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#164">	</a></text>
<text top="473" left="205" width="85" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#164">Functions</a></text>
<text top="499" left="140" width="234" height="20" font="2">&lt;cmath&gt;	library	function	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#169">	</a></text>
<text top="499" left="374" width="434" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#169">An	example	of	a	&lt;cmath&gt;	library	function	–	sqrt()</a></text>
<text top="525" left="140" width="113" height="20" font="2">advantages	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#169">	</a></text>
<text top="525" left="253" width="434" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#169">An	example	of	a	&lt;cmath&gt;	library	function	–	sqrt()</a></text>
<text top="551" left="140" width="230" height="20" font="2">custom	function,	writing	/	</text>
<text top="551" left="370" width="229" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#172">Writing	our	own	functions</a></text>
<text top="577" left="140" width="195" height="20" font="2">printRoad()	function	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#172">	</a></text>
<text top="577" left="335" width="229" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#172">Writing	our	own	functions</a></text>
<text top="603" left="140" width="204" height="20" font="2">sample	program	trace	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#172">	</a></text>
<text top="603" left="344" width="207" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#172">A	sample	program	trace</a></text>
<text top="629" left="140" width="152" height="20" font="2">main()	function	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#172">	</a></text>
<text top="629" left="292" width="207" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#172">A	sample	program	trace</a></text>
<text top="655" left="140" width="87" height="20" font="2">exercise	/	</text>
<text top="655" left="228" width="74" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#172">Exercise</a></text>
<text top="681" left="140" width="86" height="20" font="2">solution	/	</text>
<text top="681" left="227" width="73" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#172">Solution</a></text>
<text top="707" left="140" width="150" height="20" font="2">with	arguments	/	</text>
<text top="707" left="290" width="224" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#178">Functions	with	arguments</a></text>
<text top="733" left="140" width="162" height="20" font="2">values,	returning	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#180">	</a></text>
<text top="733" left="302" width="240" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#180">Functions	that	return	values</a></text>
<text top="758" left="97" width="231" height="20" font="2">functions,	returning	values</text>
<text top="784" left="140" width="96" height="20" font="2">exercises	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#180">	</a></text>
<text top="784" left="236" width="83" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#180">Exercises</a></text>
<text top="810" left="140" width="208" height="20" font="2">solutions,	of	exercises	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#180">	</a></text>
<text top="810" left="348" width="82" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#180">Solutions</a></text>
</page>
<page number="504" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="28" height="32" font="7"><b>G</b></text>
<text top="110" left="97" width="366" height="20" font="2">GENERATED_UCLASS_BODY()	macro</text>
<text top="136" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#292">	</a></text>
<text top="136" left="205" width="399" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#292">Inheriting	from	UE4	GameFramework	classes</a></text>
<text top="162" left="97" width="128" height="20" font="2">get()	operation</text>
<text top="188" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#219">	</a></text>
<text top="188" left="205" width="364" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#219">But	what’s	the	point	of	get/set	OPS?</a></text>
<text top="214" left="97" width="58" height="20" font="2">getters</text>
<text top="240" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#219">	</a></text>
<text top="240" left="205" width="159" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#219">Getters	and	setters</a></text>
<text top="240" left="365" width="11" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#219">,	</a></text>
<text top="240" left="375" width="62" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#219">Getters</a></text>
<text top="266" left="97" width="241" height="20" font="2">GetWorld()-&gt;SpawnActor()</text>
<text top="292" left="140" width="123" height="20" font="2">instantiating	/	</text>
<text top="292" left="264" width="448" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#482">Instantiating	the	spell	–	GetWorld()-&gt;SpawnActor()</a></text>
<text top="318" left="97" width="28" height="20" font="2">Git</text>
<text top="344" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#59">	</a></text>
<text top="344" left="205" width="204" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#59">Using	XCode	on	a	Mac</a></text>
<text top="370" left="97" width="137" height="20" font="2">global	variables</text>
<text top="396" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">	</a></text>
<text top="396" left="205" width="142" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">Global	variables</a></text>
<text top="421" left="97" width="293" height="20" font="2">GNU	Compiler	Collection	(GCC)</text>
<text top="447" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#80">	</a></text>
<text top="447" left="205" width="283" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#80">What	is	building	and	compiling?</a></text>
</page>
<page number="505" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="28" height="32" font="7"><b>H</b></text>
<text top="110" left="97" width="50" height="20" font="2">.h	file</text>
<text top="136" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">	</a></text>
<text top="136" left="205" width="137" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">.h	and	.cpp	files</a></text>
<text top="162" left="97" width="59" height="20" font="2">.h	files</text>
<text top="188" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#241">	</a></text>
<text top="188" left="205" width="95" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#241">.h	and	.cpp</a></text>
<text top="214" left="97" width="97" height="20" font="2">hardcoding</text>
<text top="240" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#292">	</a></text>
<text top="240" left="205" width="155" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#292">Loading	the	mesh</a></text>
<text top="266" left="97" width="47" height="20" font="2">HUD</text>
<text top="292" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#324">	</a></text>
<text top="292" left="205" width="400" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#324">Displaying	a	quote	from	each	NPC	dialog	box</a></text>
<text top="318" left="97" width="196" height="20" font="2">HUD**DrawTexture()</text>
<text top="344" left="140" width="64" height="20" font="2">using	/	</text>
<text top="344" left="204" width="244" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#387">Using	HUD::DrawTexture()</a></text>
<text top="370" left="140" width="87" height="20" font="2">exercise	/	</text>
<text top="370" left="228" width="74" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#387">Exercise</a></text>
</page>
<page number="506" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="14" height="32" font="7"><b>I</b></text>
<text top="110" left="97" width="162" height="20" font="2">if(spell)	function	/	</text>
<text top="110" left="260" width="68" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#482">if(spell)</a></text>
<text top="136" left="97" width="110" height="20" font="2">if	statements</text>
<text top="162" left="140" width="76" height="20" font="2">coding	/	</text>
<text top="162" left="216" width="179" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#113">Coding	if	statements</a></text>
<text top="188" left="97" width="448" height="20" font="2">Integrated	Development	Environment	(IDE)	project</text>
<text top="214" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">	</a></text>
<text top="214" left="205" width="157" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">main.cpp	contains</a></text>
<text top="240" left="97" width="182" height="20" font="2">inventory	item	clicks</text>
<text top="266" left="140" width="96" height="20" font="2">detecting	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#387">	</a></text>
<text top="266" left="236" width="271" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#387">Detecting	inventory	item	clicks</a></text>
<text top="292" left="140" width="181" height="20" font="2">elements,	dragging	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#387">	</a></text>
<text top="292" left="321" width="164" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#387">Dragging	elements</a></text>
<text top="318" left="140" width="96" height="20" font="2">exercises	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#387">	</a></text>
<text top="318" left="236" width="83" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#387">Exercises</a></text>
<text top="344" left="97" width="138" height="20" font="2">is-a	relationship</text>
<text top="370" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#228">	</a></text>
<text top="370" left="205" width="138" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#228">is-a	relationship</a></text>
<text top="396" left="97" width="194" height="20" font="2">iterating	ways,	TArray</text>
<text top="421" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#342">	</a></text>
<text top="421" left="205" width="155" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#342">Iterating	a	TArray</a></text>
<text top="447" left="140" width="402" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#342">vanilla	for	loop	and	square	brackets	notation	/	</a></text>
<text top="447" left="542" width="270" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#342">The	vanilla	for	loop	and	square</a></text>
<text top="473" left="140" width="148" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#342">brackets	notation</a></text>
<text top="499" left="140" width="87" height="20" font="2">iterators	/	</text>
<text top="499" left="228" width="72" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#342">Iterators</a></text>
<text top="525" left="97" width="71" height="20" font="2">iterators</text>
<text top="551" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#342">	</a></text>
<text top="551" left="205" width="72" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#342">Iterators</a></text>
</page>
<page number="507" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="28" height="32" font="7"><b>K</b></text>
<text top="110" left="97" width="94" height="20" font="2">knockback</text>
<text top="136" left="140" width="162" height="20" font="2">adding,	to	player	/	</text>
<text top="136" left="303" width="154" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Player	knockback</a></text>
</page>
<page number="508" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="24" height="32" font="7"><b>L</b></text>
<text top="110" left="97" width="85" height="20" font="2">landscape</text>
<text top="136" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#398">	</a></text>
<text top="136" left="205" width="92" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#398">Landscape</a></text>
<text top="162" left="140" width="86" height="20" font="2">creating	/	</text>
<text top="162" left="227" width="92" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#398">Landscape</a></text>
<text top="188" left="140" width="96" height="20" font="2">sculpting	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#398">	</a></text>
<text top="188" left="236" width="205" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#398">Sculpting	the	landscape</a></text>
<text top="214" left="97" width="42" height="20" font="2">level</text>
<text top="240" left="140" width="86" height="20" font="2">creating	/	</text>
<text top="240" left="227" width="182" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#282">Starting	from	scratch</a></text>
<text top="266" left="140" width="196" height="20" font="2">light	sources,	adding	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#282">	</a></text>
<text top="266" left="336" width="180" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#282">Adding	light	sources</a></text>
<text top="292" left="140" width="170" height="20" font="2">collision	volumes	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#282">	</a></text>
<text top="292" left="310" width="158" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#282">Collision	volumes</a></text>
<text top="318" left="140" width="398" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#282">collision	detection,	adding	for	objects	editor	/	</a></text>
<text top="318" left="538" width="291" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#282">Adding	collision	detection	for	the</a></text>
<text top="344" left="140" width="117" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#282">objects	editor</a></text>
<text top="370" left="97" width="125" height="20" font="2">local	variables</text>
<text top="396" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">	</a></text>
<text top="396" left="205" width="132" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">Local	variables</a></text>
<text top="421" left="97" width="144" height="20" font="2">logical	operators</text>
<text top="447" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#120">	</a></text>
<text top="447" left="205" width="201" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#120">Using	logical	operators</a></text>
<text top="473" left="140" width="64" height="20" font="2">using	/	</text>
<text top="473" left="204" width="201" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#120">Using	logical	operators</a></text>
<text top="499" left="140" width="153" height="20" font="2">Not	(!)	operator	/	</text>
<text top="499" left="294" width="176" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#120">The	Not	(!)	operator</a></text>
<text top="525" left="140" width="185" height="20" font="2">And	(&amp;&amp;)	operator	/	</text>
<text top="525" left="325" width="89" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#120">The	And	(</a></text>
<text top="551" left="140" width="145" height="20" font="2">Or	(||)	operator	/	</text>
<text top="551" left="286" width="167" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#120">The	Or	(||)	operator</a></text>
</page>
<page number="509" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="34" height="32" font="7"><b>M</b></text>
<text top="110" left="97" width="62" height="20" font="2">macros</text>
<text top="136" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#199">	</a></text>
<text top="136" left="205" width="65" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#199">Macros</a></text>
<text top="162" left="140" width="203" height="20" font="2">const	variables,	using	/	</text>
<text top="162" left="344" width="433" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#199">Advice	–	try	to	use	const	variables	where	possible</a></text>
<text top="188" left="97" width="206" height="20" font="2">macros,	with	arguments</text>
<text top="214" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#202">	</a></text>
<text top="214" left="205" width="203" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#202">Macros	with	arguments</a></text>
<text top="240" left="140" width="209" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#202">inline	functions,	using	/	</a></text>
<text top="240" left="350" width="454" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#202">Advice	–	use	inline	functions	instead	of	macros	with</a></text>
<text top="266" left="140" width="90" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#202">arguments</a></text>
<text top="292" left="97" width="114" height="20" font="2">main.cpp	file</text>
<text top="318" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">	</a></text>
<text top="318" left="205" width="157" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">main.cpp	contains</a></text>
<text top="344" left="97" width="150" height="20" font="2">malloc()	function</text>
<text top="370" left="140" width="64" height="20" font="2">using	/	</text>
<text top="370" left="204" width="205" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#264">Dynamic	C-style	arrays</a></text>
<text top="396" left="97" width="115" height="20" font="2">math,	in	C++</text>
<text top="421" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">	</a></text>
<text top="421" left="205" width="112" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">Math	in	C++</a></text>
<text top="447" left="140" width="96" height="20" font="2">exercises	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">	</a></text>
<text top="447" left="236" width="83" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">Exercises</a></text>
<text top="473" left="97" width="119" height="20" font="2">Melee	attacks</text>
<text top="499" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">	</a></text>
<text top="499" left="205" width="119" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Melee	attacks</a></text>
<text top="525" left="140" width="224" height="20" font="2">melee	weapon,	defining	/	</text>
<text top="525" left="364" width="221" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Defining	a	melee	weapon</a></text>
<text top="551" left="97" width="156" height="20" font="2">member	functions</text>
<text top="577" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#207">	</a></text>
<text top="577" left="205" width="159" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#207">Member	functions</a></text>
<text top="603" left="140" width="129" height="20" font="2">this	keyword	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#207">	</a></text>
<text top="603" left="269" width="151" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#207">The	this	keyword</a></text>
<text top="629" left="140" width="222" height="20" font="2">strings,	using	as	objects	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#207">	</a></text>
<text top="629" left="362" width="169" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#207">Strings	are	objects?</a></text>
<text top="655" left="140" width="94" height="20" font="2">invoking	/	</text>
<text top="655" left="234" width="246" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#207">Invoking	a	member	function</a></text>
<text top="681" left="140" width="96" height="20" font="2">exercises	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#207">	</a></text>
<text top="681" left="236" width="83" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#207">Exercises</a></text>
<text top="707" left="140" width="208" height="20" font="2">solutions,	of	exercises	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#207">	</a></text>
<text top="707" left="348" width="82" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#207">Solutions</a></text>
<text top="733" left="140" width="135" height="20" font="2">encapsulation	/	</text>
<text top="733" left="276" width="230" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#207">Privates	and	encapsulation</a></text>
<text top="758" left="140" width="197" height="20" font="2">public	data	members	/	</text>
<text top="758" left="337" width="227" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#207">Some	people	like	it	public</a></text>
<text top="784" left="97" width="72" height="20" font="2">memory</text>
<text top="810" left="140" width="91" height="20" font="2">numbers	/	</text>
<text top="810" left="232" width="209" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">Numbers	are	everything</a></text>
<text top="836" left="97" width="231" height="20" font="2">memory	access	violation	/	</text>
<text top="836" left="329" width="145" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#256">The	array	syntax</a></text>
<text top="862" left="97" width="130" height="20" font="2">memory	leak	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#250">	</a></text>
<text top="862" left="227" width="124" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#250">Memory	leaks</a></text>
<text top="888" left="97" width="190" height="20" font="2">Microsoft	Visual	C++</text>
<text top="914" left="140" width="183" height="20" font="2">using,	on	Windows	/	</text>
<text top="914" left="324" width="361" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#59">Using	Microsoft	Visual	C++	on	Windows</a></text>
<text top="940" left="97" width="227" height="20" font="2">monster	attacks,	on	player</text>
<text top="966" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">	</a></text>
<text top="966" left="205" width="255" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Monster	attacks	on	the	player</a></text>
<text top="992" left="140" width="136" height="20" font="2">Melee	attacks	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">	</a></text>
<text top="992" left="276" width="119" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Melee	attacks</a></text>
<text top="1018" left="140" width="80" height="20" font="2">sockets	/	</text>
<text top="1018" left="221" width="67" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Sockets</a></text>
<text top="1044" left="140" width="155" height="20" font="2">projectile	attack	/	</text>
<text top="1044" left="296" width="236" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Projectile	or	ranged	attacks</a></text>
<text top="1070" left="140" width="132" height="20" font="2">ranged	attack	/	</text>
<text top="1070" left="273" width="236" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Projectile	or	ranged	attacks</a></text>
<text top="1096" left="140" width="261" height="20" font="2">knockback,	adding	to	player	/	</text>
<text top="1096" left="402" width="154" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Player	knockback</a></text>
<text top="1121" left="97" width="119" height="20" font="2">Monster	class</text>
<text top="1147" left="140" width="166" height="20" font="2">bullets,	adding	to	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">	</a></text>
<text top="1147" left="306" width="304" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Adding	bullets	to	the	monster	class</a></text>
<text top="1173" left="97" width="78" height="20" font="2">monsters</text>
</page>
<page number="510" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="140" width="134" height="20" font="2">programming	/	</text>
<text top="57" left="275" width="80" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#405">Monsters</a></text>
<text top="83" left="97" width="183" height="20" font="2">Monster	SightSphere</text>
<text top="109" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#405">	</a></text>
<text top="109" left="205" width="183" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#405">Monster	SightSphere</a></text>
<text top="135" left="97" width="173" height="20" font="2">multiple	inheritance</text>
<text top="161" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#238">	</a></text>
<text top="161" left="205" width="176" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#238">Multiple	inheritance</a></text>
<text top="187" left="140" width="178" height="20" font="2">private	inheritance	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#238">	</a></text>
<text top="187" left="318" width="161" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#238">private	inheritance</a></text>
</page>
<page number="511" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="26" height="32" font="7"><b>N</b></text>
<text top="110" left="97" width="100" height="20" font="2">new[]	array</text>
<text top="136" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#261">	</a></text>
<text top="136" left="205" width="440" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#261">C++	style	dynamic	size	arrays	(new[]	and	delete[])</a></text>
<text top="162" left="97" width="246" height="20" font="2">non-player	character	entities</text>
<text top="188" left="140" width="86" height="20" font="2">creating	/	</text>
<text top="188" left="227" width="325" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#319">Creating	non-player	character	entities</a></text>
<text top="214" left="97" width="283" height="20" font="2">Non-player	Characters	(NPCs)	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#268">	</a></text>
<text top="214" left="380" width="179" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#268">Actors	versus	pawns</a></text>
<text top="240" left="97" width="137" height="20" font="2">Not	(!)	operator</text>
<text top="266" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#120">	</a></text>
<text top="266" left="205" width="176" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#120">The	Not	(!)	operator</a></text>
<text top="292" left="97" width="292" height="20" font="2">NPCs	(non-playable	characters)	/	</text>
<text top="292" left="390" width="325" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#319">Creating	non-player	character	entities</a></text>
<text top="318" left="97" width="100" height="20" font="2">null	pointer</text>
<text top="344" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">	</a></text>
<text top="344" left="205" width="152" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">The	Null	pointers</a></text>
</page>
<page number="512" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="28" height="32" font="7"><b>O</b></text>
<text top="110" left="97" width="94" height="20" font="2">&amp;	operator</text>
<text top="136" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">	</a></text>
<text top="136" left="205" width="171" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">Address	of	operator</a></text>
<text top="162" left="97" width="102" height="20" font="2">==	operator</text>
<text top="188" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#113">	</a></text>
<text top="188" left="205" width="141" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#113">The	==	operator</a></text>
<text top="214" left="97" width="104" height="20" font="2">object	types</text>
<text top="240" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">	</a></text>
<text top="240" left="205" width="108" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">Object	types</a></text>
<text top="266" left="140" width="206" height="20" font="2">Player	object	exercise	/	</text>
<text top="266" left="347" width="151" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">Exercise	–	Player</a></text>
<text top="266" left="498" width="11" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">,	</a></text>
<text top="266" left="508" width="73" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">Solution</a></text>
<text top="292" left="97" width="129" height="20" font="2">Or	(||)	operator</text>
<text top="318" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#120">	</a></text>
<text top="318" left="205" width="167" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#120">The	Or	(||)	operator</a></text>
</page>
<page number="513" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="22" height="32" font="7"><b>P</b></text>
<text top="110" left="97" width="156" height="20" font="2">particle	properties</text>
<text top="136" left="140" width="107" height="20" font="2">modifying	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#454">	</a></text>
<text top="136" left="247" width="246" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#454">Changing	particle	properties</a></text>
<text top="162" left="97" width="138" height="20" font="2">particle	systems</text>
<text top="188" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#454">	</a></text>
<text top="188" left="205" width="177" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#454">The	particle	systems</a></text>
<text top="214" left="97" width="55" height="20" font="2">pawns</text>
<text top="240" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#268">	</a></text>
<text top="240" left="205" width="179" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#268">Actors	versus	pawns</a></text>
<text top="266" left="97" width="132" height="20" font="2">PickupItem.h	/	</text>
<text top="266" left="230" width="194" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#380">Base	class	PickupItem</a></text>
<text top="292" left="97" width="191" height="20" font="2">PickupItem	base	class</text>
<text top="318" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#380">	</a></text>
<text top="318" left="205" width="194" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#380">Base	class	PickupItem</a></text>
<text top="344" left="140" width="153" height="20" font="2">root	component	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#380">	</a></text>
<text top="344" left="293" width="175" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#380">The	root	component</a></text>
<text top="370" left="97" width="183" height="20" font="2">PickupItem	blueprint</text>
<text top="396" left="140" width="86" height="20" font="2">creating	/	</text>
<text top="396" left="227" width="441" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#472">Creating	blueprints	for	PickupItems	that	cast	spells</a></text>
<text top="421" left="97" width="54" height="20" font="2">player</text>
<text top="447" left="140" width="202" height="20" font="2">knockback,	adding	to	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">	</a></text>
<text top="447" left="342" width="154" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Player	knockback</a></text>
<text top="473" left="97" width="108" height="20" font="2">player	entity</text>
<text top="499" left="140" width="86" height="20" font="2">creating	/	</text>
<text top="499" left="227" width="203" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#292">Creating	a	player	entity</a></text>
<text top="525" left="140" width="420" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#292">inheriting,	from	UE4	GameFramework	classes	/	</a></text>
<text top="525" left="561" width="177" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#292">Inheriting	from	UE4</a></text>
<text top="551" left="140" width="216" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#292">GameFramework	classes</a></text>
<text top="577" left="140" width="331" height="20" font="2">model,	associating	with	Avatar	class	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#292">	</a></text>
<text top="577" left="471" width="362" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#292">Associating	a	model	with	the	Avatar	class</a></text>
<text top="603" left="140" width="242" height="20" font="2">free	models,	downloading	/	</text>
<text top="603" left="382" width="224" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#292">Downloading	free	models</a></text>
<text top="629" left="140" width="138" height="20" font="2">mesh,	loading	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#292">	</a></text>
<text top="629" left="278" width="155" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#292">Loading	the	mesh</a></text>
<text top="655" left="140" width="314" height="20" font="2">blueprint,	creating	from	C++	class	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#292">	</a></text>
<text top="655" left="454" width="346" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#292">Creating	a	blueprint	from	our	C++	class</a></text>
<text top="681" left="97" width="142" height="20" font="2">player	inventory</text>
<text top="707" left="140" width="88" height="20" font="2">drawing	/	</text>
<text top="707" left="228" width="255" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#387">Drawing	the	player	inventory</a></text>
<text top="733" left="140" width="271" height="20" font="2">HUD**DrawTexture(),	using	/	</text>
<text top="733" left="411" width="244" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#387">Using	HUD::DrawTexture()</a></text>
<text top="758" left="140" width="289" height="20" font="2">inventory	item	clicks,	detecting	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#387">	</a></text>
<text top="758" left="429" width="271" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#387">Detecting	inventory	item	clicks</a></text>
<text top="784" left="97" width="251" height="20" font="2">players	backpack	declaration</text>
<text top="810" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#367">	</a></text>
<text top="810" left="205" width="204" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#367">Declaring	the	backpack</a></text>
<text top="836" left="140" width="186" height="20" font="2">forward	declaration	/	</text>
<text top="836" left="327" width="174" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#367">Forward	declaration</a></text>
<text top="862" left="140" width="163" height="20" font="2">assets,	importing	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#367">	</a></text>
<text top="862" left="303" width="142" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#367">Importing	assets</a></text>
<text top="888" left="140" width="299" height="20" font="2">action	mapping,	attaching	to	key	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#367">	</a></text>
<text top="888" left="439" width="324" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#367">Attaching	an	action	mapping	to	a	key</a></text>
<text top="914" left="97" width="70" height="20" font="2">pointers</text>
<text top="940" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">	</a></text>
<text top="940" left="205" width="71" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">Pointers</a></text>
<text top="966" left="140" width="54" height="20" font="2">uses	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">	</a></text>
<text top="966" left="194" width="194" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">What	can	pointers	do?</a></text>
<text top="992" left="97" width="130" height="20" font="2">primitive	types</text>
<text top="1018" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">	</a></text>
<text top="1018" left="205" width="131" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">Primitive	types</a></text>
<text top="1044" left="97" width="62" height="20" font="2">printf()</text>
<text top="1070" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">	</a></text>
<text top="1070" left="205" width="62" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">printf()</a></text>
<text top="1096" left="97" width="166" height="20" font="2">program	flow,	C++</text>
<text top="1121" left="140" width="111" height="20" font="2">controlling	/	</text>
<text top="1121" left="252" width="323" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#113">Controlling	the	flow	of	your	program</a></text>
<text top="1147" left="140" width="118" height="20" font="2">==	operator	/	</text>
<text top="1147" left="259" width="141" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#113">The	==	operator</a></text>
<text top="1173" left="140" width="196" height="20" font="2">if	statements,	coding	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#113">	</a></text>
<text top="1173" left="336" width="179" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#113">Coding	if	statements</a></text>
</page>
<page number="514" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="140" width="216" height="20" font="2">else	statements,	coding	/	</text>
<text top="57" left="357" width="199" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#113">Coding	else	statements</a></text>
<text top="83" left="140" width="420" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#113">inequalities,	testing	with	comparison	operators	/	</a></text>
<text top="83" left="561" width="251" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#113">Testing	for	inequalities	using</a></text>
<text top="109" left="140" width="428" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#113">other	comparison	operators	(&gt;,	&gt;=,	&lt;,	&lt;=,	and	!=)</a></text>
<text top="135" left="97" width="147" height="20" font="2">projectile	attacks</text>
<text top="161" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">	</a></text>
<text top="161" left="205" width="236" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Projectile	or	ranged	attacks</a></text>
<text top="187" left="97" width="141" height="20" font="2">prototypes.h	file</text>
<text top="213" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">	</a></text>
<text top="213" left="205" width="185" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">prototypes.h	contains</a></text>
</page>
<page number="515" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="28" height="32" font="7"><b>Q</b></text>
<text top="110" left="97" width="341" height="20" font="2">quote,	displaying	from	NPC	dialog	box</text>
<text top="136" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#324">	</a></text>
<text top="136" left="205" width="400" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#324">Displaying	a	quote	from	each	NPC	dialog	box</a></text>
<text top="162" left="140" width="278" height="20" font="2">messages,	displaying	on	HUD	/	</text>
<text top="162" left="419" width="293" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#324">Displaying	messages	on	the	HUD</a></text>
<text top="188" left="140" width="236" height="20" font="2">TArray&lt;Message&gt;,	using	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#324">	</a></text>
<text top="188" left="376" width="219" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#324">Using	TArray&lt;Message&gt;</a></text>
<text top="214" left="140" width="249" height="20" font="2">event,	triggering	near	NPC	/	</text>
<text top="214" left="390" width="374" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#324">Triggering	an	event	when	it	is	near	an	NPC</a></text>
<text top="240" left="140" width="276" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#324">NPC,	making	display	to	HUD	/	</a></text>
<text top="240" left="417" width="397" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#324">Make	the	NPC	display	something	to	the	HUD</a></text>
<text top="266" left="140" width="226" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#324">when	something	is	nearby</a></text>
</page>
<page number="516" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="26" height="32" font="7"><b>R</b></text>
<text top="110" left="97" width="124" height="20" font="2">ranged	attacks</text>
<text top="136" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">	</a></text>
<text top="136" left="205" width="236" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Projectile	or	ranged	attacks</a></text>
<text top="162" left="97" width="155" height="20" font="2">Rigging	101	class</text>
<text top="188" left="140" width="59" height="20" font="2">URL	/	</text>
<text top="188" left="200" width="346" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#292">Creating	a	blueprint	from	our	C++	class</a></text>
<text top="214" left="97" width="219" height="20" font="2">right	mouse	button	clicks</text>
<text top="240" left="140" width="102" height="20" font="2">activating	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#482">	</a></text>
<text top="240" left="242" width="315" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#482">Activating	right	mouse	button	clicks</a></text>
<text top="266" left="97" width="150" height="20" font="2">right	mouse	click</text>
<text top="292" left="140" width="209" height="20" font="2">attaching,	to	cast	spell	/	</text>
<text top="292" left="349" width="348" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#482">Attaching	right	mouse	click	to	cast	spell</a></text>
<text top="318" left="97" width="337" height="20" font="2">root	component,	PickupItem	base	class</text>
<text top="344" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#380">	</a></text>
<text top="344" left="205" width="175" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#380">The	root	component</a></text>
<text top="370" left="140" width="161" height="20" font="2">avatar,	obtaining	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#380">	</a></text>
<text top="370" left="301" width="155" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#380">Getting	the	avatar</a></text>
<text top="396" left="140" width="251" height="20" font="2">player	controller,	obtaining	/	</text>
<text top="396" left="392" width="245" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#380">Getting	the	player	controller</a></text>
<text top="421" left="140" width="156" height="20" font="2">HUD,	obtaining	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#380">	</a></text>
<text top="421" left="296" width="149" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#380">Getting	the	HUD</a></text>
<text top="447" left="97" width="238" height="20" font="2">RootComponent	property	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#380">	</a></text>
<text top="447" left="335" width="175" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#380">The	root	component</a></text>
</page>
<page number="517" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="20" height="32" font="7"><b>S</b></text>
<text top="110" left="97" width="147" height="20" font="2">s.c_str()	function</text>
<text top="136" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">	</a></text>
<text top="136" left="205" width="62" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">printf()</a></text>
<text top="162" left="97" width="48" height="20" font="2">scene</text>
<text top="188" left="140" width="129" height="20" font="2">actor,	adding	/	</text>
<text top="188" left="269" width="246" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#290">Adding	an	actor	to	the	scene</a></text>
<text top="214" left="97" width="147" height="20" font="2">scope	of	variable</text>
<text top="240" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">	</a></text>
<text top="240" left="205" width="201" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">The	scope	of	a	variable</a></text>
<text top="266" left="140" width="61" height="20" font="2">g_int	/	</text>
<text top="266" left="202" width="201" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">The	scope	of	a	variable</a></text>
<text top="292" left="140" width="58" height="20" font="2">arg()	/	</text>
<text top="292" left="199" width="201" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">The	scope	of	a	variable</a></text>
<text top="318" left="140" width="35" height="20" font="2">fx	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">	</a></text>
<text top="318" left="175" width="201" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">The	scope	of	a	variable</a></text>
<text top="344" left="140" width="74" height="20" font="2">main()	/	</text>
<text top="344" left="215" width="201" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">The	scope	of	a	variable</a></text>
<text top="370" left="97" width="167" height="20" font="2">scripting	languages</text>
<text top="396" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#80">	</a></text>
<text top="396" left="205" width="79" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#80">Scripting</a></text>
<text top="421" left="97" width="125" height="20" font="2">set()	operation</text>
<text top="447" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#219">	</a></text>
<text top="447" left="205" width="364" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#219">But	what’s	the	point	of	get/set	OPS?</a></text>
<text top="473" left="97" width="55" height="20" font="2">setters</text>
<text top="499" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#219">	</a></text>
<text top="499" left="205" width="59" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#219">Setters</a></text>
<text top="525" left="97" width="64" height="20" font="2">sockets</text>
<text top="551" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">	</a></text>
<text top="551" left="205" width="67" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Sockets</a></text>
<text top="577" left="140" width="434" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">skeletal	mesh	socket,	creating	in	monster’s	hand	/	</a></text>
<text top="577" left="575" width="212" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Creating	a	skeletal	mesh</a></text>
<text top="603" left="140" width="247" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">socket	in	the	monster’s	hand</a></text>
<text top="629" left="140" width="241" height="20" font="2">sword,	attaching	to	model	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">	</a></text>
<text top="629" left="381" width="288" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Attaching	the	sword	to	the	model</a></text>
<text top="655" left="140" width="269" height="20" font="2">player,	equipping	with	sword	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">	</a></text>
<text top="655" left="409" width="329" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Code	to	equip	the	player	with	a	sword</a></text>
<text top="681" left="140" width="256" height="20" font="2">attack	animation,	triggering	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">	</a></text>
<text top="681" left="396" width="272" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Triggering	the	attack	animation</a></text>
<text top="707" left="97" width="340" height="20" font="2">source	control	management	tools	(scm)</text>
<text top="733" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#59">	</a></text>
<text top="733" left="205" width="204" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#59">Using	XCode	on	a	Mac</a></text>
<text top="758" left="97" width="188" height="20" font="2">spell-&gt;SetCaster(this)</text>
<text top="784" left="140" width="76" height="20" font="2">calling	/	</text>
<text top="784" left="216" width="188" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#482">spell-&gt;SetCaster(this)</a></text>
<text top="810" left="97" width="140" height="20" font="2">Spell	class	actor</text>
<text top="836" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#472">	</a></text>
<text top="836" left="205" width="140" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#472">Spell	class	actor</a></text>
<text top="862" left="97" width="49" height="20" font="2">spells</text>
<text top="888" left="140" width="122" height="20" font="2">blueprinting	/	</text>
<text top="888" left="263" width="198" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#472">Blueprinting	our	spells</a></text>
<text top="914" left="140" width="109" height="20" font="2">picking	up	/	</text>
<text top="914" left="249" width="147" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#472">Picking	up	spells</a></text>
<text top="940" left="140" width="123" height="20" font="2">instantiating	/	</text>
<text top="940" left="264" width="448" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#482">Instantiating	the	spell	–	GetWorld()-&gt;SpawnActor()</a></text>
<text top="966" left="140" width="86" height="20" font="2">creating	/	</text>
<text top="966" left="227" width="179" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#490">Creating	other	spells</a></text>
<text top="992" left="97" width="124" height="20" font="2">sqrt()	function</text>
<text top="1018" left="140" width="65" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#180">about	/</a><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#169">	</a></text>
<text top="1018" left="205" width="434" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#169">An	example	of	a	&lt;cmath&gt;	library	function	–	sqrt()</a></text>
<text top="1018" left="639" width="11" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#180">,	</a></text>
<text top="1018" left="650" width="180" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#180">Functions	that	return</a></text>
<text top="1044" left="140" width="55" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#180">values</a></text>
<text top="1070" left="97" width="176" height="20" font="2">static	local	variables</text>
<text top="1096" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">	</a></text>
<text top="1096" left="205" width="180" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">Static	local	variables</a></text>
<text top="1121" left="97" width="48" height="20" font="2">struct</text>
<text top="1147" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#217">	</a></text>
<text top="1147" left="205" width="156" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#217">class	versus	struct</a></text>
<text top="1173" left="97" width="167" height="20" font="2">struct	make	objects</text>
</page>
<page number="518" position="absolute" top="0" left="0" height="1262" width="892">
<text top="57" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#207">	</a></text>
<text top="57" left="205" width="114" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#207">struct	objects</a></text>
</page>
<page number="519" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="24" height="32" font="7"><b>T</b></text>
<text top="110" left="97" width="184" height="20" font="2">TArray&lt;int&gt;	variable</text>
<text top="136" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#342">	</a></text>
<text top="136" left="205" width="159" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#342">UE4’s	TArray&lt;T&gt;</a></text>
<text top="136" left="364" width="11" height="20" font="2"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#342">,</a>	</text>
<text top="136" left="375" width="290" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#342">An	example	that	uses	TArray&lt;T&gt;</a></text>
<text top="162" left="97" width="162" height="20" font="2">TArray&lt;Message&gt;</text>
<text top="188" left="140" width="64" height="20" font="2">using	/	</text>
<text top="188" left="204" width="219" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#324">Using	TArray&lt;Message&gt;</a></text>
<text top="214" left="140" width="87" height="20" font="2">exercise	/	</text>
<text top="214" left="228" width="74" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#324">Exercise</a></text>
<text top="240" left="140" width="191" height="20" font="2">solution,	of	exercise	/	</text>
<text top="240" left="332" width="73" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#324">Solution</a></text>
<text top="266" left="97" width="99" height="20" font="2">TArray&lt;T&gt;</text>
<text top="292" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#342">	</a></text>
<text top="292" left="205" width="159" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#342">UE4’s	TArray&lt;T&gt;</a></text>
<text top="318" left="140" width="54" height="20" font="2">uses	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#342">	</a></text>
<text top="318" left="194" width="290" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#342">An	example	that	uses	TArray&lt;T&gt;</a></text>
<text top="344" left="140" width="89" height="20" font="2">iterating	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#342">	</a></text>
<text top="344" left="229" width="155" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#342">Iterating	a	TArray</a></text>
<text top="370" left="97" width="111" height="20" font="2">TMap&lt;T,	S&gt;</text>
<text top="396" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#355">	</a></text>
<text top="396" left="205" width="111" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#355">TMap&lt;T,	S&gt;</a></text>
<text top="421" left="140" width="95" height="20" font="2">items	list	/	</text>
<text top="421" left="236" width="347" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#355">A	list	of	items	for	the	player’s	inventory</a></text>
<text top="447" left="140" width="89" height="20" font="2">iterating	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#355">	</a></text>
<text top="447" left="229" width="146" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#355">Iterating	a	TMap</a></text>
<text top="473" left="97" width="78" height="20" font="2">TSet&lt;T&gt;</text>
<text top="499" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#349">	</a></text>
<text top="499" left="205" width="78" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#349">TSet&lt;T&gt;</a></text>
<text top="525" left="140" width="99" height="20" font="2">interating	/	</text>
<text top="525" left="240" width="134" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#349">Iterating	a	TSet</a></text>
<text top="551" left="140" width="117" height="20" font="2">intersecting	/	</text>
<text top="551" left="258" width="148" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#349">Intersecting	TSet</a></text>
<text top="577" left="140" width="94" height="20" font="2">unioning	/	</text>
<text top="577" left="234" width="128" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#349">Unioning	TSet</a></text>
<text top="603" left="140" width="79" height="20" font="2">finding	/	</text>
<text top="603" left="220" width="113" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#349">Finding	TSet</a></text>
</page>
<page number="520" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="26" height="32" font="7"><b>U</b></text>
<text top="110" left="97" width="156" height="20" font="2">UCLASS()	macro</text>
<text top="136" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#292">	</a></text>
<text top="136" left="205" width="399" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#292">Inheriting	from	UE4	GameFramework	classes</a></text>
<text top="162" left="97" width="140" height="20" font="2">UE4	blueprint	/	</text>
<text top="162" left="237" width="140" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Blueprint	basics</a></text>
<text top="188" left="97" width="95" height="20" font="2">UE4	editor</text>
<text top="214" left="140" width="59" height="20" font="2">URL	/	</text>
<text top="214" left="200" width="324" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#271">Creating	a	world	to	put	your	actors	in</a></text>
<text top="240" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#275">	</a></text>
<text top="240" left="205" width="134" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#275">The	UE4	editor</a></text>
<text top="266" left="140" width="142" height="20" font="2">editor	controls	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#275">	</a></text>
<text top="266" left="282" width="129" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#275">Editor	controls</a></text>
<text top="292" left="140" width="182" height="20" font="2">play	mode	controls	/	</text>
<text top="292" left="323" width="167" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#275">Play	mode	controls</a></text>
<text top="318" left="140" width="223" height="20" font="2">objects,	adding	to	scene	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#275">	</a></text>
<text top="318" left="363" width="239" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#275">Adding	objects	to	the	scene</a></text>
<text top="344" left="97" width="105" height="20" font="2">UE4	project</text>
<text top="370" left="140" width="147" height="20" font="2">world,	creating	/	</text>
<text top="370" left="288" width="324" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#271">Creating	a	world	to	put	your	actors	in</a></text>
<text top="396" left="140" width="174" height="20" font="2">output,	debugging	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#339">	</a></text>
<text top="396" left="314" width="255" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#339">Debugging	the	output	in	UE4</a></text>
<text top="421" left="140" width="116" height="20" font="2">TArray&lt;T&gt;	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#342">	</a></text>
<text top="421" left="256" width="159" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#342">UE4’s	TArray&lt;T&gt;</a></text>
<text top="447" left="140" width="95" height="20" font="2">TSet&lt;T&gt;	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#349">	</a></text>
<text top="447" left="235" width="78" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#349">TSet&lt;T&gt;</a></text>
<text top="473" left="140" width="128" height="20" font="2">TMap&lt;T,	S&gt;	/	</text>
<text top="473" left="269" width="111" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#355">TMap&lt;T,	S&gt;</a></text>
<text top="499" left="97" width="206" height="20" font="2">UE4	property	specifiers</text>
<text top="525" left="140" width="59" height="20" font="2">URL	/	</text>
<text top="525" left="200" width="325" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#319">Creating	non-player	character	entities</a></text>
<text top="551" left="97" width="204" height="20" font="2">Unreal	Engine	example</text>
<text top="577" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#126">	</a></text>
<text top="577" left="205" width="327" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#126">Our	first	example	with	Unreal	Engine</a></text>
<text top="603" left="140" width="87" height="20" font="2">exercise	/	</text>
<text top="603" left="228" width="74" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#126">Exercise</a></text>
<text top="629" left="140" width="155" height="20" font="2">code,	branching	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#126">	</a></text>
<text top="629" left="295" width="338" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#126">Branching	code	in	more	than	two	ways</a></text>
<text top="655" left="140" width="157" height="20" font="2">else	if	statement	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#126">	</a></text>
<text top="655" left="297" width="179" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#126">The	else	if	statement</a></text>
<text top="681" left="140" width="239" height="20" font="2">exercise,	else	if	statement	/	</text>
<text top="681" left="379" width="74" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#126">Exercise</a></text>
<text top="681" left="453" width="11" height="20" font="2">,	</text>
<text top="681" left="464" width="73" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#126">Solution</a></text>
<text top="707" left="140" width="161" height="20" font="2">switch	statement	/	</text>
<text top="707" left="302" width="183" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#126">The	switch	statement</a></text>
<text top="733" left="140" width="158" height="20" font="2">switch,	versus	if	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#126">	</a></text>
<text top="733" left="298" width="139" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#126">Switch	versus	if</a></text>
<text top="758" left="140" width="243" height="20" font="2">exercise,	switch	statement	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#126">	</a></text>
<text top="758" left="383" width="74" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#126">Exercise</a></text>
<text top="784" left="140" width="127" height="20" font="2">looping	with	/	</text>
<text top="784" left="267" width="248" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#159">Looping	with	Unreal	Engine</a></text>
<text top="810" left="97" width="199" height="20" font="2">unreal	particle	emitters</text>
<text top="836" left="140" width="149" height="20" font="2">URL,	for	video	/	</text>
<text top="836" left="290" width="177" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#454">The	particle	systems</a></text>
</page>
<page number="521" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="26" height="32" font="7"><b>V</b></text>
<text top="110" left="97" width="78" height="20" font="2">variables</text>
<text top="136" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">	</a></text>
<text top="136" left="205" width="80" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">Variables</a></text>
<text top="136" left="285" width="11" height="20" font="2">,<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">	</a></text>
<text top="136" left="296" width="165" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">Variables,	revisited</a></text>
<text top="162" left="140" width="97" height="20" font="2">declaring	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">	</a></text>
<text top="162" left="237" width="360" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">Declaring	variables	–	touching	the	silicon</a></text>
<text top="188" left="140" width="82" height="20" font="2">reading	/	</text>
<text top="188" left="222" width="463" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">Reading	and	writing	to	your	reserved	spot	in	memory</a></text>
<text top="214" left="140" width="79" height="20" font="2">writing	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">	</a></text>
<text top="214" left="219" width="463" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">Reading	and	writing	to	your	reserved	spot	in	memory</a></text>
<text top="240" left="140" width="64" height="20" font="2">using	/	</text>
<text top="240" left="204" width="157" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">More	on	variables</a></text>
<text top="266" left="140" width="253" height="20" font="2">generalized	variable	syntax	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">	</a></text>
<text top="266" left="393" width="241" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">Generalized	variable	syntax</a></text>
<text top="292" left="140" width="147" height="20" font="2">primitive	types	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">	</a></text>
<text top="292" left="287" width="131" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">Primitive	types</a></text>
<text top="318" left="140" width="120" height="20" font="2">object	types	/	</text>
<text top="318" left="261" width="108" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">Object	types</a></text>
<text top="344" left="140" width="86" height="20" font="2">pointers	/	</text>
<text top="344" left="227" width="71" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">Pointers</a></text>
<text top="370" left="140" width="111" height="20" font="2">&amp;	operator	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">	</a></text>
<text top="370" left="251" width="171" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">Address	of	operator</a></text>
<text top="396" left="140" width="117" height="20" font="2">null	pointer	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">	</a></text>
<text top="396" left="257" width="152" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">The	Null	pointers</a></text>
<text top="421" left="140" width="43" height="20" font="2">cin	/	</text>
<text top="421" left="184" width="26" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">cin</a></text>
<text top="447" left="140" width="79" height="20" font="2">printf()	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">	</a></text>
<text top="447" left="219" width="62" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#85">printf()</a></text>
<text top="473" left="140" width="154" height="20" font="2">global	variables	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">	</a></text>
<text top="473" left="294" width="142" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">Global	variables</a></text>
<text top="499" left="140" width="142" height="20" font="2">local	variables	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">	</a></text>
<text top="499" left="282" width="132" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">Local	variables</a></text>
<text top="525" left="140" width="164" height="20" font="2">scope	of	variable	/	</text>
<text top="525" left="305" width="201" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">The	scope	of	a	variable</a></text>
<text top="551" left="140" width="193" height="20" font="2">static	local	variables	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">	</a></text>
<text top="551" left="333" width="180" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">Static	local	variables</a></text>
<text top="577" left="140" width="146" height="20" font="2">const	variables	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">	</a></text>
<text top="577" left="286" width="134" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">Const	variables</a></text>
<text top="603" left="140" width="185" height="20" font="2">function	prototypes	/	</text>
<text top="603" left="326" width="173" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">Function	prototypes</a></text>
<text top="629" left="140" width="67" height="20" font="2">.h	file	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">	</a></text>
<text top="629" left="207" width="137" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">.h	and	.cpp	files</a></text>
<text top="655" left="140" width="88" height="20" font="2">.cpp	file	/	</text>
<text top="655" left="228" width="137" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">.h	and	.cpp	files</a></text>
<text top="681" left="140" width="167" height="20" font="2">prototypes.h	files	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">	</a></text>
<text top="681" left="307" width="185" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">prototypes.h	contains</a></text>
<text top="707" left="140" width="134" height="20" font="2">funcs.cpp	file	/	</text>
<text top="707" left="275" width="185" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">prototypes.h	contains</a></text>
<text top="733" left="140" width="131" height="20" font="2">main.cpp	file	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">	</a></text>
<text top="733" left="271" width="157" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">main.cpp	contains</a></text>
<text top="758" left="140" width="154" height="20" font="2">extern	variables	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">	</a></text>
<text top="758" left="294" width="141" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#185">Extern	variables</a></text>
<text top="784" left="97" width="198" height="20" font="2">Version	control	system</text>
<text top="810" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#59">	</a></text>
<text top="810" left="205" width="204" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#59">Using	XCode	on	a	Mac</a></text>
<text top="836" left="97" width="117" height="20" font="2">Visual	Studio</text>
<text top="862" left="140" width="59" height="20" font="2">URL	/	</text>
<text top="862" left="200" width="361" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#59">Using	Microsoft	Visual	C++	on	Windows</a></text>
</page>
<page number="522" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="36" height="32" font="7"><b>W</b></text>
<text top="110" left="97" width="197" height="20" font="2">weapon,	Melee	attacks</text>
<text top="136" left="140" width="89" height="20" font="2">defining	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">	</a></text>
<text top="136" left="229" width="221" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Defining	a	melee	weapon</a></text>
<text top="162" left="140" width="147" height="20" font="2">coding,	in	C++	/	</text>
<text top="162" left="288" width="305" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Coding	for	a	melee	weapon	in	C++</a></text>
<text top="188" left="140" width="193" height="20" font="2">sword,	downloading	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">	</a></text>
<text top="188" left="333" width="191" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Downloading	a	sword</a></text>
<text top="214" left="140" width="175" height="20" font="2">blueprint,	creating	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">	</a></text>
<text top="214" left="315" width="378" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#418">Creating	a	blueprint	for	your	melee	weapon</a></text>
<text top="240" left="97" width="92" height="20" font="2">while	loop</text>
<text top="266" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#145">	</a></text>
<text top="266" left="205" width="131" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#145">The	while	loop</a></text>
<text top="292" left="140" width="131" height="20" font="2">infinite	loops	/	</text>
<text top="292" left="272" width="116" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#145">Infinite	loops</a></text>
<text top="318" left="140" width="96" height="20" font="2">exercises	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#145">	</a></text>
<text top="318" left="236" width="83" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#145">Exercises</a></text>
<text top="344" left="140" width="208" height="20" font="2">solutions,	of	exercises	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#145">	</a></text>
<text top="344" left="348" width="82" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#145">Solutions</a></text>
</page>
<page number="523" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="26" height="32" font="7"><b>X</b></text>
<text top="110" left="97" width="61" height="20" font="2">XCode</text>
<text top="136" left="140" width="65" height="20" font="2">about	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#59">	</a></text>
<text top="136" left="205" width="204" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#59">Using	XCode	on	a	Mac</a></text>
<text top="162" left="140" width="140" height="20" font="2">using,	on	Mac	/<a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#59">	</a></text>
<text top="162" left="280" width="204" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#59">Using	XCode	on	a	Mac</a></text>
</page>
<page number="524" position="absolute" top="0" left="0" height="1262" width="892">
<text top="61" left="54" width="26" height="32" font="7"><b>Y</b></text>
<text top="110" left="97" width="121" height="20" font="2">yaw	and	pitch</text>
<text top="136" left="140" width="74" height="20" font="2">setting	/	</text>
<text top="136" left="215" width="124" height="20" font="1"><a href="24378_24593e9f0d615b2c50e03d3b5db0b25eefabe0882afec30e3074086969e7f28b.html#308">Yaw	and	pitch</a></text>
</page>
<outline>
<item page="16">Learning C++ by Creating Games with UE4</item>
<item page="18">Credits</item>
<item page="21">About the Author</item>
<item page="23">About the Reviewers</item>
<item page="25">www.PacktPub.com</item>
<item page="27">Support files, eBooks, discount offers, and more</item>
<item page="28">Why subscribe?</item>
<item page="29">Free access for Packt account holders</item>
<item page="30">Preface</item>
<item page="32">What is a game engine anyway?</item>
<item page="33">What will using UE4 cost me?</item>
<item page="35">Why don't I just program my own engine and save the 5 percent?</item>
<item page="37">A game's overview – the Play-Reward-Growth loop</item>
<item page="40">Monetization</item>
<item page="41">Why C++</item>
<item page="42">What this book covers</item>
<item page="44">What you need for this book</item>
<item page="46">Who this book is for</item>
<item page="48">Conventions</item>
<item page="50">Reader feedback</item>
<item page="52">Customer support</item>
<item page="54">Downloading the example code</item>
<item page="55">Downloading the color images of this book</item>
<item page="56">Errata</item>
<item page="57">Piracy</item>
<item page="58">Questions</item>
<item page="59">1. Coding with C++</item>
<item page="61">Setting up our project</item>
<item page="62">Using Microsoft Visual C++ on Windows</item>
<item page="66">Using XCode on a Mac</item>
<item page="71">Creating your first C++ program</item>
<item page="76">Semicolons</item>
<item page="77">Handling errors</item>
<item page="79">Warnings</item>
<item page="80">What is building and compiling?</item>
<item page="82">Scripting</item>
<item page="82">Exercise – ASCII art</item>
<item page="83">Summary</item>
<item page="85">2. Variables and Memory</item>
<item page="87">Variables</item>
<item page="88">Declaring variables – touching the silicon</item>
<item page="88">Reading and writing to your reserved spot in memory</item>
<item page="90">Numbers are everything</item>
<item page="92">More on variables</item>
<item page="94">Math in C++</item>
<item page="95">Exercises</item>
<item page="96">Generalized variable syntax</item>
<item page="97">Primitive types</item>
<item page="98">Object types</item>
<item page="99">Exercise – Player</item>
<item page="99">Solution</item>
<item page="101">Pointers</item>
<item page="102">What can pointers do?</item>
<item page="103">Address of operator &amp;</item>
<item page="104">The Null pointers</item>
<item page="105">cin</item>
<item page="106">printf()</item>
<item page="107">Exercise</item>
<item page="107">Solution</item>
<item page="108">Summary</item>
<item page="110">3. If, Else, and Switch</item>
<item page="112">Branching</item>
<item page="113">Controlling the flow of your program</item>
<item page="115">The == operator</item>
<item page="116">Coding if statements</item>
<item page="118">Coding else statements</item>
<item page="119">Testing for inequalities using other comparison operators (&gt;, &gt;=, &lt;, &lt;=, and !=)</item>
<item page="120">Using logical operators</item>
<item page="122">The Not (!) operator</item>
<item page="122">Exercises</item>
<item page="122">Solution</item>
<item page="124">The And (&amp;&amp;) operator</item>
<item page="125">The Or (||) operator</item>
<item page="126">Our first example with Unreal Engine</item>
<item page="133">Exercise</item>
<item page="134">Solution</item>
<item page="135">Branching code in more than two ways</item>
<item page="136">The else if statement</item>
<item page="137">Exercise</item>
<item page="137">Solution</item>
<item page="138">The switch statement</item>
<item page="140">Switch versus if</item>
<item page="141">Exercise</item>
<item page="142">Solution</item>
<item page="143">Summary</item>
<item page="145">4. Looping</item>
<item page="147">The while loop</item>
<item page="149">Infinite loops</item>
<item page="150">Exercises</item>
<item page="151">Solutions</item>
<item page="152">The do/while loop</item>
<item page="154">The for loop</item>
<item page="157">Exercises</item>
<item page="158">Solutions</item>
<item page="159">Looping with Unreal Engine</item>
<item page="162">Summary</item>
<item page="164">5. Functions and Macros</item>
<item page="166">Functions</item>
<item page="169">An example of a &lt;cmath&gt; library function – sqrt()</item>
<item page="172">Writing our own functions</item>
<item page="174">A sample program trace</item>
<item page="176">Exercise</item>
<item page="177">Solution</item>
<item page="178">Functions with arguments</item>
<item page="180">Functions that return values</item>
<item page="183">Exercises</item>
<item page="184">Solutions</item>
<item page="185">Variables, revisited</item>
<item page="187">Global variables</item>
<item page="188">Local variables</item>
<item page="189">The scope of a variable</item>
<item page="191">Static local variables</item>
<item page="192">Const variables</item>
<item page="193">Function prototypes</item>
<item page="194">.h and .cpp files</item>
<item page="195">prototypes.h contains</item>
<item page="196">funcs.cpp contains</item>
<item page="197">main.cpp contains</item>
<item page="198">Extern variables</item>
<item page="199">Macros</item>
<item page="201">Advice – try to use const variables where possible</item>
<item page="202">Macros with arguments</item>
<item page="204">Advice – use inline functions instead of macros with arguments</item>
<item page="205">Summary</item>
<item page="207">6. Objects, Classes, and Inheritance</item>
<item page="209">struct objects</item>
<item page="210">Member functions</item>
<item page="210">The this keyword</item>
<item page="211">Strings are objects?</item>
<item page="212">Invoking a member function</item>
<item page="213">Exercises</item>
<item page="213">Solutions</item>
<item page="214">Privates and encapsulation</item>
<item page="216">Some people like it public</item>
<item page="217">class versus struct</item>
<item page="219">Getters and setters</item>
<item page="221">Getters</item>
<item page="222">Setters</item>
<item page="223">But what's the point of get/set OPS?</item>
<item page="225">Constructors and destructors</item>
<item page="228">Class inheritance</item>
<item page="230">Derived classes</item>
<item page="233">Syntax of inheritance</item>
<item page="233">What does inheritance do?</item>
<item page="234">is-a relationship</item>
<item page="235">protected variables</item>
<item page="236">Virtual functions</item>
<item page="237">Purely virtual functions (and abstract classes)</item>
<item page="238">Multiple inheritance</item>
<item page="240">private inheritance</item>
<item page="241">Putting your classes into headers</item>
<item page="245">.h and .cpp</item>
<item page="247">Exercise</item>
<item page="248">Summary</item>
<item page="250">7. Dynamic Memory Allocation</item>
<item page="253">Dynamic memory allocation</item>
<item page="254">The delete keyword</item>
<item page="255">Memory leaks</item>
<item page="256">Regular arrays</item>
<item page="258">The array syntax</item>
<item page="259">Exercise</item>
<item page="260">Solutions</item>
<item page="261">C++ style dynamic size arrays (new[] and delete[])</item>
<item page="264">Dynamic C-style arrays</item>
<item page="266">Summary</item>
<item page="268">8. Actors and Pawns</item>
<item page="270">Actors versus pawns</item>
<item page="271">Creating a world to put your actors in</item>
<item page="275">The UE4 editor</item>
<item page="277">Editor controls</item>
<item page="278">Play mode controls</item>
<item page="279">Adding objects to the scene</item>
<item page="282">Starting from scratch</item>
<item page="285">Adding light sources</item>
<item page="287">Collision volumes</item>
<item page="287">Adding collision detection for the objects editor</item>
<item page="290">Adding an actor to the scene</item>
<item page="292">Creating a player entity</item>
<item page="294">Inheriting from UE4 GameFramework classes</item>
<item page="296">Associating a model with the Avatar class</item>
<item page="296">Downloading free models</item>
<item page="299">Loading the mesh</item>
<item page="299">Creating a blueprint from our C++ class</item>
<item page="308">Writing C++ code that controls the game's character</item>
<item page="310">Making the player an instance of the Avatar class</item>
<item page="313">Setting up controller inputs</item>
<item page="315">Exercise</item>
<item page="315">Solution</item>
<item page="317">Yaw and pitch</item>
<item page="319">Creating non-player character entities</item>
<item page="324">Displaying a quote from each NPC dialog box</item>
<item page="326">Displaying messages on the HUD</item>
<item page="329">Using TArray&lt;Message&gt;</item>
<item page="330">Exercise</item>
<item page="331">Solution</item>
<item page="332">Triggering an event when it is near an NPC</item>
<item page="333">Make the NPC display something to the HUD when something is nearby</item>
<item page="334">Exercises</item>
<item page="335">Solutions</item>
<item page="337">Summary</item>
<item page="339">9. Templates and Commonly Used container-fluids</item>
<item page="341">Debugging the output in UE4</item>
<item page="342">UE4's TArray&lt;T&gt;</item>
<item page="344">An example that uses TArray&lt;T&gt;</item>
<item page="346">Iterating a TArray</item>
<item page="346">The vanilla for loop and square brackets notation</item>
<item page="346">Iterators</item>
<item page="348">Finding whether an element is in the TArray</item>
<item page="349">TSet&lt;T&gt;</item>
<item page="351">Iterating a TSet</item>
<item page="352">Intersecting TSet</item>
<item page="353">Unioning TSet</item>
<item page="354">Finding TSet</item>
<item page="355">TMap&lt;T, S&gt;</item>
<item page="357">A list of items for the player's inventory</item>
<item page="358">Iterating a TMap</item>
<item page="359">C++ STL versions of commonly used container-fluids</item>
<item page="361">C++ STL set</item>
<item page="361">Finding an element in a &lt;set&gt;</item>
<item page="362">Exercise</item>
<item page="362">Solution</item>
<item page="363">C++ STL map</item>
<item page="363">Finding an element in a &lt;map&gt;</item>
<item page="363">Exercise</item>
<item page="364">Solution</item>
<item page="365">Summary</item>
<item page="367">10. Inventory System and Pickup Items</item>
<item page="369">Declaring the backpack</item>
<item page="370">Forward declaration</item>
<item page="373">Importing assets</item>
<item page="378">Attaching an action mapping to a key</item>
<item page="380">Base class PickupItem</item>
<item page="384">The root component</item>
<item page="385">Getting the avatar</item>
<item page="385">Getting the player controller</item>
<item page="386">Getting the HUD</item>
<item page="387">Drawing the player inventory</item>
<item page="389">Using HUD::DrawTexture()</item>
<item page="391">Exercise</item>
<item page="392">Detecting inventory item clicks</item>
<item page="392">Dragging elements</item>
<item page="395">Exercises</item>
<item page="396">Summary</item>
<item page="398">11. Monsters</item>
<item page="400">Landscape</item>
<item page="403">Sculpting the landscape</item>
<item page="405">Monsters</item>
<item page="411">Basic monster intelligence</item>
<item page="411">Moving the monster – steering behavior</item>
<item page="413">The discrete nature of monster motion</item>
<item page="415">Monster SightSphere</item>
<item page="418">Monster attacks on the player</item>
<item page="420">Melee attacks</item>
<item page="420">Defining a melee weapon</item>
<item page="420">Coding for a melee weapon in C++</item>
<item page="422">Downloading a sword</item>
<item page="424">Creating a blueprint for your melee weapon</item>
<item page="426">Sockets</item>
<item page="426">Creating a skeletal mesh socket in the monster's hand</item>
<item page="427">Attaching the sword to the model</item>
<item page="429">Code to equip the player with a sword</item>
<item page="431">Triggering the attack animation</item>
<item page="431">Blueprint basics</item>
<item page="435">Modifying the animation blueprint for Mixamo Adam</item>
<item page="441">Code to swing the sword</item>
<item page="444">Projectile or ranged attacks</item>
<item page="445">Bullet physics</item>
<item page="447">Adding bullets to the monster class</item>
<item page="451">Player knockback</item>
<item page="452">Summary</item>
<item page="454">12. Spell Book</item>
<item page="458">The particle systems</item>
<item page="461">Changing particle properties</item>
<item page="464">Settings for the blizzard spell</item>
<item page="472">Spell class actor</item>
<item page="476">Blueprinting our spells</item>
<item page="478">Picking up spells</item>
<item page="478">Creating blueprints for PickupItems that cast spells</item>
<item page="482">Attaching right mouse click to cast spell</item>
<item page="484">Writing the avatar's CastSpell function</item>
<item page="484">Instantiating the spell – GetWorld()-&gt;SpawnActor()</item>
<item page="485">if(spell)</item>
<item page="485">spell-&gt;SetCaster(this)</item>
<item page="486">Writing AMyHUD::MouseRightClicked()</item>
<item page="487">Activating right mouse button clicks</item>
<item page="490">Creating other spells</item>
<item page="492">The fire spell</item>
<item page="493">Exercises</item>
<item page="494">Summary</item>
<item page="496">Index</item>
</outline>
</pdf2xml>
